// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: tower.proto

package tower

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FanStatus int32

const (
	FanStatus_FAN_STATUS_UNKNOWN_UNSPECIFIED FanStatus = 0
	FanStatus_FAN_STATUS_ON                  FanStatus = 1
	FanStatus_FAN_STATUS_OFF                 FanStatus = 2
	FanStatus_FAN_STATUS_FAULTED             FanStatus = 3
)

// Enum value maps for FanStatus.
var (
	FanStatus_name = map[int32]string{
		0: "FAN_STATUS_UNKNOWN_UNSPECIFIED",
		1: "FAN_STATUS_ON",
		2: "FAN_STATUS_OFF",
		3: "FAN_STATUS_FAULTED",
	}
	FanStatus_value = map[string]int32{
		"FAN_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"FAN_STATUS_ON":                  1,
		"FAN_STATUS_OFF":                 2,
		"FAN_STATUS_FAULTED":             3,
	}
)

func (x FanStatus) Enum() *FanStatus {
	p := new(FanStatus)
	*p = x
	return p
}

func (x FanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[0].Descriptor()
}

func (FanStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[0]
}

func (x FanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanStatus.Descriptor instead.
func (FanStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{0}
}

type CellStatus int32

const (
	CellStatus_CELL_STATUS_NONE_UNSPECIFIED    CellStatus = 0
	CellStatus_CELL_STATUS_IDLE                CellStatus = 1
	CellStatus_CELL_STATUS_IN_PROCESS          CellStatus = 2
	CellStatus_CELL_STATUS_COMPLETE            CellStatus = 3
	CellStatus_CELL_STATUS_FAILED              CellStatus = 4
	CellStatus_CELL_STATUS_FAILED_SAFETY_LIMIT CellStatus = 5
)

// Enum value maps for CellStatus.
var (
	CellStatus_name = map[int32]string{
		0: "CELL_STATUS_NONE_UNSPECIFIED",
		1: "CELL_STATUS_IDLE",
		2: "CELL_STATUS_IN_PROCESS",
		3: "CELL_STATUS_COMPLETE",
		4: "CELL_STATUS_FAILED",
		5: "CELL_STATUS_FAILED_SAFETY_LIMIT",
	}
	CellStatus_value = map[string]int32{
		"CELL_STATUS_NONE_UNSPECIFIED":    0,
		"CELL_STATUS_IDLE":                1,
		"CELL_STATUS_IN_PROCESS":          2,
		"CELL_STATUS_COMPLETE":            3,
		"CELL_STATUS_FAILED":              4,
		"CELL_STATUS_FAILED_SAFETY_LIMIT": 5,
	}
)

func (x CellStatus) Enum() *CellStatus {
	p := new(CellStatus)
	*p = x
	return p
}

func (x CellStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[1].Descriptor()
}

func (CellStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[1]
}

func (x CellStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellStatus.Descriptor instead.
func (CellStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{1}
}

type FixtureStatus int32

const (
	FixtureStatus_FIXTURE_STATUS_UNKNOWN_UNSPECIFIED FixtureStatus = 0
	FixtureStatus_FIXTURE_STATUS_IDLE                FixtureStatus = 1
	FixtureStatus_FIXTURE_STATUS_READY               FixtureStatus = 2 // same as ready but tray present
	FixtureStatus_FIXTURE_STATUS_ACTIVE              FixtureStatus = 3 // faulted
	FixtureStatus_FIXTURE_STATUS_FAULTED             FixtureStatus = 4
	FixtureStatus_FIXTURE_STATUS_COMPLETE            FixtureStatus = 5 // complete, but tray has not been removed yet
	FixtureStatus_FIXTURE_STATUS_UPDATING            FixtureStatus = 6 // discuss if we need this
)

// Enum value maps for FixtureStatus.
var (
	FixtureStatus_name = map[int32]string{
		0: "FIXTURE_STATUS_UNKNOWN_UNSPECIFIED",
		1: "FIXTURE_STATUS_IDLE",
		2: "FIXTURE_STATUS_READY",
		3: "FIXTURE_STATUS_ACTIVE",
		4: "FIXTURE_STATUS_FAULTED",
		5: "FIXTURE_STATUS_COMPLETE",
		6: "FIXTURE_STATUS_UPDATING",
	}
	FixtureStatus_value = map[string]int32{
		"FIXTURE_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"FIXTURE_STATUS_IDLE":                1,
		"FIXTURE_STATUS_READY":               2,
		"FIXTURE_STATUS_ACTIVE":              3,
		"FIXTURE_STATUS_FAULTED":             4,
		"FIXTURE_STATUS_COMPLETE":            5,
		"FIXTURE_STATUS_UPDATING":            6,
	}
)

func (x FixtureStatus) Enum() *FixtureStatus {
	p := new(FixtureStatus)
	*p = x
	return p
}

func (x FixtureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixtureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[2].Descriptor()
}

func (FixtureStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[2]
}

func (x FixtureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixtureStatus.Descriptor instead.
func (FixtureStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{2}
}

type FixturePosition int32

const (
	FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED FixturePosition = 0
	FixturePosition_FIXTURE_POSITION_CLOSED              FixturePosition = 1
	FixturePosition_FIXTURE_POSITION_OPEN                FixturePosition = 2
	FixturePosition_FIXTURE_POSITION_INTERMEDIATE        FixturePosition = 3
	FixturePosition_FIXTURE_POSITION_INVALID             FixturePosition = 4
)

// Enum value maps for FixturePosition.
var (
	FixturePosition_name = map[int32]string{
		0: "FIXTURE_POSITION_UNKNOWN_UNSPECIFIED",
		1: "FIXTURE_POSITION_CLOSED",
		2: "FIXTURE_POSITION_OPEN",
		3: "FIXTURE_POSITION_INTERMEDIATE",
		4: "FIXTURE_POSITION_INVALID",
	}
	FixturePosition_value = map[string]int32{
		"FIXTURE_POSITION_UNKNOWN_UNSPECIFIED": 0,
		"FIXTURE_POSITION_CLOSED":              1,
		"FIXTURE_POSITION_OPEN":                2,
		"FIXTURE_POSITION_INTERMEDIATE":        3,
		"FIXTURE_POSITION_INVALID":             4,
	}
)

func (x FixturePosition) Enum() *FixturePosition {
	p := new(FixturePosition)
	*p = x
	return p
}

func (x FixturePosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixturePosition) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[3].Descriptor()
}

func (FixturePosition) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[3]
}

func (x FixturePosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixturePosition.Descriptor instead.
func (FixturePosition) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{3}
}

type FormRequest int32

const (
	FormRequest_FORM_REQUEST_UNKNOWN_UNSPECIFIED FormRequest = 0
	FormRequest_FORM_REQUEST_STOP                FormRequest = 1
	FormRequest_FORM_REQUEST_START               FormRequest = 2
	FormRequest_FORM_REQUEST_UPDATE_CELLS        FormRequest = 3
)

// Enum value maps for FormRequest.
var (
	FormRequest_name = map[int32]string{
		0: "FORM_REQUEST_UNKNOWN_UNSPECIFIED",
		1: "FORM_REQUEST_STOP",
		2: "FORM_REQUEST_START",
		3: "FORM_REQUEST_UPDATE_CELLS",
	}
	FormRequest_value = map[string]int32{
		"FORM_REQUEST_UNKNOWN_UNSPECIFIED": 0,
		"FORM_REQUEST_STOP":                1,
		"FORM_REQUEST_START":               2,
		"FORM_REQUEST_UPDATE_CELLS":        3,
	}
)

func (x FormRequest) Enum() *FormRequest {
	p := new(FormRequest)
	*p = x
	return p
}

func (x FormRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[4].Descriptor()
}

func (FormRequest) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[4]
}

func (x FormRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormRequest.Descriptor instead.
func (FormRequest) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{4}
}

type RecipeStep_FormMode int32

const (
	RecipeStep_FORM_MODE_UNKNOWN_UNSPECIFIED RecipeStep_FormMode = 0
	RecipeStep_FORM_MODE_CC                  RecipeStep_FormMode = 1
	RecipeStep_FORM_MODE_CV                  RecipeStep_FormMode = 2
)

// Enum value maps for RecipeStep_FormMode.
var (
	RecipeStep_FormMode_name = map[int32]string{
		0: "FORM_MODE_UNKNOWN_UNSPECIFIED",
		1: "FORM_MODE_CC",
		2: "FORM_MODE_CV",
	}
	RecipeStep_FormMode_value = map[string]int32{
		"FORM_MODE_UNKNOWN_UNSPECIFIED": 0,
		"FORM_MODE_CC":                  1,
		"FORM_MODE_CV":                  2,
	}
)

func (x RecipeStep_FormMode) Enum() *RecipeStep_FormMode {
	p := new(RecipeStep_FormMode)
	*p = x
	return p
}

func (x RecipeStep_FormMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeStep_FormMode) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[5].Descriptor()
}

func (RecipeStep_FormMode) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[5]
}

func (x RecipeStep_FormMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeStep_FormMode.Descriptor instead.
func (RecipeStep_FormMode) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{16, 0}
}

type FxrSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage         float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`           // 80V bus
	CcEnableInput      bool    `protobuf:"varint,2,opt,name=cc_enable_input,json=ccEnableInput,proto3" json:"cc_enable_input,omitempty"` // comms harness digital input
	VBus_24            float32 `protobuf:"fixed32,3,opt,name=v_bus_24,json=vBus24,proto3" json:"v_bus_24,omitempty"`
	PositionSwitchUp   bool    `protobuf:"varint,4,opt,name=position_switch_up,json=positionSwitchUp,proto3" json:"position_switch_up,omitempty"`
	PositionSiwtchDown bool    `protobuf:"varint,5,opt,name=position_siwtch_down,json=positionSiwtchDown,proto3" json:"position_siwtch_down,omitempty"`
}

func (x *FxrSensors) Reset() {
	*x = FxrSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrSensors) ProtoMessage() {}

func (x *FxrSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrSensors.ProtoReflect.Descriptor instead.
func (*FxrSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{0}
}

func (x *FxrSensors) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *FxrSensors) GetCcEnableInput() bool {
	if x != nil {
		return x.CcEnableInput
	}
	return false
}

func (x *FxrSensors) GetVBus_24() float32 {
	if x != nil {
		return x.VBus_24
	}
	return 0
}

func (x *FxrSensors) GetPositionSwitchUp() bool {
	if x != nil {
		return x.PositionSwitchUp
	}
	return false
}

func (x *FxrSensors) GetPositionSiwtchDown() bool {
	if x != nil {
		return x.PositionSiwtchDown
	}
	return false
}

type FxrOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibEnableLine     bool `protobuf:"varint,1,opt,name=stib_enable_line,json=stibEnableLine,proto3" json:"stib_enable_line,omitempty"`
	FixtureCloseEnable bool `protobuf:"varint,2,opt,name=fixture_close_enable,json=fixtureCloseEnable,proto3" json:"fixture_close_enable,omitempty"`
	CcEnaboutOutput    bool `protobuf:"varint,3,opt,name=cc_enabout_output,json=ccEnaboutOutput,proto3" json:"cc_enabout_output,omitempty"` // comms harness digital output
}

func (x *FxrOutputs) Reset() {
	*x = FxrOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrOutputs) ProtoMessage() {}

func (x *FxrOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrOutputs.ProtoReflect.Descriptor instead.
func (*FxrOutputs) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{1}
}

func (x *FxrOutputs) GetStibEnableLine() bool {
	if x != nil {
		return x.StibEnableLine
	}
	return false
}

func (x *FxrOutputs) GetFixtureCloseEnable() bool {
	if x != nil {
		return x.FixtureCloseEnable
	}
	return false
}

func (x *FxrOutputs) GetCcEnaboutOutput() bool {
	if x != nil {
		return x.CcEnaboutOutput
	}
	return false
}

type Fxr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors *FxrSensors `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Outputs *FxrOutputs `protobuf:"bytes,2,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *Fxr) Reset() {
	*x = Fxr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fxr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fxr) ProtoMessage() {}

func (x *Fxr) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fxr.ProtoReflect.Descriptor instead.
func (*Fxr) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{2}
}

func (x *Fxr) GetSensors() *FxrSensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Fxr) GetOutputs() *FxrOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type FibSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IBus_24     float32 `protobuf:"fixed32,1,opt,name=i_bus_24,json=iBus24,proto3" json:"i_bus_24,omitempty"`
	VBus_24     float32 `protobuf:"fixed32,2,opt,name=v_bus_24,json=vBus24,proto3" json:"v_bus_24,omitempty"`
	PBus_24     float32 `protobuf:"fixed32,3,opt,name=p_bus_24,json=pBus24,proto3" json:"p_bus_24,omitempty"`
	PcbTemp     float32 `protobuf:"fixed32,4,opt,name=pcb_temp,json=pcbTemp,proto3" json:"pcb_temp,omitempty"`
	VRail_5V    float32 `protobuf:"fixed32,5,opt,name=v_rail_5v,json=vRail5v,proto3" json:"v_rail_5v,omitempty"`
	VRail_3V3   float32 `protobuf:"fixed32,6,opt,name=v_rail_3v3,json=vRail3v3,proto3" json:"v_rail_3v3,omitempty"`
	MicroTemp   float32 `protobuf:"fixed32,7,opt,name=micro_temp,json=microTemp,proto3" json:"micro_temp,omitempty"`
	TrayPresent bool    `protobuf:"varint,8,opt,name=tray_present,json=trayPresent,proto3" json:"tray_present,omitempty"`
}

func (x *FibSensors) Reset() {
	*x = FibSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibSensors) ProtoMessage() {}

func (x *FibSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibSensors.ProtoReflect.Descriptor instead.
func (*FibSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{3}
}

func (x *FibSensors) GetIBus_24() float32 {
	if x != nil {
		return x.IBus_24
	}
	return 0
}

func (x *FibSensors) GetVBus_24() float32 {
	if x != nil {
		return x.VBus_24
	}
	return 0
}

func (x *FibSensors) GetPBus_24() float32 {
	if x != nil {
		return x.PBus_24
	}
	return 0
}

func (x *FibSensors) GetPcbTemp() float32 {
	if x != nil {
		return x.PcbTemp
	}
	return 0
}

func (x *FibSensors) GetVRail_5V() float32 {
	if x != nil {
		return x.VRail_5V
	}
	return 0
}

func (x *FibSensors) GetVRail_3V3() float32 {
	if x != nil {
		return x.VRail_3V3
	}
	return 0
}

func (x *FibSensors) GetMicroTemp() float32 {
	if x != nil {
		return x.MicroTemp
	}
	return 0
}

func (x *FibSensors) GetTrayPresent() bool {
	if x != nil {
		return x.TrayPresent
	}
	return false
}

type FibInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuTimeIsr       float32 `protobuf:"fixed32,1,opt,name=cpu_time_isr,json=cpuTimeIsr,proto3" json:"cpu_time_isr,omitempty"`
	CpuTimeIsrMax    float32 `protobuf:"fixed32,2,opt,name=cpu_time_isr_max,json=cpuTimeIsrMax,proto3" json:"cpu_time_isr_max,omitempty"`
	CpuTime_1Khz     float32 `protobuf:"fixed32,3,opt,name=cpu_time_1khz,json=cpuTime1khz,proto3" json:"cpu_time_1khz,omitempty"`
	CpuTime_1KhzMax  float32 `protobuf:"fixed32,4,opt,name=cpu_time_1khz_max,json=cpuTime1khzMax,proto3" json:"cpu_time_1khz_max,omitempty"`
	CpuTime_10Hz     float32 `protobuf:"fixed32,5,opt,name=cpu_time_10hz,json=cpuTime10hz,proto3" json:"cpu_time_10hz,omitempty"`
	CpuTime_10KhzMax float32 `protobuf:"fixed32,6,opt,name=cpu_time_10khz_max,json=cpuTime10khzMax,proto3" json:"cpu_time_10khz_max,omitempty"`
	StackUsageSystem float32 `protobuf:"fixed32,7,opt,name=stack_usage_system,json=stackUsageSystem,proto3" json:"stack_usage_system,omitempty"` // %
	StackUsage_1Khz  float32 `protobuf:"fixed32,8,opt,name=stack_usage_1khz,json=stackUsage1khz,proto3" json:"stack_usage_1khz,omitempty"`
	StackUsage_10Hz  float32 `protobuf:"fixed32,9,opt,name=stack_usage_10hz,json=stackUsage10hz,proto3" json:"stack_usage_10hz,omitempty"`
	StackUsageUds    float32 `protobuf:"fixed32,10,opt,name=stack_usage_uds,json=stackUsageUds,proto3" json:"stack_usage_uds,omitempty"`
	StackUsageNvram  float32 `protobuf:"fixed32,11,opt,name=stack_usage_nvram,json=stackUsageNvram,proto3" json:"stack_usage_nvram,omitempty"`
}

func (x *FibInternal) Reset() {
	*x = FibInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibInternal) ProtoMessage() {}

func (x *FibInternal) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibInternal.ProtoReflect.Descriptor instead.
func (*FibInternal) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{4}
}

func (x *FibInternal) GetCpuTimeIsr() float32 {
	if x != nil {
		return x.CpuTimeIsr
	}
	return 0
}

func (x *FibInternal) GetCpuTimeIsrMax() float32 {
	if x != nil {
		return x.CpuTimeIsrMax
	}
	return 0
}

func (x *FibInternal) GetCpuTime_1Khz() float32 {
	if x != nil {
		return x.CpuTime_1Khz
	}
	return 0
}

func (x *FibInternal) GetCpuTime_1KhzMax() float32 {
	if x != nil {
		return x.CpuTime_1KhzMax
	}
	return 0
}

func (x *FibInternal) GetCpuTime_10Hz() float32 {
	if x != nil {
		return x.CpuTime_10Hz
	}
	return 0
}

func (x *FibInternal) GetCpuTime_10KhzMax() float32 {
	if x != nil {
		return x.CpuTime_10KhzMax
	}
	return 0
}

func (x *FibInternal) GetStackUsageSystem() float32 {
	if x != nil {
		return x.StackUsageSystem
	}
	return 0
}

func (x *FibInternal) GetStackUsage_1Khz() float32 {
	if x != nil {
		return x.StackUsage_1Khz
	}
	return 0
}

func (x *FibInternal) GetStackUsage_10Hz() float32 {
	if x != nil {
		return x.StackUsage_10Hz
	}
	return 0
}

func (x *FibInternal) GetStackUsageUds() float32 {
	if x != nil {
		return x.StackUsageUds
	}
	return 0
}

func (x *FibInternal) GetStackUsageNvram() float32 {
	if x != nil {
		return x.StackUsageNvram
	}
	return 0
}

type FanMeasurements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed             float32 `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	SpeedRequest      float32 `protobuf:"fixed32,2,opt,name=speed_request,json=speedRequest,proto3" json:"speed_request,omitempty"`
	Duty              float32 `protobuf:"fixed32,3,opt,name=duty,proto3" json:"duty,omitempty"`
	DutyControlActive bool    `protobuf:"varint,4,opt,name=duty_control_active,json=dutyControlActive,proto3" json:"duty_control_active,omitempty"`
}

func (x *FanMeasurements) Reset() {
	*x = FanMeasurements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanMeasurements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanMeasurements) ProtoMessage() {}

func (x *FanMeasurements) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanMeasurements.ProtoReflect.Descriptor instead.
func (*FanMeasurements) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{5}
}

func (x *FanMeasurements) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *FanMeasurements) GetSpeedRequest() float32 {
	if x != nil {
		return x.SpeedRequest
	}
	return 0
}

func (x *FanMeasurements) GetDuty() float32 {
	if x != nil {
		return x.Duty
	}
	return 0
}

func (x *FanMeasurements) GetDutyControlActive() bool {
	if x != nil {
		return x.DutyControlActive
	}
	return false
}

type Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       FanStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=FanStatus" json:"status,omitempty"`
	Measurements *FanMeasurements `protobuf:"bytes,2,opt,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *Fan) Reset() {
	*x = Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fan) ProtoMessage() {}

func (x *Fan) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fan.ProtoReflect.Descriptor instead.
func (*Fan) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{6}
}

func (x *Fan) GetStatus() FanStatus {
	if x != nil {
		return x.Status
	}
	return FanStatus_FAN_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *Fan) GetMeasurements() *FanMeasurements {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type Fib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors  *FibSensors  `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Internal *FibInternal `protobuf:"bytes,2,opt,name=internal,proto3" json:"internal,omitempty"`
	Fans     []*Fan       `protobuf:"bytes,3,rep,name=fans,proto3" json:"fans,omitempty"` // always 9 fans
}

func (x *Fib) Reset() {
	*x = Fib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fib) ProtoMessage() {}

func (x *Fib) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fib.ProtoReflect.Descriptor instead.
func (*Fib) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{7}
}

func (x *Fib) GetSensors() *FibSensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Fib) GetInternal() *FibInternal {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *Fib) GetFans() []*Fan {
	if x != nil {
		return x.Fans
	}
	return nil
}

type StibSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage       float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`
	StringVoltage    float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"`
	StringCurrent    float32 `protobuf:"fixed32,3,opt,name=string_current,json=stringCurrent,proto3" json:"string_current,omitempty"`
	TemperatureSense float32 `protobuf:"fixed32,4,opt,name=temperature_sense,json=temperatureSense,proto3" json:"temperature_sense,omitempty"`
	DcdcState        float32 `protobuf:"fixed32,5,opt,name=dcdc_state,json=dcdcState,proto3" json:"dcdc_state,omitempty"`
	PcbTemp          float32 `protobuf:"fixed32,6,opt,name=pcb_temp,json=pcbTemp,proto3" json:"pcb_temp,omitempty"`
}

func (x *StibSensors) Reset() {
	*x = StibSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibSensors) ProtoMessage() {}

func (x *StibSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibSensors.ProtoReflect.Descriptor instead.
func (*StibSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{8}
}

func (x *StibSensors) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibSensors) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibSensors) GetStringCurrent() float32 {
	if x != nil {
		return x.StringCurrent
	}
	return 0
}

func (x *StibSensors) GetTemperatureSense() float32 {
	if x != nil {
		return x.TemperatureSense
	}
	return 0
}

func (x *StibSensors) GetDcdcState() float32 {
	if x != nil {
		return x.DcdcState
	}
	return 0
}

func (x *StibSensors) GetPcbTemp() float32 {
	if x != nil {
		return x.PcbTemp
	}
	return 0
}

type StibStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifetimeAh float32 `protobuf:"fixed32,1,opt,name=lifetime_ah,json=lifetimeAh,proto3" json:"lifetime_ah,omitempty"`
	LifetimeWh float32 `protobuf:"fixed32,2,opt,name=lifetime_wh,json=lifetimeWh,proto3" json:"lifetime_wh,omitempty"`
}

func (x *StibStatistics) Reset() {
	*x = StibStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibStatistics) ProtoMessage() {}

func (x *StibStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibStatistics.ProtoReflect.Descriptor instead.
func (*StibStatistics) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{9}
}

func (x *StibStatistics) GetLifetimeAh() float32 {
	if x != nil {
		return x.LifetimeAh
	}
	return 0
}

func (x *StibStatistics) GetLifetimeWh() float32 {
	if x != nil {
		return x.LifetimeWh
	}
	return 0
}

type Stib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors    *StibSensors    `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Statistics *StibStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Stib) Reset() {
	*x = Stib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stib) ProtoMessage() {}

func (x *Stib) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stib.ProtoReflect.Descriptor instead.
func (*Stib) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{10}
}

func (x *Stib) GetSensors() *StibSensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Stib) GetStatistics() *StibStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CellMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current             float32 `protobuf:"fixed32,1,opt,name=current,proto3" json:"current,omitempty"`
	Voltage             float32 `protobuf:"fixed32,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	ChargeAh            float32 `protobuf:"fixed32,3,opt,name=charge_ah,json=chargeAh,proto3" json:"charge_ah,omitempty"`
	EnergyWh            float32 `protobuf:"fixed32,4,opt,name=energy_wh,json=energyWh,proto3" json:"energy_wh,omitempty"`
	TemperatureEstimate float32 `protobuf:"fixed32,5,opt,name=temperature_estimate,json=temperatureEstimate,proto3" json:"temperature_estimate,omitempty"`
	PogoResistance      float32 `protobuf:"fixed32,6,opt,name=pogo_resistance,json=pogoResistance,proto3" json:"pogo_resistance,omitempty"`
}

func (x *CellMeasurement) Reset() {
	*x = CellMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMeasurement) ProtoMessage() {}

func (x *CellMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMeasurement.ProtoReflect.Descriptor instead.
func (*CellMeasurement) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{11}
}

func (x *CellMeasurement) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *CellMeasurement) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *CellMeasurement) GetChargeAh() float32 {
	if x != nil {
		return x.ChargeAh
	}
	return 0
}

func (x *CellMeasurement) GetEnergyWh() float32 {
	if x != nil {
		return x.EnergyWh
	}
	return 0
}

func (x *CellMeasurement) GetTemperatureEstimate() float32 {
	if x != nil {
		return x.TemperatureEstimate
	}
	return 0
}

func (x *CellMeasurement) GetPogoResistance() float32 {
	if x != nil {
		return x.PogoResistance
	}
	return 0
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellstatus      CellStatus       `protobuf:"varint,1,opt,name=cellstatus,proto3,enum=CellStatus" json:"cellstatus,omitempty"`
	Cellmeasurement *CellMeasurement `protobuf:"bytes,2,opt,name=cellmeasurement,proto3" json:"cellmeasurement,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{12}
}

func (x *Cell) GetCellstatus() CellStatus {
	if x != nil {
		return x.Cellstatus
	}
	return CellStatus_CELL_STATUS_NONE_UNSPECIFIED
}

func (x *Cell) GetCellmeasurement() *CellMeasurement {
	if x != nil {
		return x.Cellmeasurement
	}
	return nil
}

type FixtureOperational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   FixtureStatus   `protobuf:"varint,1,opt,name=status,proto3,enum=FixtureStatus" json:"status,omitempty"`
	Position FixturePosition `protobuf:"varint,2,opt,name=position,proto3,enum=FixturePosition" json:"position,omitempty"`
	Cells    []*Cell         `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *FixtureOperational) Reset() {
	*x = FixtureOperational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureOperational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureOperational) ProtoMessage() {}

func (x *FixtureOperational) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureOperational.ProtoReflect.Descriptor instead.
func (*FixtureOperational) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{13}
}

func (x *FixtureOperational) GetStatus() FixtureStatus {
	if x != nil {
		return x.Status
	}
	return FixtureStatus_FIXTURE_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *FixtureOperational) GetPosition() FixturePosition {
	if x != nil {
		return x.Position
	}
	return FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED
}

func (x *FixtureOperational) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type FixtureDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fxr   *Fxr    `protobuf:"bytes,1,opt,name=fxr,proto3" json:"fxr,omitempty"`
	Fib   *Fib    `protobuf:"bytes,2,opt,name=fib,proto3" json:"fib,omitempty"`
	Stibs []*Stib `protobuf:"bytes,3,rep,name=stibs,proto3" json:"stibs,omitempty"` // 4 stibs
}

func (x *FixtureDiagnostic) Reset() {
	*x = FixtureDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureDiagnostic) ProtoMessage() {}

func (x *FixtureDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureDiagnostic.ProtoReflect.Descriptor instead.
func (*FixtureDiagnostic) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{14}
}

func (x *FixtureDiagnostic) GetFxr() *Fxr {
	if x != nil {
		return x.Fxr
	}
	return nil
}

func (x *FixtureDiagnostic) GetFib() *Fib {
	if x != nil {
		return x.Fib
	}
	return nil
}

func (x *FixtureDiagnostic) GetStibs() []*Stib {
	if x != nil {
		return x.Stibs
	}
	return nil
}

type FixtureToTower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*FixtureToTower_Op
	//	*FixtureToTower_Diag
	Content         isFixtureToTower_Content `protobuf_oneof:"content"`
	Traybarcode     string                   `protobuf:"bytes,3,opt,name=traybarcode,proto3" json:"traybarcode,omitempty"`
	Fixtureposition string                   `protobuf:"bytes,4,opt,name=fixtureposition,proto3" json:"fixtureposition,omitempty"`
	Identifier      string                   `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *FixtureToTower) Reset() {
	*x = FixtureToTower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureToTower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureToTower) ProtoMessage() {}

func (x *FixtureToTower) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureToTower.ProtoReflect.Descriptor instead.
func (*FixtureToTower) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{15}
}

func (m *FixtureToTower) GetContent() isFixtureToTower_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *FixtureToTower) GetOp() *FixtureOperational {
	if x, ok := x.GetContent().(*FixtureToTower_Op); ok {
		return x.Op
	}
	return nil
}

func (x *FixtureToTower) GetDiag() *FixtureDiagnostic {
	if x, ok := x.GetContent().(*FixtureToTower_Diag); ok {
		return x.Diag
	}
	return nil
}

func (x *FixtureToTower) GetTraybarcode() string {
	if x != nil {
		return x.Traybarcode
	}
	return ""
}

func (x *FixtureToTower) GetFixtureposition() string {
	if x != nil {
		return x.Fixtureposition
	}
	return ""
}

func (x *FixtureToTower) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type isFixtureToTower_Content interface {
	isFixtureToTower_Content()
}

type FixtureToTower_Op struct {
	Op *FixtureOperational `protobuf:"bytes,1,opt,name=op,proto3,oneof"`
}

type FixtureToTower_Diag struct {
	Diag *FixtureDiagnostic `protobuf:"bytes,2,opt,name=diag,proto3,oneof"`
}

func (*FixtureToTower_Op) isFixtureToTower_Content() {}

func (*FixtureToTower_Diag) isFixtureToTower_Content() {}

type RecipeStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode          RecipeStep_FormMode `protobuf:"varint,1,opt,name=mode,proto3,enum=RecipeStep_FormMode" json:"mode,omitempty"`
	ChargeCurrent float32             `protobuf:"fixed32,2,opt,name=charge_current,json=chargeCurrent,proto3" json:"charge_current,omitempty"`
	MaxCurrent    float32             `protobuf:"fixed32,3,opt,name=max_current,json=maxCurrent,proto3" json:"max_current,omitempty"`
	CutOffVoltage float32             `protobuf:"fixed32,4,opt,name=cut_off_voltage,json=cutOffVoltage,proto3" json:"cut_off_voltage,omitempty"`
	CutOffCurrent float32             `protobuf:"fixed32,5,opt,name=cut_off_current,json=cutOffCurrent,proto3" json:"cut_off_current,omitempty"`
	CellDropOutV  float32             `protobuf:"fixed32,6,opt,name=cell_drop_out_v,json=cellDropOutV,proto3" json:"cell_drop_out_v,omitempty"`
	StepTimeout   float32             `protobuf:"fixed32,7,opt,name=step_timeout,json=stepTimeout,proto3" json:"step_timeout,omitempty"`
}

func (x *RecipeStep) Reset() {
	*x = RecipeStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStep) ProtoMessage() {}

func (x *RecipeStep) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStep.ProtoReflect.Descriptor instead.
func (*RecipeStep) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{16}
}

func (x *RecipeStep) GetMode() RecipeStep_FormMode {
	if x != nil {
		return x.Mode
	}
	return RecipeStep_FORM_MODE_UNKNOWN_UNSPECIFIED
}

func (x *RecipeStep) GetChargeCurrent() float32 {
	if x != nil {
		return x.ChargeCurrent
	}
	return 0
}

func (x *RecipeStep) GetMaxCurrent() float32 {
	if x != nil {
		return x.MaxCurrent
	}
	return 0
}

func (x *RecipeStep) GetCutOffVoltage() float32 {
	if x != nil {
		return x.CutOffVoltage
	}
	return 0
}

func (x *RecipeStep) GetCutOffCurrent() float32 {
	if x != nil {
		return x.CutOffCurrent
	}
	return 0
}

func (x *RecipeStep) GetCellDropOutV() float32 {
	if x != nil {
		return x.CellDropOutV
	}
	return 0
}

func (x *RecipeStep) GetStepTimeout() float32 {
	if x != nil {
		return x.StepTimeout
	}
	return 0
}

type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps       []*RecipeStep `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	CellMasks   []uint32      `protobuf:"varint,2,rep,packed,name=cell_masks,json=cellMasks,proto3" json:"cell_masks,omitempty"`
	Formrequest FormRequest   `protobuf:"varint,3,opt,name=formrequest,proto3,enum=FormRequest" json:"formrequest,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{17}
}

func (x *Recipe) GetSteps() []*RecipeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Recipe) GetCellMasks() []uint32 {
	if x != nil {
		return x.CellMasks
	}
	return nil
}

func (x *Recipe) GetFormrequest() FormRequest {
	if x != nil {
		return x.Formrequest
	}
	return FormRequest_FORM_REQUEST_UNKNOWN_UNSPECIFIED
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traybarcode     string `protobuf:"bytes,1,opt,name=traybarcode,proto3" json:"traybarcode,omitempty"`
	Fixtureposition string `protobuf:"bytes,2,opt,name=fixtureposition,proto3" json:"fixtureposition,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{18}
}

func (x *SystemInfo) GetTraybarcode() string {
	if x != nil {
		return x.Traybarcode
	}
	return ""
}

func (x *SystemInfo) GetFixtureposition() string {
	if x != nil {
		return x.Fixtureposition
	}
	return ""
}

type TowerToFixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipe  *Recipe     `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Sysinfo *SystemInfo `protobuf:"bytes,2,opt,name=sysinfo,proto3" json:"sysinfo,omitempty"`
}

func (x *TowerToFixture) Reset() {
	*x = TowerToFixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerToFixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerToFixture) ProtoMessage() {}

func (x *TowerToFixture) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerToFixture.ProtoReflect.Descriptor instead.
func (*TowerToFixture) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{19}
}

func (x *TowerToFixture) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *TowerToFixture) GetSysinfo() *SystemInfo {
	if x != nil {
		return x.Sysinfo
	}
	return nil
}

var File_tower_proto protoreflect.FileDescriptor

var file_tower_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x01,
	0x0a, 0x0a, 0x46, 0x78, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x76, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x32,
	0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x42, 0x75, 0x73, 0x32, 0x34, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x55, 0x70, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x77, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x77, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x22,
	0x94, 0x01, 0x0a, 0x0a, 0x46, 0x78, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x62, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x63,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x53, 0x0a, 0x03, 0x46, 0x78, 0x72, 0x12, 0x25, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x46, 0x78, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x78, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0a,
	0x46, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x69, 0x5f,
	0x62, 0x75, 0x73, 0x5f, 0x32, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x42,
	0x75, 0x73, 0x32, 0x34, 0x12, 0x18, 0x0a, 0x08, 0x76, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x32, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x42, 0x75, 0x73, 0x32, 0x34, 0x12, 0x18,
	0x0a, 0x08, 0x70, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x32, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x70, 0x42, 0x75, 0x73, 0x32, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x63, 0x62, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x63, 0x62, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x76, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x35, 0x76,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x76, 0x12,
	0x1c, 0x0a, 0x0a, 0x76, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76, 0x33, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x52, 0x61, 0x69, 0x6c, 0x33, 0x76, 0x33, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22,
	0xce, 0x03, 0x0a, 0x0b, 0x46, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x73, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x73,
	0x72, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x73,
	0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x70, 0x75,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x73, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70,
	0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x6b, 0x68, 0x7a, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x54, 0x69,
	0x6d, 0x65, 0x31, 0x6b, 0x68, 0x7a, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x30, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x30, 0x68, 0x7a, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x30, 0x6b, 0x68, 0x7a, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x54, 0x69,
	0x6d, 0x65, 0x31, 0x30, 0x6b, 0x68, 0x7a, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x31, 0x6b,
	0x68, 0x7a, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x31, 0x30, 0x68, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x31, 0x30, 0x68, 0x7a, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x76, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x76, 0x72, 0x61, 0x6d,
	0x22, 0x90, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x75, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x64,
	0x75, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x64, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x5f, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x46, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x61, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x03, 0x46, 0x69, 0x62, 0x12, 0x25, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46,
	0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x04,
	0x66, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46, 0x61, 0x6e,
	0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x69, 0x62, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x63, 0x64, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x63, 0x62, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x63, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x22, 0x52, 0x0a, 0x0e,
	0x53, 0x74, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x68,
	0x22, 0x5f, 0x0a, 0x04, 0x53, 0x74, 0x69, 0x62, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x69, 0x62,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x61, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x41, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x77, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x57, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x70, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x6f, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x60, 0x0a, 0x11, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x16, 0x0a, 0x03, 0x66, 0x78, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46,
	0x78, 0x72, 0x52, 0x03, 0x66, 0x78, 0x72, 0x12, 0x16, 0x0a, 0x03, 0x66, 0x69, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46, 0x69, 0x62, 0x52, 0x03, 0x66, 0x69, 0x62, 0x12,
	0x1b, 0x0a, 0x05, 0x73, 0x74, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x53, 0x74, 0x69, 0x62, 0x52, 0x05, 0x73, 0x74, 0x69, 0x62, 0x73, 0x22, 0xd8, 0x01, 0x0a,
	0x0e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x63, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x74, 0x4f, 0x66,
	0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x56, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x51, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x56, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x0e, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x73, 0x79, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x69, 0x6e, 0x66, 0x6f, 0x2a, 0x6e, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xb7, 0x01, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x2a,
	0xdb, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x58,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x58, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0xb4, 0x01,
	0x0a, 0x0f, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x58, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tower_proto_rawDescOnce sync.Once
	file_tower_proto_rawDescData = file_tower_proto_rawDesc
)

func file_tower_proto_rawDescGZIP() []byte {
	file_tower_proto_rawDescOnce.Do(func() {
		file_tower_proto_rawDescData = protoimpl.X.CompressGZIP(file_tower_proto_rawDescData)
	})
	return file_tower_proto_rawDescData
}

var file_tower_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_tower_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_tower_proto_goTypes = []interface{}{
	(FanStatus)(0),             // 0: FanStatus
	(CellStatus)(0),            // 1: CellStatus
	(FixtureStatus)(0),         // 2: FixtureStatus
	(FixturePosition)(0),       // 3: FixturePosition
	(FormRequest)(0),           // 4: FormRequest
	(RecipeStep_FormMode)(0),   // 5: RecipeStep.FormMode
	(*FxrSensors)(nil),         // 6: FxrSensors
	(*FxrOutputs)(nil),         // 7: FxrOutputs
	(*Fxr)(nil),                // 8: Fxr
	(*FibSensors)(nil),         // 9: FibSensors
	(*FibInternal)(nil),        // 10: FibInternal
	(*FanMeasurements)(nil),    // 11: FanMeasurements
	(*Fan)(nil),                // 12: Fan
	(*Fib)(nil),                // 13: Fib
	(*StibSensors)(nil),        // 14: StibSensors
	(*StibStatistics)(nil),     // 15: StibStatistics
	(*Stib)(nil),               // 16: Stib
	(*CellMeasurement)(nil),    // 17: CellMeasurement
	(*Cell)(nil),               // 18: Cell
	(*FixtureOperational)(nil), // 19: FixtureOperational
	(*FixtureDiagnostic)(nil),  // 20: FixtureDiagnostic
	(*FixtureToTower)(nil),     // 21: FixtureToTower
	(*RecipeStep)(nil),         // 22: RecipeStep
	(*Recipe)(nil),             // 23: Recipe
	(*SystemInfo)(nil),         // 24: SystemInfo
	(*TowerToFixture)(nil),     // 25: TowerToFixture
}
var file_tower_proto_depIdxs = []int32{
	6,  // 0: Fxr.sensors:type_name -> FxrSensors
	7,  // 1: Fxr.outputs:type_name -> FxrOutputs
	0,  // 2: Fan.status:type_name -> FanStatus
	11, // 3: Fan.measurements:type_name -> FanMeasurements
	9,  // 4: Fib.sensors:type_name -> FibSensors
	10, // 5: Fib.internal:type_name -> FibInternal
	12, // 6: Fib.fans:type_name -> Fan
	14, // 7: Stib.sensors:type_name -> StibSensors
	15, // 8: Stib.statistics:type_name -> StibStatistics
	1,  // 9: Cell.cellstatus:type_name -> CellStatus
	17, // 10: Cell.cellmeasurement:type_name -> CellMeasurement
	2,  // 11: FixtureOperational.status:type_name -> FixtureStatus
	3,  // 12: FixtureOperational.position:type_name -> FixturePosition
	18, // 13: FixtureOperational.cells:type_name -> Cell
	8,  // 14: FixtureDiagnostic.fxr:type_name -> Fxr
	13, // 15: FixtureDiagnostic.fib:type_name -> Fib
	16, // 16: FixtureDiagnostic.stibs:type_name -> Stib
	19, // 17: FixtureToTower.op:type_name -> FixtureOperational
	20, // 18: FixtureToTower.diag:type_name -> FixtureDiagnostic
	5,  // 19: RecipeStep.mode:type_name -> RecipeStep.FormMode
	22, // 20: Recipe.steps:type_name -> RecipeStep
	4,  // 21: Recipe.formrequest:type_name -> FormRequest
	23, // 22: TowerToFixture.recipe:type_name -> Recipe
	24, // 23: TowerToFixture.sysinfo:type_name -> SystemInfo
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_tower_proto_init() }
func file_tower_proto_init() {
	if File_tower_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tower_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fxr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanMeasurements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureOperational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureToTower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerToFixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tower_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*FixtureToTower_Op)(nil),
		(*FixtureToTower_Diag)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tower_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tower_proto_goTypes,
		DependencyIndexes: file_tower_proto_depIdxs,
		EnumInfos:         file_tower_proto_enumTypes,
		MessageInfos:      file_tower_proto_msgTypes,
	}.Build()
	File_tower_proto = out.File
	file_tower_proto_rawDesc = nil
	file_tower_proto_goTypes = nil
	file_tower_proto_depIdxs = nil
}
