// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recipe.proto

package asrs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Recipe describes the process the payload is following and is made up of a sequence of steps. Implicitly, two payloads
// following the same recipe and at the same step are expected to follow the same process (bar faults and non-conformances).
// (This suggests that any two recipes with he same name are identical, and that any step configuration changes should be
// associated with new step or recipe names.)
type Recipe struct {
	// The name of the recipe (e.g. in CM Formation, the name of the recipe might be BFFProfileMassProd1, BFFPreProd etc)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The step name within the recipe (e.g. in CM Formation this might be PreCharge, or C/D1, OVCACIR etc)
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	// The type of step disambiguates the form of content in step_value field if configuration for the step is provided.
	StepType string `protobuf:"bytes,4,opt,name=step_type,json=stepType,proto3" json:"step_type,omitempty"`
	// Opaque byte stream, JSON encoded, for step recipe if it is carried. The value is type-dependent -
	// type should be sufficient to set expectation of value. An example of a recipe which is carried by content
	// is the aging recipe. This field may or may not be populated.
	StepConfiguration    []byte   `protobuf:"bytes,5,opt,name=step_configuration,json=stepConfiguration,proto3" json:"step_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Recipe) Reset()         { *m = Recipe{} }
func (m *Recipe) String() string { return proto.CompactTextString(m) }
func (*Recipe) ProtoMessage()    {}
func (*Recipe) Descriptor() ([]byte, []int) {
	return fileDescriptor_952719e3f4c063a9, []int{0}
}

func (m *Recipe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Recipe.Unmarshal(m, b)
}
func (m *Recipe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Recipe.Marshal(b, m, deterministic)
}
func (m *Recipe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recipe.Merge(m, src)
}
func (m *Recipe) XXX_Size() int {
	return xxx_messageInfo_Recipe.Size(m)
}
func (m *Recipe) XXX_DiscardUnknown() {
	xxx_messageInfo_Recipe.DiscardUnknown(m)
}

var xxx_messageInfo_Recipe proto.InternalMessageInfo

func (m *Recipe) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recipe) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *Recipe) GetStepType() string {
	if m != nil {
		return m.StepType
	}
	return ""
}

func (m *Recipe) GetStepConfiguration() []byte {
	if m != nil {
		return m.StepConfiguration
	}
	return nil
}

func init() {
	proto.RegisterType((*Recipe)(nil), "recipe.Recipe")
}

func init() { proto.RegisterFile("recipe.proto", fileDescriptor_952719e3f4c063a9) }

var fileDescriptor_952719e3f4c063a9 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0x4d, 0xce,
	0x2c, 0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x6a, 0xb8, 0xd8,
	0x82, 0xc0, 0x2c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x30, 0x1b, 0x24, 0x56, 0x5c, 0x92, 0x5a, 0x20, 0xc1, 0x04, 0x11, 0x03, 0xb1, 0x85,
	0xa4, 0xb9, 0x38, 0x41, 0x74, 0x7c, 0x49, 0x65, 0x41, 0xaa, 0x04, 0x0b, 0x58, 0x82, 0x03, 0x24,
	0x10, 0x52, 0x59, 0x90, 0x2a, 0xa4, 0xcb, 0x25, 0x04, 0x96, 0x4c, 0xce, 0xcf, 0x4b, 0xcb, 0x4c,
	0x2f, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x55, 0x60, 0xd4, 0xe0, 0x09, 0x12, 0x04,
	0xc9, 0x38, 0x23, 0x4b, 0x38, 0xb1, 0x45, 0xb1, 0x24, 0x16, 0x17, 0x15, 0x27, 0xb1, 0x81, 0x1d,
	0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x69, 0x15, 0x13, 0xde, 0xa4, 0x00, 0x00, 0x00,
}
