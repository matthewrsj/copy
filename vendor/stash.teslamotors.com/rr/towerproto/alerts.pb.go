// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: alerts.proto

package tower

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StibAlert_AlertId int32

const (
	StibAlert_STIB_NONE                           StibAlert_AlertId = 0
	StibAlert_STIB_a001_SwAppBoot                 StibAlert_AlertId = 1
	StibAlert_STIB_a002_HalError                  StibAlert_AlertId = 2
	StibAlert_STIB_a003_WatchDog                  StibAlert_AlertId = 3
	StibAlert_STIB_a004_CpuOverRun                StibAlert_AlertId = 4
	StibAlert_STIB_a005_CANBusReset               StibAlert_AlertId = 5
	StibAlert_STIB_a006_STIBrx_MIA                StibAlert_AlertId = 6
	StibAlert_STIB_a007_TaskStackOverrun          StibAlert_AlertId = 7
	StibAlert_STIB_a008_unused                    StibAlert_AlertId = 8
	StibAlert_STIB_a009_unused                    StibAlert_AlertId = 9
	StibAlert_STIB_a010_EnumerationWriteFail      StibAlert_AlertId = 10
	StibAlert_STIB_a011_AllegroHwOC               StibAlert_AlertId = 11
	StibAlert_STIB_a012_ComparatorHwOC            StibAlert_AlertId = 12
	StibAlert_STIB_a013_SwOC                      StibAlert_AlertId = 13
	StibAlert_STIB_a014_BusUV                     StibAlert_AlertId = 14
	StibAlert_STIB_a015_BusOV                     StibAlert_AlertId = 15
	StibAlert_STIB_a016_StringOV                  StibAlert_AlertId = 16
	StibAlert_STIB_a017_StringUV                  StibAlert_AlertId = 17
	StibAlert_STIB_a018_SwitchTempTooHigh         StibAlert_AlertId = 18
	StibAlert_STIB_a019_ShuntTempTooHigh          StibAlert_AlertId = 19
	StibAlert_STIB_a020_VoltageMatchingTimeout    StibAlert_AlertId = 20
	StibAlert_STIB_a021_LossOfCurrentControl      StibAlert_AlertId = 21
	StibAlert_STIB_a022_SensorOffsetTooHigh       StibAlert_AlertId = 22
	StibAlert_STIB_a023_EnableLineLost            StibAlert_AlertId = 23
	StibAlert_STIB_a024_irefCorrectionIrrational  StibAlert_AlertId = 24
	StibAlert_STIB_a025_unused                    StibAlert_AlertId = 25
	StibAlert_STIB_a026_unused                    StibAlert_AlertId = 26
	StibAlert_STIB_a027_unused                    StibAlert_AlertId = 27
	StibAlert_STIB_a028_AppliedCurrentIsSaturated StibAlert_AlertId = 28
	StibAlert_STIB_a029_CellSafetyCheckFailed     StibAlert_AlertId = 29
	StibAlert_STIB_a030_CellQualityCheckFailed    StibAlert_AlertId = 30
	StibAlert_STIB_a031_CellOV                    StibAlert_AlertId = 31
	StibAlert_STIB_a032_CellUV                    StibAlert_AlertId = 32
	StibAlert_STIB_a033_CellDvDT                  StibAlert_AlertId = 33
	StibAlert_STIB_a034_PogoVIrrational           StibAlert_AlertId = 34
	StibAlert_STIB_a035_CibFaulted                StibAlert_AlertId = 35
	StibAlert_STIB_a036_CellTempTooHigh           StibAlert_AlertId = 36
	StibAlert_STIB_a037_FormationTimeout          StibAlert_AlertId = 37
	StibAlert_STIB_a038_FormationCheckFailed      StibAlert_AlertId = 38
	StibAlert_STIB_a039_unused                    StibAlert_AlertId = 39
	StibAlert_STIB_a040_unused                    StibAlert_AlertId = 40
	StibAlert_STIB_a041_CIBDataInvalid            StibAlert_AlertId = 41
	StibAlert_STIB_a043_CIBNotConnected           StibAlert_AlertId = 43
	StibAlert_STIB_a044_CIBCellSwitchWriteFail    StibAlert_AlertId = 44
	StibAlert_STIB_a045_CIB_NegVoltageProtection  StibAlert_AlertId = 45
)

// Enum value maps for StibAlert_AlertId.
var (
	StibAlert_AlertId_name = map[int32]string{
		0:  "STIB_NONE",
		1:  "STIB_a001_SwAppBoot",
		2:  "STIB_a002_HalError",
		3:  "STIB_a003_WatchDog",
		4:  "STIB_a004_CpuOverRun",
		5:  "STIB_a005_CANBusReset",
		6:  "STIB_a006_STIBrx_MIA",
		7:  "STIB_a007_TaskStackOverrun",
		8:  "STIB_a008_unused",
		9:  "STIB_a009_unused",
		10: "STIB_a010_EnumerationWriteFail",
		11: "STIB_a011_AllegroHwOC",
		12: "STIB_a012_ComparatorHwOC",
		13: "STIB_a013_SwOC",
		14: "STIB_a014_BusUV",
		15: "STIB_a015_BusOV",
		16: "STIB_a016_StringOV",
		17: "STIB_a017_StringUV",
		18: "STIB_a018_SwitchTempTooHigh",
		19: "STIB_a019_ShuntTempTooHigh",
		20: "STIB_a020_VoltageMatchingTimeout",
		21: "STIB_a021_LossOfCurrentControl",
		22: "STIB_a022_SensorOffsetTooHigh",
		23: "STIB_a023_EnableLineLost",
		24: "STIB_a024_irefCorrectionIrrational",
		25: "STIB_a025_unused",
		26: "STIB_a026_unused",
		27: "STIB_a027_unused",
		28: "STIB_a028_AppliedCurrentIsSaturated",
		29: "STIB_a029_CellSafetyCheckFailed",
		30: "STIB_a030_CellQualityCheckFailed",
		31: "STIB_a031_CellOV",
		32: "STIB_a032_CellUV",
		33: "STIB_a033_CellDvDT",
		34: "STIB_a034_PogoVIrrational",
		35: "STIB_a035_CibFaulted",
		36: "STIB_a036_CellTempTooHigh",
		37: "STIB_a037_FormationTimeout",
		38: "STIB_a038_FormationCheckFailed",
		39: "STIB_a039_unused",
		40: "STIB_a040_unused",
		41: "STIB_a041_CIBDataInvalid",
		43: "STIB_a043_CIBNotConnected",
		44: "STIB_a044_CIBCellSwitchWriteFail",
		45: "STIB_a045_CIB_NegVoltageProtection",
	}
	StibAlert_AlertId_value = map[string]int32{
		"STIB_NONE":                           0,
		"STIB_a001_SwAppBoot":                 1,
		"STIB_a002_HalError":                  2,
		"STIB_a003_WatchDog":                  3,
		"STIB_a004_CpuOverRun":                4,
		"STIB_a005_CANBusReset":               5,
		"STIB_a006_STIBrx_MIA":                6,
		"STIB_a007_TaskStackOverrun":          7,
		"STIB_a008_unused":                    8,
		"STIB_a009_unused":                    9,
		"STIB_a010_EnumerationWriteFail":      10,
		"STIB_a011_AllegroHwOC":               11,
		"STIB_a012_ComparatorHwOC":            12,
		"STIB_a013_SwOC":                      13,
		"STIB_a014_BusUV":                     14,
		"STIB_a015_BusOV":                     15,
		"STIB_a016_StringOV":                  16,
		"STIB_a017_StringUV":                  17,
		"STIB_a018_SwitchTempTooHigh":         18,
		"STIB_a019_ShuntTempTooHigh":          19,
		"STIB_a020_VoltageMatchingTimeout":    20,
		"STIB_a021_LossOfCurrentControl":      21,
		"STIB_a022_SensorOffsetTooHigh":       22,
		"STIB_a023_EnableLineLost":            23,
		"STIB_a024_irefCorrectionIrrational":  24,
		"STIB_a025_unused":                    25,
		"STIB_a026_unused":                    26,
		"STIB_a027_unused":                    27,
		"STIB_a028_AppliedCurrentIsSaturated": 28,
		"STIB_a029_CellSafetyCheckFailed":     29,
		"STIB_a030_CellQualityCheckFailed":    30,
		"STIB_a031_CellOV":                    31,
		"STIB_a032_CellUV":                    32,
		"STIB_a033_CellDvDT":                  33,
		"STIB_a034_PogoVIrrational":           34,
		"STIB_a035_CibFaulted":                35,
		"STIB_a036_CellTempTooHigh":           36,
		"STIB_a037_FormationTimeout":          37,
		"STIB_a038_FormationCheckFailed":      38,
		"STIB_a039_unused":                    39,
		"STIB_a040_unused":                    40,
		"STIB_a041_CIBDataInvalid":            41,
		"STIB_a043_CIBNotConnected":           43,
		"STIB_a044_CIBCellSwitchWriteFail":    44,
		"STIB_a045_CIB_NegVoltageProtection":  45,
	}
)

func (x StibAlert_AlertId) Enum() *StibAlert_AlertId {
	p := new(StibAlert_AlertId)
	*p = x
	return p
}

func (x StibAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[0].Descriptor()
}

func (StibAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[0]
}

func (x StibAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibAlert_AlertId.Descriptor instead.
func (StibAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 0}
}

type FibAlert_AlertId int32

const (
	FibAlert_FIB_NONE                 FibAlert_AlertId = 0
	FibAlert_FIB_a001_SwAppBoot       FibAlert_AlertId = 1
	FibAlert_FIB_a002_watchdogExpired FibAlert_AlertId = 2
	FibAlert_FIB_a003_internalFault   FibAlert_AlertId = 3
)

// Enum value maps for FibAlert_AlertId.
var (
	FibAlert_AlertId_name = map[int32]string{
		0: "FIB_NONE",
		1: "FIB_a001_SwAppBoot",
		2: "FIB_a002_watchdogExpired",
		3: "FIB_a003_internalFault",
	}
	FibAlert_AlertId_value = map[string]int32{
		"FIB_NONE":                 0,
		"FIB_a001_SwAppBoot":       1,
		"FIB_a002_watchdogExpired": 2,
		"FIB_a003_internalFault":   3,
	}
)

func (x FibAlert_AlertId) Enum() *FibAlert_AlertId {
	p := new(FibAlert_AlertId)
	*p = x
	return p
}

func (x FibAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FibAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[1].Descriptor()
}

func (FibAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[1]
}

func (x FibAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FibAlert_AlertId.Descriptor instead.
func (FibAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 0}
}

type FxrAlert_AlertId int32

const (
	FxrAlert_FXR_NONE                           FxrAlert_AlertId = 0
	FxrAlert_FXR_a001_SwAppBoot                 FxrAlert_AlertId = 1
	FxrAlert_FXR_a002_watchdogExpired           FxrAlert_AlertId = 2
	FxrAlert_FXR_a003_internalFault             FxrAlert_AlertId = 3
	FxrAlert_FXR_a004_STIB00_MIA                FxrAlert_AlertId = 4
	FxrAlert_FXR_a005_STIB01_MIA                FxrAlert_AlertId = 5
	FxrAlert_FXR_a006_STIB02_MIA                FxrAlert_AlertId = 6
	FxrAlert_FXR_a007_STIB03_MIA                FxrAlert_AlertId = 7
	FxrAlert_FXR_a008_FIB_MIA                   FxrAlert_AlertId = 8
	FxrAlert_FXR_a009_isoDiagCheckFail          FxrAlert_AlertId = 9
	FxrAlert_FXR_a010_isolationFault            FxrAlert_AlertId = 10
	FxrAlert_FXR_a011_isolationDegradationFault FxrAlert_AlertId = 11
	FxrAlert_FXR_a012_enumerationWriteFail      FxrAlert_AlertId = 12
	FxrAlert_FXR_a013_appGitHashMismatch        FxrAlert_AlertId = 13
	FxrAlert_FXR_a014_state_machine_fault       FxrAlert_AlertId = 14
	FxrAlert_FXR_a015_fixture_position_fault    FxrAlert_AlertId = 15
	FxrAlert_FXR_a016_stibs_faulted             FxrAlert_AlertId = 16
	FxrAlert_FXR_a017_tray_missing              FxrAlert_AlertId = 17
	FxrAlert_FXR_a018_stib_step_timeout         FxrAlert_AlertId = 18
	FxrAlert_FXR_a019_fixture_pos_sm_faulted    FxrAlert_AlertId = 19
	FxrAlert_FXR_a020_thermal_event_level_0     FxrAlert_AlertId = 20
	FxrAlert_FXR_a021_thermal_event_level_1     FxrAlert_AlertId = 21
)

// Enum value maps for FxrAlert_AlertId.
var (
	FxrAlert_AlertId_name = map[int32]string{
		0:  "FXR_NONE",
		1:  "FXR_a001_SwAppBoot",
		2:  "FXR_a002_watchdogExpired",
		3:  "FXR_a003_internalFault",
		4:  "FXR_a004_STIB00_MIA",
		5:  "FXR_a005_STIB01_MIA",
		6:  "FXR_a006_STIB02_MIA",
		7:  "FXR_a007_STIB03_MIA",
		8:  "FXR_a008_FIB_MIA",
		9:  "FXR_a009_isoDiagCheckFail",
		10: "FXR_a010_isolationFault",
		11: "FXR_a011_isolationDegradationFault",
		12: "FXR_a012_enumerationWriteFail",
		13: "FXR_a013_appGitHashMismatch",
		14: "FXR_a014_state_machine_fault",
		15: "FXR_a015_fixture_position_fault",
		16: "FXR_a016_stibs_faulted",
		17: "FXR_a017_tray_missing",
		18: "FXR_a018_stib_step_timeout",
		19: "FXR_a019_fixture_pos_sm_faulted",
		20: "FXR_a020_thermal_event_level_0",
		21: "FXR_a021_thermal_event_level_1",
	}
	FxrAlert_AlertId_value = map[string]int32{
		"FXR_NONE":                           0,
		"FXR_a001_SwAppBoot":                 1,
		"FXR_a002_watchdogExpired":           2,
		"FXR_a003_internalFault":             3,
		"FXR_a004_STIB00_MIA":                4,
		"FXR_a005_STIB01_MIA":                5,
		"FXR_a006_STIB02_MIA":                6,
		"FXR_a007_STIB03_MIA":                7,
		"FXR_a008_FIB_MIA":                   8,
		"FXR_a009_isoDiagCheckFail":          9,
		"FXR_a010_isolationFault":            10,
		"FXR_a011_isolationDegradationFault": 11,
		"FXR_a012_enumerationWriteFail":      12,
		"FXR_a013_appGitHashMismatch":        13,
		"FXR_a014_state_machine_fault":       14,
		"FXR_a015_fixture_position_fault":    15,
		"FXR_a016_stibs_faulted":             16,
		"FXR_a017_tray_missing":              17,
		"FXR_a018_stib_step_timeout":         18,
		"FXR_a019_fixture_pos_sm_faulted":    19,
		"FXR_a020_thermal_event_level_0":     20,
		"FXR_a021_thermal_event_level_1":     21,
	}
)

func (x FxrAlert_AlertId) Enum() *FxrAlert_AlertId {
	p := new(FxrAlert_AlertId)
	*p = x
	return p
}

func (x FxrAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FxrAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[2].Descriptor()
}

func (FxrAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[2]
}

func (x FxrAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FxrAlert_AlertId.Descriptor instead.
func (FxrAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 0}
}

type FxrAlertA019FixturePosSmFaultedFaultReason int32

const (
	FxrAlertA019FixturePosSmFaulted_not_open_in_open_st     FxrAlertA019FixturePosSmFaultedFaultReason = 0
	FxrAlertA019FixturePosSmFaulted_not_closed_in_closed_st FxrAlertA019FixturePosSmFaultedFaultReason = 1
	FxrAlertA019FixturePosSmFaulted_timeout_while_opening   FxrAlertA019FixturePosSmFaultedFaultReason = 2
	FxrAlertA019FixturePosSmFaulted_timeout_while_closing   FxrAlertA019FixturePosSmFaultedFaultReason = 3
)

// Enum value maps for FxrAlertA019FixturePosSmFaultedFaultReason.
var (
	FxrAlertA019FixturePosSmFaultedFaultReason_name = map[int32]string{
		0: "not_open_in_open_st",
		1: "not_closed_in_closed_st",
		2: "timeout_while_opening",
		3: "timeout_while_closing",
	}
	FxrAlertA019FixturePosSmFaultedFaultReason_value = map[string]int32{
		"not_open_in_open_st":     0,
		"not_closed_in_closed_st": 1,
		"timeout_while_opening":   2,
		"timeout_while_closing":   3,
	}
)

func (x FxrAlertA019FixturePosSmFaultedFaultReason) Enum() *FxrAlertA019FixturePosSmFaultedFaultReason {
	p := new(FxrAlertA019FixturePosSmFaultedFaultReason)
	*p = x
	return p
}

func (x FxrAlertA019FixturePosSmFaultedFaultReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FxrAlertA019FixturePosSmFaultedFaultReason) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[3].Descriptor()
}

func (FxrAlertA019FixturePosSmFaultedFaultReason) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[3]
}

func (x FxrAlertA019FixturePosSmFaultedFaultReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FxrAlertA019FixturePosSmFaultedFaultReason.Descriptor instead.
func (FxrAlertA019FixturePosSmFaultedFaultReason) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 17, 0}
}

type StibAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId   StibAlert_AlertId `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=StibAlert_AlertId" json:"alert_id,omitempty"`
	StibIndex uint32            `protobuf:"varint,2,opt,name=stib_index,json=stibIndex,proto3" json:"stib_index,omitempty"`
	// Types that are assignable to AlertData:
	//	*StibAlert_A004
	//	*StibAlert_A007
	//	*StibAlert_A010
	//	*StibAlert_A020
	//	*StibAlert_A024
	//	*StibAlert_A028
	//	*StibAlert_A029
	//	*StibAlert_A030
	//	*StibAlert_A031
	//	*StibAlert_A032
	//	*StibAlert_A034
	//	*StibAlert_A036
	//	*StibAlert_A037
	//	*StibAlert_A038
	//	*StibAlert_A041
	//	*StibAlert_A044
	//	*StibAlert_A045
	AlertData isStibAlert_AlertData `protobuf_oneof:"AlertData"`
}

func (x *StibAlert) Reset() {
	*x = StibAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlert) ProtoMessage() {}

func (x *StibAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlert.ProtoReflect.Descriptor instead.
func (*StibAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0}
}

func (x *StibAlert) GetAlertId() StibAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return StibAlert_STIB_NONE
}

func (x *StibAlert) GetStibIndex() uint32 {
	if x != nil {
		return x.StibIndex
	}
	return 0
}

func (m *StibAlert) GetAlertData() isStibAlert_AlertData {
	if m != nil {
		return m.AlertData
	}
	return nil
}

func (x *StibAlert) GetA004() *StibAlertA004_CpuOverRun {
	if x, ok := x.GetAlertData().(*StibAlert_A004); ok {
		return x.A004
	}
	return nil
}

func (x *StibAlert) GetA007() *StibAlertA007_TaskStackOverrun {
	if x, ok := x.GetAlertData().(*StibAlert_A007); ok {
		return x.A007
	}
	return nil
}

func (x *StibAlert) GetA010() *StibAlertA010_EnumerationWriteFail {
	if x, ok := x.GetAlertData().(*StibAlert_A010); ok {
		return x.A010
	}
	return nil
}

func (x *StibAlert) GetA020() *StibAlertA020_VoltageMatchingTimeout {
	if x, ok := x.GetAlertData().(*StibAlert_A020); ok {
		return x.A020
	}
	return nil
}

func (x *StibAlert) GetA024() *StibAlertA024IrefCorrectionIrrational {
	if x, ok := x.GetAlertData().(*StibAlert_A024); ok {
		return x.A024
	}
	return nil
}

func (x *StibAlert) GetA028() *StibAlertA028_AppliedCurrentIsSaturated {
	if x, ok := x.GetAlertData().(*StibAlert_A028); ok {
		return x.A028
	}
	return nil
}

func (x *StibAlert) GetA029() *StibAlertA029_CellSafetyCheckFailed {
	if x, ok := x.GetAlertData().(*StibAlert_A029); ok {
		return x.A029
	}
	return nil
}

func (x *StibAlert) GetA030() *StibAlertA030_CellQualityCheckFailed {
	if x, ok := x.GetAlertData().(*StibAlert_A030); ok {
		return x.A030
	}
	return nil
}

func (x *StibAlert) GetA031() *StibAlertA031_CellOV {
	if x, ok := x.GetAlertData().(*StibAlert_A031); ok {
		return x.A031
	}
	return nil
}

func (x *StibAlert) GetA032() *StibAlertA032_CellUV {
	if x, ok := x.GetAlertData().(*StibAlert_A032); ok {
		return x.A032
	}
	return nil
}

func (x *StibAlert) GetA034() *StibAlertA034_PogoVIrrational {
	if x, ok := x.GetAlertData().(*StibAlert_A034); ok {
		return x.A034
	}
	return nil
}

func (x *StibAlert) GetA036() *StibAlertA036_CellTempTooHigh {
	if x, ok := x.GetAlertData().(*StibAlert_A036); ok {
		return x.A036
	}
	return nil
}

func (x *StibAlert) GetA037() *StibAlertA037_FormationTimeout {
	if x, ok := x.GetAlertData().(*StibAlert_A037); ok {
		return x.A037
	}
	return nil
}

func (x *StibAlert) GetA038() *StibAlertA038_FormationCheckFailed {
	if x, ok := x.GetAlertData().(*StibAlert_A038); ok {
		return x.A038
	}
	return nil
}

func (x *StibAlert) GetA041() *StibAlertA041_CIBDataInvalid {
	if x, ok := x.GetAlertData().(*StibAlert_A041); ok {
		return x.A041
	}
	return nil
}

func (x *StibAlert) GetA044() *StibAlertA044_CIBCellSwitchWriteFail {
	if x, ok := x.GetAlertData().(*StibAlert_A044); ok {
		return x.A044
	}
	return nil
}

func (x *StibAlert) GetA045() *StibAlertA045_CIB_NegVoltageProtection {
	if x, ok := x.GetAlertData().(*StibAlert_A045); ok {
		return x.A045
	}
	return nil
}

type isStibAlert_AlertData interface {
	isStibAlert_AlertData()
}

type StibAlert_A004 struct {
	A004 *StibAlertA004_CpuOverRun `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type StibAlert_A007 struct {
	A007 *StibAlertA007_TaskStackOverrun `protobuf:"bytes,7,opt,name=a007,proto3,oneof"`
}

type StibAlert_A010 struct {
	A010 *StibAlertA010_EnumerationWriteFail `protobuf:"bytes,10,opt,name=a010,proto3,oneof"`
}

type StibAlert_A020 struct {
	A020 *StibAlertA020_VoltageMatchingTimeout `protobuf:"bytes,20,opt,name=a020,proto3,oneof"`
}

type StibAlert_A024 struct {
	A024 *StibAlertA024IrefCorrectionIrrational `protobuf:"bytes,24,opt,name=a024,proto3,oneof"`
}

type StibAlert_A028 struct {
	A028 *StibAlertA028_AppliedCurrentIsSaturated `protobuf:"bytes,28,opt,name=a028,proto3,oneof"`
}

type StibAlert_A029 struct {
	A029 *StibAlertA029_CellSafetyCheckFailed `protobuf:"bytes,29,opt,name=a029,proto3,oneof"`
}

type StibAlert_A030 struct {
	A030 *StibAlertA030_CellQualityCheckFailed `protobuf:"bytes,30,opt,name=a030,proto3,oneof"`
}

type StibAlert_A031 struct {
	A031 *StibAlertA031_CellOV `protobuf:"bytes,31,opt,name=a031,proto3,oneof"`
}

type StibAlert_A032 struct {
	A032 *StibAlertA032_CellUV `protobuf:"bytes,32,opt,name=a032,proto3,oneof"`
}

type StibAlert_A034 struct {
	A034 *StibAlertA034_PogoVIrrational `protobuf:"bytes,34,opt,name=a034,proto3,oneof"`
}

type StibAlert_A036 struct {
	A036 *StibAlertA036_CellTempTooHigh `protobuf:"bytes,36,opt,name=a036,proto3,oneof"`
}

type StibAlert_A037 struct {
	A037 *StibAlertA037_FormationTimeout `protobuf:"bytes,37,opt,name=a037,proto3,oneof"`
}

type StibAlert_A038 struct {
	A038 *StibAlertA038_FormationCheckFailed `protobuf:"bytes,38,opt,name=a038,proto3,oneof"`
}

type StibAlert_A041 struct {
	A041 *StibAlertA041_CIBDataInvalid `protobuf:"bytes,41,opt,name=a041,proto3,oneof"`
}

type StibAlert_A044 struct {
	A044 *StibAlertA044_CIBCellSwitchWriteFail `protobuf:"bytes,44,opt,name=a044,proto3,oneof"`
}

type StibAlert_A045 struct {
	A045 *StibAlertA045_CIB_NegVoltageProtection `protobuf:"bytes,45,opt,name=a045,proto3,oneof"`
}

func (*StibAlert_A004) isStibAlert_AlertData() {}

func (*StibAlert_A007) isStibAlert_AlertData() {}

func (*StibAlert_A010) isStibAlert_AlertData() {}

func (*StibAlert_A020) isStibAlert_AlertData() {}

func (*StibAlert_A024) isStibAlert_AlertData() {}

func (*StibAlert_A028) isStibAlert_AlertData() {}

func (*StibAlert_A029) isStibAlert_AlertData() {}

func (*StibAlert_A030) isStibAlert_AlertData() {}

func (*StibAlert_A031) isStibAlert_AlertData() {}

func (*StibAlert_A032) isStibAlert_AlertData() {}

func (*StibAlert_A034) isStibAlert_AlertData() {}

func (*StibAlert_A036) isStibAlert_AlertData() {}

func (*StibAlert_A037) isStibAlert_AlertData() {}

func (*StibAlert_A038) isStibAlert_AlertData() {}

func (*StibAlert_A041) isStibAlert_AlertData() {}

func (*StibAlert_A044) isStibAlert_AlertData() {}

func (*StibAlert_A045) isStibAlert_AlertData() {}

type FibAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId FibAlert_AlertId `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=FibAlert_AlertId" json:"alert_id,omitempty"`
	// Types that are assignable to AlertData:
	//	*FibAlert_A002
	//	*FibAlert_A003
	AlertData isFibAlert_AlertData `protobuf_oneof:"AlertData"`
}

func (x *FibAlert) Reset() {
	*x = FibAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlert) ProtoMessage() {}

func (x *FibAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlert.ProtoReflect.Descriptor instead.
func (*FibAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1}
}

func (x *FibAlert) GetAlertId() FibAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return FibAlert_FIB_NONE
}

func (m *FibAlert) GetAlertData() isFibAlert_AlertData {
	if m != nil {
		return m.AlertData
	}
	return nil
}

func (x *FibAlert) GetA002() *FibAlertA002WatchdogExpired {
	if x, ok := x.GetAlertData().(*FibAlert_A002); ok {
		return x.A002
	}
	return nil
}

func (x *FibAlert) GetA003() *FibAlertA003InternalFault {
	if x, ok := x.GetAlertData().(*FibAlert_A003); ok {
		return x.A003
	}
	return nil
}

type isFibAlert_AlertData interface {
	isFibAlert_AlertData()
}

type FibAlert_A002 struct {
	A002 *FibAlertA002WatchdogExpired `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type FibAlert_A003 struct {
	A003 *FibAlertA003InternalFault `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

func (*FibAlert_A002) isFibAlert_AlertData() {}

func (*FibAlert_A003) isFibAlert_AlertData() {}

type FxrAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId FxrAlert_AlertId `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=FxrAlert_AlertId" json:"alert_id,omitempty"`
	// Types that are assignable to AlertData:
	//	*FxrAlert_A002
	//	*FxrAlert_A003
	//	*FxrAlert_A004
	//	*FxrAlert_A005
	//	*FxrAlert_A006
	//	*FxrAlert_A007
	//	*FxrAlert_A008
	//	*FxrAlert_A009
	//	*FxrAlert_A010
	//	*FxrAlert_A011
	//	*FxrAlert_A012
	//	*FxrAlert_A013
	//	*FxrAlert_A014
	//	*FxrAlert_A015
	//	*FxrAlert_A016
	//	*FxrAlert_A017
	//	*FxrAlert_A018
	//	*FxrAlert_A019
	//	*FxrAlert_A020
	//	*FxrAlert_A021
	AlertData isFxrAlert_AlertData `protobuf_oneof:"AlertData"`
}

func (x *FxrAlert) Reset() {
	*x = FxrAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlert) ProtoMessage() {}

func (x *FxrAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlert.ProtoReflect.Descriptor instead.
func (*FxrAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2}
}

func (x *FxrAlert) GetAlertId() FxrAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return FxrAlert_FXR_NONE
}

func (m *FxrAlert) GetAlertData() isFxrAlert_AlertData {
	if m != nil {
		return m.AlertData
	}
	return nil
}

func (x *FxrAlert) GetA002() *FxrAlertA002WatchdogExpired {
	if x, ok := x.GetAlertData().(*FxrAlert_A002); ok {
		return x.A002
	}
	return nil
}

func (x *FxrAlert) GetA003() *FxrAlertA003InternalFault {
	if x, ok := x.GetAlertData().(*FxrAlert_A003); ok {
		return x.A003
	}
	return nil
}

func (x *FxrAlert) GetA004() *FxrAlertA004_STIB00_MIA {
	if x, ok := x.GetAlertData().(*FxrAlert_A004); ok {
		return x.A004
	}
	return nil
}

func (x *FxrAlert) GetA005() *FxrAlertA005_STIB01_MIA {
	if x, ok := x.GetAlertData().(*FxrAlert_A005); ok {
		return x.A005
	}
	return nil
}

func (x *FxrAlert) GetA006() *FxrAlertA006_STIB02_MIA {
	if x, ok := x.GetAlertData().(*FxrAlert_A006); ok {
		return x.A006
	}
	return nil
}

func (x *FxrAlert) GetA007() *FxrAlertA007_STIB03_MIA {
	if x, ok := x.GetAlertData().(*FxrAlert_A007); ok {
		return x.A007
	}
	return nil
}

func (x *FxrAlert) GetA008() *FxrAlertA008_FIB_MIA {
	if x, ok := x.GetAlertData().(*FxrAlert_A008); ok {
		return x.A008
	}
	return nil
}

func (x *FxrAlert) GetA009() *FxrAlertA009IsoDiagCheckFail {
	if x, ok := x.GetAlertData().(*FxrAlert_A009); ok {
		return x.A009
	}
	return nil
}

func (x *FxrAlert) GetA010() *FxrAlertA010IsolationFault {
	if x, ok := x.GetAlertData().(*FxrAlert_A010); ok {
		return x.A010
	}
	return nil
}

func (x *FxrAlert) GetA011() *FxrAlertA011IsolationDegradationFault {
	if x, ok := x.GetAlertData().(*FxrAlert_A011); ok {
		return x.A011
	}
	return nil
}

func (x *FxrAlert) GetA012() *FxrAlertA012EnumerationWriteFail {
	if x, ok := x.GetAlertData().(*FxrAlert_A012); ok {
		return x.A012
	}
	return nil
}

func (x *FxrAlert) GetA013() *FxrAlertA013AppGitHashMismatch {
	if x, ok := x.GetAlertData().(*FxrAlert_A013); ok {
		return x.A013
	}
	return nil
}

func (x *FxrAlert) GetA014() *FxrAlertA014StateMachineFault {
	if x, ok := x.GetAlertData().(*FxrAlert_A014); ok {
		return x.A014
	}
	return nil
}

func (x *FxrAlert) GetA015() *FxrAlertA015FixturePositionFault {
	if x, ok := x.GetAlertData().(*FxrAlert_A015); ok {
		return x.A015
	}
	return nil
}

func (x *FxrAlert) GetA016() *FxrAlertA016StibsFaulted {
	if x, ok := x.GetAlertData().(*FxrAlert_A016); ok {
		return x.A016
	}
	return nil
}

func (x *FxrAlert) GetA017() *FxrAlertA017TrayMissing {
	if x, ok := x.GetAlertData().(*FxrAlert_A017); ok {
		return x.A017
	}
	return nil
}

func (x *FxrAlert) GetA018() *FxrAlertA018StibStepTimeout {
	if x, ok := x.GetAlertData().(*FxrAlert_A018); ok {
		return x.A018
	}
	return nil
}

func (x *FxrAlert) GetA019() *FxrAlertA019FixturePosSmFaulted {
	if x, ok := x.GetAlertData().(*FxrAlert_A019); ok {
		return x.A019
	}
	return nil
}

func (x *FxrAlert) GetA020() *FxrAlertA020ThermalEventLevel_0 {
	if x, ok := x.GetAlertData().(*FxrAlert_A020); ok {
		return x.A020
	}
	return nil
}

func (x *FxrAlert) GetA021() *FxrAlertA021ThermalEventLevel_1 {
	if x, ok := x.GetAlertData().(*FxrAlert_A021); ok {
		return x.A021
	}
	return nil
}

type isFxrAlert_AlertData interface {
	isFxrAlert_AlertData()
}

type FxrAlert_A002 struct {
	A002 *FxrAlertA002WatchdogExpired `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type FxrAlert_A003 struct {
	A003 *FxrAlertA003InternalFault `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

type FxrAlert_A004 struct {
	A004 *FxrAlertA004_STIB00_MIA `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type FxrAlert_A005 struct {
	A005 *FxrAlertA005_STIB01_MIA `protobuf:"bytes,5,opt,name=a005,proto3,oneof"`
}

type FxrAlert_A006 struct {
	A006 *FxrAlertA006_STIB02_MIA `protobuf:"bytes,6,opt,name=a006,proto3,oneof"`
}

type FxrAlert_A007 struct {
	A007 *FxrAlertA007_STIB03_MIA `protobuf:"bytes,7,opt,name=a007,proto3,oneof"`
}

type FxrAlert_A008 struct {
	A008 *FxrAlertA008_FIB_MIA `protobuf:"bytes,8,opt,name=a008,proto3,oneof"`
}

type FxrAlert_A009 struct {
	A009 *FxrAlertA009IsoDiagCheckFail `protobuf:"bytes,9,opt,name=a009,proto3,oneof"`
}

type FxrAlert_A010 struct {
	A010 *FxrAlertA010IsolationFault `protobuf:"bytes,10,opt,name=a010,proto3,oneof"`
}

type FxrAlert_A011 struct {
	A011 *FxrAlertA011IsolationDegradationFault `protobuf:"bytes,11,opt,name=a011,proto3,oneof"`
}

type FxrAlert_A012 struct {
	A012 *FxrAlertA012EnumerationWriteFail `protobuf:"bytes,12,opt,name=a012,proto3,oneof"`
}

type FxrAlert_A013 struct {
	A013 *FxrAlertA013AppGitHashMismatch `protobuf:"bytes,13,opt,name=a013,proto3,oneof"`
}

type FxrAlert_A014 struct {
	A014 *FxrAlertA014StateMachineFault `protobuf:"bytes,14,opt,name=a014,proto3,oneof"`
}

type FxrAlert_A015 struct {
	A015 *FxrAlertA015FixturePositionFault `protobuf:"bytes,15,opt,name=a015,proto3,oneof"`
}

type FxrAlert_A016 struct {
	A016 *FxrAlertA016StibsFaulted `protobuf:"bytes,16,opt,name=a016,proto3,oneof"`
}

type FxrAlert_A017 struct {
	A017 *FxrAlertA017TrayMissing `protobuf:"bytes,17,opt,name=a017,proto3,oneof"`
}

type FxrAlert_A018 struct {
	A018 *FxrAlertA018StibStepTimeout `protobuf:"bytes,18,opt,name=a018,proto3,oneof"`
}

type FxrAlert_A019 struct {
	A019 *FxrAlertA019FixturePosSmFaulted `protobuf:"bytes,19,opt,name=a019,proto3,oneof"`
}

type FxrAlert_A020 struct {
	A020 *FxrAlertA020ThermalEventLevel_0 `protobuf:"bytes,20,opt,name=a020,proto3,oneof"`
}

type FxrAlert_A021 struct {
	A021 *FxrAlertA021ThermalEventLevel_1 `protobuf:"bytes,21,opt,name=a021,proto3,oneof"`
}

func (*FxrAlert_A002) isFxrAlert_AlertData() {}

func (*FxrAlert_A003) isFxrAlert_AlertData() {}

func (*FxrAlert_A004) isFxrAlert_AlertData() {}

func (*FxrAlert_A005) isFxrAlert_AlertData() {}

func (*FxrAlert_A006) isFxrAlert_AlertData() {}

func (*FxrAlert_A007) isFxrAlert_AlertData() {}

func (*FxrAlert_A008) isFxrAlert_AlertData() {}

func (*FxrAlert_A009) isFxrAlert_AlertData() {}

func (*FxrAlert_A010) isFxrAlert_AlertData() {}

func (*FxrAlert_A011) isFxrAlert_AlertData() {}

func (*FxrAlert_A012) isFxrAlert_AlertData() {}

func (*FxrAlert_A013) isFxrAlert_AlertData() {}

func (*FxrAlert_A014) isFxrAlert_AlertData() {}

func (*FxrAlert_A015) isFxrAlert_AlertData() {}

func (*FxrAlert_A016) isFxrAlert_AlertData() {}

func (*FxrAlert_A017) isFxrAlert_AlertData() {}

func (*FxrAlert_A018) isFxrAlert_AlertData() {}

func (*FxrAlert_A019) isFxrAlert_AlertData() {}

func (*FxrAlert_A020) isFxrAlert_AlertData() {}

func (*FxrAlert_A021) isFxrAlert_AlertData() {}

type AlertLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EcuAlert:
	//	*AlertLog_FxrAlert
	//	*AlertLog_FibAlert
	//	*AlertLog_StibAlert
	EcuAlert isAlertLog_EcuAlert `protobuf_oneof:"EcuAlert"`
}

func (x *AlertLog) Reset() {
	*x = AlertLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertLog) ProtoMessage() {}

func (x *AlertLog) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertLog.ProtoReflect.Descriptor instead.
func (*AlertLog) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3}
}

func (m *AlertLog) GetEcuAlert() isAlertLog_EcuAlert {
	if m != nil {
		return m.EcuAlert
	}
	return nil
}

func (x *AlertLog) GetFxrAlert() *FxrAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_FxrAlert); ok {
		return x.FxrAlert
	}
	return nil
}

func (x *AlertLog) GetFibAlert() *FibAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_FibAlert); ok {
		return x.FibAlert
	}
	return nil
}

func (x *AlertLog) GetStibAlert() *StibAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_StibAlert); ok {
		return x.StibAlert
	}
	return nil
}

type isAlertLog_EcuAlert interface {
	isAlertLog_EcuAlert()
}

type AlertLog_FxrAlert struct {
	FxrAlert *FxrAlert `protobuf:"bytes,1,opt,name=fxr_alert,json=fxrAlert,proto3,oneof"`
}

type AlertLog_FibAlert struct {
	FibAlert *FibAlert `protobuf:"bytes,2,opt,name=fib_alert,json=fibAlert,proto3,oneof"`
}

type AlertLog_StibAlert struct {
	StibAlert *StibAlert `protobuf:"bytes,3,opt,name=stib_alert,json=stibAlert,proto3,oneof"`
}

func (*AlertLog_FxrAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_FibAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_StibAlert) isAlertLog_EcuAlert() {}

type AlertMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertMatrices []uint32 `protobuf:"varint,1,rep,packed,name=alert_matrices,json=alertMatrices,proto3" json:"alert_matrices,omitempty"`
}

func (x *AlertMatrix) Reset() {
	*x = AlertMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertMatrix) ProtoMessage() {}

func (x *AlertMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertMatrix.ProtoReflect.Descriptor instead.
func (*AlertMatrix) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{4}
}

func (x *AlertMatrix) GetAlertMatrices() []uint32 {
	if x != nil {
		return x.AlertMatrices
	}
	return nil
}

type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AlertDetail:
	//	*Alerts_Log
	//	*Alerts_Matrix
	AlertDetail isAlerts_AlertDetail `protobuf_oneof:"AlertDetail"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5}
}

func (m *Alerts) GetAlertDetail() isAlerts_AlertDetail {
	if m != nil {
		return m.AlertDetail
	}
	return nil
}

func (x *Alerts) GetLog() *AlertLog {
	if x, ok := x.GetAlertDetail().(*Alerts_Log); ok {
		return x.Log
	}
	return nil
}

func (x *Alerts) GetMatrix() *AlertMatrix {
	if x, ok := x.GetAlertDetail().(*Alerts_Matrix); ok {
		return x.Matrix
	}
	return nil
}

type isAlerts_AlertDetail interface {
	isAlerts_AlertDetail()
}

type Alerts_Log struct {
	Log *AlertLog `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type Alerts_Matrix struct {
	Matrix *AlertMatrix `protobuf:"bytes,2,opt,name=matrix,proto3,oneof"`
}

func (*Alerts_Log) isAlerts_AlertDetail() {}

func (*Alerts_Matrix) isAlerts_AlertDetail() {}

type StibAlertA004_CpuOverRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ISRTimeMax     float32 `protobuf:"fixed32,1,opt,name=ISR_time_max,json=ISRTimeMax,proto3" json:"ISR_time_max,omitempty"`            // us
	F_1KHzTimeMax  float32 `protobuf:"fixed32,2,opt,name=f_1kHz_time_max,json=f1kHzTimeMax,proto3" json:"f_1kHz_time_max,omitempty"`    // us
	F_100HzTimeMax float32 `protobuf:"fixed32,3,opt,name=f_100Hz_time_max,json=f100HzTimeMax,proto3" json:"f_100Hz_time_max,omitempty"` // us
}

func (x *StibAlertA004_CpuOverRun) Reset() {
	*x = StibAlertA004_CpuOverRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA004_CpuOverRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA004_CpuOverRun) ProtoMessage() {}

func (x *StibAlertA004_CpuOverRun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA004_CpuOverRun.ProtoReflect.Descriptor instead.
func (*StibAlertA004_CpuOverRun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StibAlertA004_CpuOverRun) GetISRTimeMax() float32 {
	if x != nil {
		return x.ISRTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_1KHzTimeMax() float32 {
	if x != nil {
		return x.F_1KHzTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_100HzTimeMax() float32 {
	if x != nil {
		return x.F_100HzTimeMax
	}
	return 0
}

type StibAlertA007_TaskStackOverrun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task_Proto_Stack_Overrun       bool `protobuf:"varint,1,opt,name=Task_Proto_Stack_Overrun,json=TaskProtoStackOverrun,proto3" json:"Task_Proto_Stack_Overrun,omitempty"`
	Task_Default1KHz_Stack_Overrun bool `protobuf:"varint,2,opt,name=Task_Default1kHz_Stack_Overrun,json=TaskDefault1kHzStackOverrun,proto3" json:"Task_Default1kHz_Stack_Overrun,omitempty"`
	Task_1Hz_Stack_Overrun         bool `protobuf:"varint,3,opt,name=Task_1Hz_Stack_Overrun,json=Task1HzStackOverrun,proto3" json:"Task_1Hz_Stack_Overrun,omitempty"`
	Task_10Ms_Stack_Overrun        bool `protobuf:"varint,4,opt,name=Task_10ms_Stack_Overrun,json=Task10msStackOverrun,proto3" json:"Task_10ms_Stack_Overrun,omitempty"`
	Task_CANtx_Stack_Overrun       bool `protobuf:"varint,5,opt,name=Task_CANtx_Stack_Overrun,json=TaskCANtxStackOverrun,proto3" json:"Task_CANtx_Stack_Overrun,omitempty"`
	Task_OSIdle_Stack_Overrun      bool `protobuf:"varint,6,opt,name=Task_OSIdle_Stack_Overrun,json=TaskOSIdleStackOverrun,proto3" json:"Task_OSIdle_Stack_Overrun,omitempty"`
	Task_OSTimer_Stack_Overrun     bool `protobuf:"varint,7,opt,name=Task_OSTimer_Stack_Overrun,json=TaskOSTimerStackOverrun,proto3" json:"Task_OSTimer_Stack_Overrun,omitempty"`
}

func (x *StibAlertA007_TaskStackOverrun) Reset() {
	*x = StibAlertA007_TaskStackOverrun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA007_TaskStackOverrun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA007_TaskStackOverrun) ProtoMessage() {}

func (x *StibAlertA007_TaskStackOverrun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA007_TaskStackOverrun.ProtoReflect.Descriptor instead.
func (*StibAlertA007_TaskStackOverrun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 1}
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_Proto_Stack_Overrun() bool {
	if x != nil {
		return x.Task_Proto_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_Default1KHz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_Default1KHz_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_1Hz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_1Hz_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_10Ms_Stack_Overrun() bool {
	if x != nil {
		return x.Task_10Ms_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_CANtx_Stack_Overrun() bool {
	if x != nil {
		return x.Task_CANtx_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_OSIdle_Stack_Overrun() bool {
	if x != nil {
		return x.Task_OSIdle_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_OSTimer_Stack_Overrun() bool {
	if x != nil {
		return x.Task_OSTimer_Stack_Overrun
	}
	return false
}

type StibAlertA010_EnumerationWriteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StibAlertA010_EnumerationWriteFail) Reset() {
	*x = StibAlertA010_EnumerationWriteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA010_EnumerationWriteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA010_EnumerationWriteFail) ProtoMessage() {}

func (x *StibAlertA010_EnumerationWriteFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA010_EnumerationWriteFail.ProtoReflect.Descriptor instead.
func (*StibAlertA010_EnumerationWriteFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 2}
}

type StibAlertA020_VoltageMatchingTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringVoltage float32 `protobuf:"fixed32,1,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	VoltageTarget float32 `protobuf:"fixed32,2,opt,name=voltage_target,json=voltageTarget,proto3" json:"voltage_target,omitempty"` // V
	CellStateReq  uint32  `protobuf:"varint,3,opt,name=cell_state_req,json=cellStateReq,proto3" json:"cell_state_req,omitempty"`
}

func (x *StibAlertA020_VoltageMatchingTimeout) Reset() {
	*x = StibAlertA020_VoltageMatchingTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA020_VoltageMatchingTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA020_VoltageMatchingTimeout) ProtoMessage() {}

func (x *StibAlertA020_VoltageMatchingTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA020_VoltageMatchingTimeout.ProtoReflect.Descriptor instead.
func (*StibAlertA020_VoltageMatchingTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 3}
}

func (x *StibAlertA020_VoltageMatchingTimeout) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA020_VoltageMatchingTimeout) GetVoltageTarget() float32 {
	if x != nil {
		return x.VoltageTarget
	}
	return 0
}

func (x *StibAlertA020_VoltageMatchingTimeout) GetCellStateReq() uint32 {
	if x != nil {
		return x.CellStateReq
	}
	return 0
}

type StibAlertA024IrefCorrectionIrrational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CibIout  float32 `protobuf:"fixed32,1,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`    // A
	ConvIout float32 `protobuf:"fixed32,2,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"` // A
	Iphase_1 float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`    // A
	Iphase_2 float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`    // A
}

func (x *StibAlertA024IrefCorrectionIrrational) Reset() {
	*x = StibAlertA024IrefCorrectionIrrational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA024IrefCorrectionIrrational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA024IrefCorrectionIrrational) ProtoMessage() {}

func (x *StibAlertA024IrefCorrectionIrrational) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA024IrefCorrectionIrrational.ProtoReflect.Descriptor instead.
func (*StibAlertA024IrefCorrectionIrrational) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 4}
}

func (x *StibAlertA024IrefCorrectionIrrational) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

func (x *StibAlertA024IrefCorrectionIrrational) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

func (x *StibAlertA024IrefCorrectionIrrational) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA024IrefCorrectionIrrational) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

type StibAlertA028_AppliedCurrentIsSaturated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppliedCurrentIsSaturated bool `protobuf:"varint,1,opt,name=AppliedCurrentIsSaturated,proto3" json:"AppliedCurrentIsSaturated,omitempty"`
}

func (x *StibAlertA028_AppliedCurrentIsSaturated) Reset() {
	*x = StibAlertA028_AppliedCurrentIsSaturated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA028_AppliedCurrentIsSaturated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA028_AppliedCurrentIsSaturated) ProtoMessage() {}

func (x *StibAlertA028_AppliedCurrentIsSaturated) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA028_AppliedCurrentIsSaturated.ProtoReflect.Descriptor instead.
func (*StibAlertA028_AppliedCurrentIsSaturated) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 5}
}

func (x *StibAlertA028_AppliedCurrentIsSaturated) GetAppliedCurrentIsSaturated() bool {
	if x != nil {
		return x.AppliedCurrentIsSaturated
	}
	return false
}

type StibAlertA029_CellSafetyCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
	CibIout     float32 `protobuf:"fixed32,3,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`             // A
}

func (x *StibAlertA029_CellSafetyCheckFailed) Reset() {
	*x = StibAlertA029_CellSafetyCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA029_CellSafetyCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA029_CellSafetyCheckFailed) ProtoMessage() {}

func (x *StibAlertA029_CellSafetyCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA029_CellSafetyCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA029_CellSafetyCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 6}
}

func (x *StibAlertA029_CellSafetyCheckFailed) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA029_CellSafetyCheckFailed) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA029_CellSafetyCheckFailed) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

type StibAlertA030_CellQualityCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
	CibIout     float32 `protobuf:"fixed32,3,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`             // A
}

func (x *StibAlertA030_CellQualityCheckFailed) Reset() {
	*x = StibAlertA030_CellQualityCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA030_CellQualityCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA030_CellQualityCheckFailed) ProtoMessage() {}

func (x *StibAlertA030_CellQualityCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA030_CellQualityCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA030_CellQualityCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 7}
}

func (x *StibAlertA030_CellQualityCheckFailed) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA030_CellQualityCheckFailed) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA030_CellQualityCheckFailed) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

type StibAlertA031_CellOV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
}

func (x *StibAlertA031_CellOV) Reset() {
	*x = StibAlertA031_CellOV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA031_CellOV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA031_CellOV) ProtoMessage() {}

func (x *StibAlertA031_CellOV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA031_CellOV.ProtoReflect.Descriptor instead.
func (*StibAlertA031_CellOV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 8}
}

func (x *StibAlertA031_CellOV) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA031_CellOV) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

type StibAlertA032_CellUV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
}

func (x *StibAlertA032_CellUV) Reset() {
	*x = StibAlertA032_CellUV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA032_CellUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA032_CellUV) ProtoMessage() {}

func (x *StibAlertA032_CellUV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA032_CellUV.ProtoReflect.Descriptor instead.
func (*StibAlertA032_CellUV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 9}
}

func (x *StibAlertA032_CellUV) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA032_CellUV) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

type StibAlertA034_PogoVIrrational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
	PogoVoltage float32 `protobuf:"fixed32,3,opt,name=pogo_voltage,json=pogoVoltage,proto3" json:"pogo_voltage,omitempty"` // V
	CibIout     float32 `protobuf:"fixed32,4,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`             // A
	PogoR       float32 `protobuf:"fixed32,5,opt,name=pogo_r,json=pogoR,proto3" json:"pogo_r,omitempty"`                   // Ohm
}

func (x *StibAlertA034_PogoVIrrational) Reset() {
	*x = StibAlertA034_PogoVIrrational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA034_PogoVIrrational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA034_PogoVIrrational) ProtoMessage() {}

func (x *StibAlertA034_PogoVIrrational) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA034_PogoVIrrational.ProtoReflect.Descriptor instead.
func (*StibAlertA034_PogoVIrrational) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 10}
}

func (x *StibAlertA034_PogoVIrrational) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetPogoVoltage() float32 {
	if x != nil {
		return x.PogoVoltage
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetPogoR() float32 {
	if x != nil {
		return x.PogoR
	}
	return 0
}

type StibAlertA045_CIB_NegVoltageProtection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIndex   uint32  `protobuf:"varint,1,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
	NodeVoltage float32 `protobuf:"fixed32,2,opt,name=node_voltage,json=nodeVoltage,proto3" json:"node_voltage,omitempty"` // V
	PogoVoltage float32 `protobuf:"fixed32,3,opt,name=pogo_voltage,json=pogoVoltage,proto3" json:"pogo_voltage,omitempty"` // V
	Current     float32 `protobuf:"fixed32,4,opt,name=current,proto3" json:"current,omitempty"`                            // A
	Switches    uint32  `protobuf:"varint,5,opt,name=switches,proto3" json:"switches,omitempty"`
}

func (x *StibAlertA045_CIB_NegVoltageProtection) Reset() {
	*x = StibAlertA045_CIB_NegVoltageProtection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA045_CIB_NegVoltageProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA045_CIB_NegVoltageProtection) ProtoMessage() {}

func (x *StibAlertA045_CIB_NegVoltageProtection) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA045_CIB_NegVoltageProtection.ProtoReflect.Descriptor instead.
func (*StibAlertA045_CIB_NegVoltageProtection) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 11}
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetNodeIndex() uint32 {
	if x != nil {
		return x.NodeIndex
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetNodeVoltage() float32 {
	if x != nil {
		return x.NodeVoltage
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetPogoVoltage() float32 {
	if x != nil {
		return x.PogoVoltage
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetSwitches() uint32 {
	if x != nil {
		return x.Switches
	}
	return 0
}

type StibAlertA036_CellTempTooHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermistorIndex uint32  `protobuf:"varint,1,opt,name=thermistor_index,json=thermistorIndex,proto3" json:"thermistor_index,omitempty"`
	Thermistor_T    float32 `protobuf:"fixed32,2,opt,name=thermistor_T,json=thermistorT,proto3" json:"thermistor_T,omitempty"` // degC
}

func (x *StibAlertA036_CellTempTooHigh) Reset() {
	*x = StibAlertA036_CellTempTooHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA036_CellTempTooHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA036_CellTempTooHigh) ProtoMessage() {}

func (x *StibAlertA036_CellTempTooHigh) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA036_CellTempTooHigh.ProtoReflect.Descriptor instead.
func (*StibAlertA036_CellTempTooHigh) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 12}
}

func (x *StibAlertA036_CellTempTooHigh) GetThermistorIndex() uint32 {
	if x != nil {
		return x.ThermistorIndex
	}
	return 0
}

func (x *StibAlertA036_CellTempTooHigh) GetThermistor_T() float32 {
	if x != nil {
		return x.Thermistor_T
	}
	return 0
}

type StibAlertA041_CIBDataInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	REFONoff              bool    `protobuf:"varint,1,opt,name=REFONoff,proto3" json:"REFONoff,omitempty"`
	CelldataAdcDelayed    bool    `protobuf:"varint,2,opt,name=celldata_adc_delayed,json=celldataAdcDelayed,proto3" json:"celldata_adc_delayed,omitempty"`
	AuxAdcDelayed         bool    `protobuf:"varint,3,opt,name=aux_adc_delayed,json=auxAdcDelayed,proto3" json:"aux_adc_delayed,omitempty"`
	CelldataPecInvalid    bool    `protobuf:"varint,4,opt,name=celldata_pec_invalid,json=celldataPecInvalid,proto3" json:"celldata_pec_invalid,omitempty"`
	AuxDataPecInvalid     bool    `protobuf:"varint,5,opt,name=aux_data_pec_invalid,json=auxDataPecInvalid,proto3" json:"aux_data_pec_invalid,omitempty"`
	CommandCounterInvalid bool    `protobuf:"varint,6,opt,name=command_counter_invalid,json=commandCounterInvalid,proto3" json:"command_counter_invalid,omitempty"`
	ReadDmaFailed         bool    `protobuf:"varint,7,opt,name=read_dma_failed,json=readDmaFailed,proto3" json:"read_dma_failed,omitempty"`
	Vref2Invalid          bool    `protobuf:"varint,8,opt,name=vref2_invalid,json=vref2Invalid,proto3" json:"vref2_invalid,omitempty"`
	Vref2                 float32 `protobuf:"fixed32,9,opt,name=vref2,proto3" json:"vref2,omitempty"` // V
	IrefInvalid           bool    `protobuf:"varint,10,opt,name=Iref_invalid,json=IrefInvalid,proto3" json:"Iref_invalid,omitempty"`
	Iref                  float32 `protobuf:"fixed32,11,opt,name=Iref,proto3" json:"Iref,omitempty"` // V
	TdieInvalid           bool    `protobuf:"varint,12,opt,name=tdie_invalid,json=tdieInvalid,proto3" json:"tdie_invalid,omitempty"`
	Tdie                  float32 `protobuf:"fixed32,13,opt,name=tdie,proto3" json:"tdie,omitempty"` // V
	VaInvalid             bool    `protobuf:"varint,14,opt,name=va_invalid,json=vaInvalid,proto3" json:"va_invalid,omitempty"`
	Va                    float32 `protobuf:"fixed32,15,opt,name=va,proto3" json:"va,omitempty"` // V
	VdInvalid             bool    `protobuf:"varint,16,opt,name=vd_invalid,json=vdInvalid,proto3" json:"vd_invalid,omitempty"`
	Vd                    float32 `protobuf:"fixed32,17,opt,name=vd,proto3" json:"vd,omitempty"` // V
}

func (x *StibAlertA041_CIBDataInvalid) Reset() {
	*x = StibAlertA041_CIBDataInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA041_CIBDataInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA041_CIBDataInvalid) ProtoMessage() {}

func (x *StibAlertA041_CIBDataInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA041_CIBDataInvalid.ProtoReflect.Descriptor instead.
func (*StibAlertA041_CIBDataInvalid) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 13}
}

func (x *StibAlertA041_CIBDataInvalid) GetREFONoff() bool {
	if x != nil {
		return x.REFONoff
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetCelldataAdcDelayed() bool {
	if x != nil {
		return x.CelldataAdcDelayed
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetAuxAdcDelayed() bool {
	if x != nil {
		return x.AuxAdcDelayed
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetCelldataPecInvalid() bool {
	if x != nil {
		return x.CelldataPecInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetAuxDataPecInvalid() bool {
	if x != nil {
		return x.AuxDataPecInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetCommandCounterInvalid() bool {
	if x != nil {
		return x.CommandCounterInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetReadDmaFailed() bool {
	if x != nil {
		return x.ReadDmaFailed
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVref2Invalid() bool {
	if x != nil {
		return x.Vref2Invalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVref2() float32 {
	if x != nil {
		return x.Vref2
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetIrefInvalid() bool {
	if x != nil {
		return x.IrefInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetIref() float32 {
	if x != nil {
		return x.Iref
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetTdieInvalid() bool {
	if x != nil {
		return x.TdieInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetTdie() float32 {
	if x != nil {
		return x.Tdie
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetVaInvalid() bool {
	if x != nil {
		return x.VaInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVa() float32 {
	if x != nil {
		return x.Va
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetVdInvalid() bool {
	if x != nil {
		return x.VdInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVd() float32 {
	if x != nil {
		return x.Vd
	}
	return 0
}

type StibAlertA044_CIBCellSwitchWriteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellSwitchData uint32 `protobuf:"varint,1,opt,name=cell_switch_data,json=cellSwitchData,proto3" json:"cell_switch_data,omitempty"`
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) Reset() {
	*x = StibAlertA044_CIBCellSwitchWriteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA044_CIBCellSwitchWriteFail) ProtoMessage() {}

func (x *StibAlertA044_CIBCellSwitchWriteFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA044_CIBCellSwitchWriteFail.ProtoReflect.Descriptor instead.
func (*StibAlertA044_CIBCellSwitchWriteFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 14}
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) GetCellSwitchData() uint32 {
	if x != nil {
		return x.CellSwitchData
	}
	return 0
}

type StibAlertA037_FormationTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormState uint32 `protobuf:"varint,1,opt,name=form_state,json=formState,proto3" json:"form_state,omitempty"`
	StepTimeS uint32 `protobuf:"varint,2,opt,name=step_time_s,json=stepTimeS,proto3" json:"step_time_s,omitempty"` // s
}

func (x *StibAlertA037_FormationTimeout) Reset() {
	*x = StibAlertA037_FormationTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA037_FormationTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA037_FormationTimeout) ProtoMessage() {}

func (x *StibAlertA037_FormationTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA037_FormationTimeout.ProtoReflect.Descriptor instead.
func (*StibAlertA037_FormationTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 15}
}

func (x *StibAlertA037_FormationTimeout) GetFormState() uint32 {
	if x != nil {
		return x.FormState
	}
	return 0
}

func (x *StibAlertA037_FormationTimeout) GetStepTimeS() uint32 {
	if x != nil {
		return x.StepTimeS
	}
	return 0
}

type StibAlertA038_FormationCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormState   uint32 `protobuf:"varint,1,opt,name=form_state,json=formState,proto3" json:"form_state,omitempty"`
	AlertReason uint32 `protobuf:"varint,2,opt,name=alert_reason,json=alertReason,proto3" json:"alert_reason,omitempty"`
}

func (x *StibAlertA038_FormationCheckFailed) Reset() {
	*x = StibAlertA038_FormationCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA038_FormationCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA038_FormationCheckFailed) ProtoMessage() {}

func (x *StibAlertA038_FormationCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA038_FormationCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA038_FormationCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 16}
}

func (x *StibAlertA038_FormationCheckFailed) GetFormState() uint32 {
	if x != nil {
		return x.FormState
	}
	return 0
}

func (x *StibAlertA038_FormationCheckFailed) GetAlertReason() uint32 {
	if x != nil {
		return x.AlertReason
	}
	return 0
}

type FibAlertA002WatchdogExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId float32 `protobuf:"fixed32,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // us
	AppCRC float32 `protobuf:"fixed32,2,opt,name=AppCRC,proto3" json:"AppCRC,omitempty"` // us
}

func (x *FibAlertA002WatchdogExpired) Reset() {
	*x = FibAlertA002WatchdogExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA002WatchdogExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA002WatchdogExpired) ProtoMessage() {}

func (x *FibAlertA002WatchdogExpired) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA002WatchdogExpired.ProtoReflect.Descriptor instead.
func (*FibAlertA002WatchdogExpired) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FibAlertA002WatchdogExpired) GetTaskId() float32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FibAlertA002WatchdogExpired) GetAppCRC() float32 {
	if x != nil {
		return x.AppCRC
	}
	return 0
}

type FibAlertA003InternalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FibAlertA003InternalFault) Reset() {
	*x = FibAlertA003InternalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA003InternalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA003InternalFault) ProtoMessage() {}

func (x *FibAlertA003InternalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA003InternalFault.ProtoReflect.Descriptor instead.
func (*FibAlertA003InternalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 1}
}

type FxrAlertA002WatchdogExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId float32 `protobuf:"fixed32,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // us
	AppCRC float32 `protobuf:"fixed32,2,opt,name=AppCRC,proto3" json:"AppCRC,omitempty"` // us
}

func (x *FxrAlertA002WatchdogExpired) Reset() {
	*x = FxrAlertA002WatchdogExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA002WatchdogExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA002WatchdogExpired) ProtoMessage() {}

func (x *FxrAlertA002WatchdogExpired) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA002WatchdogExpired.ProtoReflect.Descriptor instead.
func (*FxrAlertA002WatchdogExpired) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FxrAlertA002WatchdogExpired) GetTaskId() float32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FxrAlertA002WatchdogExpired) GetAppCRC() float32 {
	if x != nil {
		return x.AppCRC
	}
	return 0
}

type FxrAlertA003InternalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA003InternalFault) Reset() {
	*x = FxrAlertA003InternalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA003InternalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA003InternalFault) ProtoMessage() {}

func (x *FxrAlertA003InternalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA003InternalFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA003InternalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 1}
}

type FxrAlertA004_STIB00_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA004_STIB00_MIA) Reset() {
	*x = FxrAlertA004_STIB00_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA004_STIB00_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA004_STIB00_MIA) ProtoMessage() {}

func (x *FxrAlertA004_STIB00_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA004_STIB00_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA004_STIB00_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 2}
}

type FxrAlertA005_STIB01_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA005_STIB01_MIA) Reset() {
	*x = FxrAlertA005_STIB01_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA005_STIB01_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA005_STIB01_MIA) ProtoMessage() {}

func (x *FxrAlertA005_STIB01_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA005_STIB01_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA005_STIB01_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 3}
}

type FxrAlertA006_STIB02_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA006_STIB02_MIA) Reset() {
	*x = FxrAlertA006_STIB02_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA006_STIB02_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA006_STIB02_MIA) ProtoMessage() {}

func (x *FxrAlertA006_STIB02_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA006_STIB02_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA006_STIB02_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 4}
}

type FxrAlertA007_STIB03_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA007_STIB03_MIA) Reset() {
	*x = FxrAlertA007_STIB03_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA007_STIB03_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA007_STIB03_MIA) ProtoMessage() {}

func (x *FxrAlertA007_STIB03_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA007_STIB03_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA007_STIB03_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 5}
}

type FxrAlertA008_FIB_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA008_FIB_MIA) Reset() {
	*x = FxrAlertA008_FIB_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA008_FIB_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA008_FIB_MIA) ProtoMessage() {}

func (x *FxrAlertA008_FIB_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA008_FIB_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA008_FIB_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 6}
}

type FxrAlertA009IsoDiagCheckFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChassisToVBusShorted bool `protobuf:"varint,1,opt,name=chassisToVBusShorted,proto3" json:"chassisToVBusShorted,omitempty"`
	ChassisToGndShorted  bool `protobuf:"varint,2,opt,name=chassisToGndShorted,proto3" json:"chassisToGndShorted,omitempty"`
	ChassisNotConnected  bool `protobuf:"varint,3,opt,name=chassisNotConnected,proto3" json:"chassisNotConnected,omitempty"`
	BusOutOfSpec         bool `protobuf:"varint,4,opt,name=busOutOfSpec,proto3" json:"busOutOfSpec,omitempty"`
}

func (x *FxrAlertA009IsoDiagCheckFail) Reset() {
	*x = FxrAlertA009IsoDiagCheckFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA009IsoDiagCheckFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA009IsoDiagCheckFail) ProtoMessage() {}

func (x *FxrAlertA009IsoDiagCheckFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA009IsoDiagCheckFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA009IsoDiagCheckFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 7}
}

func (x *FxrAlertA009IsoDiagCheckFail) GetChassisToVBusShorted() bool {
	if x != nil {
		return x.ChassisToVBusShorted
	}
	return false
}

func (x *FxrAlertA009IsoDiagCheckFail) GetChassisToGndShorted() bool {
	if x != nil {
		return x.ChassisToGndShorted
	}
	return false
}

func (x *FxrAlertA009IsoDiagCheckFail) GetChassisNotConnected() bool {
	if x != nil {
		return x.ChassisNotConnected
	}
	return false
}

func (x *FxrAlertA009IsoDiagCheckFail) GetBusOutOfSpec() bool {
	if x != nil {
		return x.BusOutOfSpec
	}
	return false
}

type FxrAlertA010IsolationFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoResistanceHigh float32 `protobuf:"fixed32,1,opt,name=isoResistanceHigh,proto3" json:"isoResistanceHigh,omitempty"`
	IsoResistanceLow  float32 `protobuf:"fixed32,2,opt,name=isoResistanceLow,proto3" json:"isoResistanceLow,omitempty"`
}

func (x *FxrAlertA010IsolationFault) Reset() {
	*x = FxrAlertA010IsolationFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA010IsolationFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA010IsolationFault) ProtoMessage() {}

func (x *FxrAlertA010IsolationFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA010IsolationFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA010IsolationFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 8}
}

func (x *FxrAlertA010IsolationFault) GetIsoResistanceHigh() float32 {
	if x != nil {
		return x.IsoResistanceHigh
	}
	return 0
}

func (x *FxrAlertA010IsolationFault) GetIsoResistanceLow() float32 {
	if x != nil {
		return x.IsoResistanceLow
	}
	return 0
}

type FxrAlertA011IsolationDegradationFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoResistanceHigh float32 `protobuf:"fixed32,1,opt,name=isoResistanceHigh,proto3" json:"isoResistanceHigh,omitempty"`
	IsoResistanceLow  float32 `protobuf:"fixed32,2,opt,name=isoResistanceLow,proto3" json:"isoResistanceLow,omitempty"`
}

func (x *FxrAlertA011IsolationDegradationFault) Reset() {
	*x = FxrAlertA011IsolationDegradationFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA011IsolationDegradationFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA011IsolationDegradationFault) ProtoMessage() {}

func (x *FxrAlertA011IsolationDegradationFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA011IsolationDegradationFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA011IsolationDegradationFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 9}
}

func (x *FxrAlertA011IsolationDegradationFault) GetIsoResistanceHigh() float32 {
	if x != nil {
		return x.IsoResistanceHigh
	}
	return 0
}

func (x *FxrAlertA011IsolationDegradationFault) GetIsoResistanceLow() float32 {
	if x != nil {
		return x.IsoResistanceLow
	}
	return 0
}

type FxrAlertA012EnumerationWriteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA012EnumerationWriteFail) Reset() {
	*x = FxrAlertA012EnumerationWriteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA012EnumerationWriteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA012EnumerationWriteFail) ProtoMessage() {}

func (x *FxrAlertA012EnumerationWriteFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA012EnumerationWriteFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA012EnumerationWriteFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 10}
}

type FxrAlertA013AppGitHashMismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FibAppGitHashMismatch    bool `protobuf:"varint,1,opt,name=fibAppGitHashMismatch,proto3" json:"fibAppGitHashMismatch,omitempty"`
	Stib00AppGitHashMismatch bool `protobuf:"varint,2,opt,name=stib00AppGitHashMismatch,proto3" json:"stib00AppGitHashMismatch,omitempty"`
	Stib01AppGitHashMismatch bool `protobuf:"varint,3,opt,name=stib01AppGitHashMismatch,proto3" json:"stib01AppGitHashMismatch,omitempty"`
	Stib02AppGitHashMismatch bool `protobuf:"varint,4,opt,name=stib02AppGitHashMismatch,proto3" json:"stib02AppGitHashMismatch,omitempty"`
	Stib03AppGitHashMismatch bool `protobuf:"varint,5,opt,name=stib03AppGitHashMismatch,proto3" json:"stib03AppGitHashMismatch,omitempty"`
}

func (x *FxrAlertA013AppGitHashMismatch) Reset() {
	*x = FxrAlertA013AppGitHashMismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA013AppGitHashMismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA013AppGitHashMismatch) ProtoMessage() {}

func (x *FxrAlertA013AppGitHashMismatch) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA013AppGitHashMismatch.ProtoReflect.Descriptor instead.
func (*FxrAlertA013AppGitHashMismatch) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 11}
}

func (x *FxrAlertA013AppGitHashMismatch) GetFibAppGitHashMismatch() bool {
	if x != nil {
		return x.FibAppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib00AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib00AppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib01AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib01AppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib02AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib02AppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib03AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib03AppGitHashMismatch
	}
	return false
}

type FxrAlertA014StateMachineFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateMachineState float32 `protobuf:"fixed32,1,opt,name=state_machine_state,json=stateMachineState,proto3" json:"state_machine_state,omitempty"`
}

func (x *FxrAlertA014StateMachineFault) Reset() {
	*x = FxrAlertA014StateMachineFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA014StateMachineFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA014StateMachineFault) ProtoMessage() {}

func (x *FxrAlertA014StateMachineFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA014StateMachineFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA014StateMachineFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 12}
}

func (x *FxrAlertA014StateMachineFault) GetStateMachineState() float32 {
	if x != nil {
		return x.StateMachineState
	}
	return 0
}

type FxrAlertA015FixturePositionFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixturePosition   float32 `protobuf:"fixed32,1,opt,name=fixture_position,json=fixturePosition,proto3" json:"fixture_position,omitempty"`
	StateMachineState float32 `protobuf:"fixed32,2,opt,name=state_machine_state,json=stateMachineState,proto3" json:"state_machine_state,omitempty"`
	FixtureState      float32 `protobuf:"fixed32,3,opt,name=fixture_state,json=fixtureState,proto3" json:"fixture_state,omitempty"`
}

func (x *FxrAlertA015FixturePositionFault) Reset() {
	*x = FxrAlertA015FixturePositionFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA015FixturePositionFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA015FixturePositionFault) ProtoMessage() {}

func (x *FxrAlertA015FixturePositionFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA015FixturePositionFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA015FixturePositionFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 13}
}

func (x *FxrAlertA015FixturePositionFault) GetFixturePosition() float32 {
	if x != nil {
		return x.FixturePosition
	}
	return 0
}

func (x *FxrAlertA015FixturePositionFault) GetStateMachineState() float32 {
	if x != nil {
		return x.StateMachineState
	}
	return 0
}

func (x *FxrAlertA015FixturePositionFault) GetFixtureState() float32 {
	if x != nil {
		return x.FixtureState
	}
	return 0
}

type FxrAlertA016StibsFaulted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA016StibsFaulted) Reset() {
	*x = FxrAlertA016StibsFaulted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA016StibsFaulted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA016StibsFaulted) ProtoMessage() {}

func (x *FxrAlertA016StibsFaulted) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA016StibsFaulted.ProtoReflect.Descriptor instead.
func (*FxrAlertA016StibsFaulted) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 14}
}

type FxrAlertA017TrayMissing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateMachineState float32 `protobuf:"fixed32,1,opt,name=state_machine_state,json=stateMachineState,proto3" json:"state_machine_state,omitempty"`
}

func (x *FxrAlertA017TrayMissing) Reset() {
	*x = FxrAlertA017TrayMissing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA017TrayMissing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA017TrayMissing) ProtoMessage() {}

func (x *FxrAlertA017TrayMissing) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA017TrayMissing.ProtoReflect.Descriptor instead.
func (*FxrAlertA017TrayMissing) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 15}
}

func (x *FxrAlertA017TrayMissing) GetStateMachineState() float32 {
	if x != nil {
		return x.StateMachineState
	}
	return 0
}

type FxrAlertA018StibStepTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA018StibStepTimeout) Reset() {
	*x = FxrAlertA018StibStepTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA018StibStepTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA018StibStepTimeout) ProtoMessage() {}

func (x *FxrAlertA018StibStepTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA018StibStepTimeout.ProtoReflect.Descriptor instead.
func (*FxrAlertA018StibStepTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 16}
}

type FxrAlertA019FixturePosSmFaulted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmState            float32                                    `protobuf:"fixed32,1,opt,name=sm_state,json=smState,proto3" json:"sm_state,omitempty"`
	FixturePosition    float32                                    `protobuf:"fixed32,2,opt,name=fixture_position,json=fixturePosition,proto3" json:"fixture_position,omitempty"`
	FixtureFaultReason FxrAlertA019FixturePosSmFaultedFaultReason `protobuf:"varint,3,opt,name=fixture_fault_reason,json=fixtureFaultReason,proto3,enum=FxrAlertA019FixturePosSmFaultedFaultReason" json:"fixture_fault_reason,omitempty"`
}

func (x *FxrAlertA019FixturePosSmFaulted) Reset() {
	*x = FxrAlertA019FixturePosSmFaulted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA019FixturePosSmFaulted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA019FixturePosSmFaulted) ProtoMessage() {}

func (x *FxrAlertA019FixturePosSmFaulted) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA019FixturePosSmFaulted.ProtoReflect.Descriptor instead.
func (*FxrAlertA019FixturePosSmFaulted) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 17}
}

func (x *FxrAlertA019FixturePosSmFaulted) GetSmState() float32 {
	if x != nil {
		return x.SmState
	}
	return 0
}

func (x *FxrAlertA019FixturePosSmFaulted) GetFixturePosition() float32 {
	if x != nil {
		return x.FixturePosition
	}
	return 0
}

func (x *FxrAlertA019FixturePosSmFaulted) GetFixtureFaultReason() FxrAlertA019FixturePosSmFaultedFaultReason {
	if x != nil {
		return x.FixtureFaultReason
	}
	return FxrAlertA019FixturePosSmFaulted_not_open_in_open_st
}

type FxrAlertA020ThermalEventLevel_0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold float32 `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *FxrAlertA020ThermalEventLevel_0) Reset() {
	*x = FxrAlertA020ThermalEventLevel_0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA020ThermalEventLevel_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA020ThermalEventLevel_0) ProtoMessage() {}

func (x *FxrAlertA020ThermalEventLevel_0) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA020ThermalEventLevel_0.ProtoReflect.Descriptor instead.
func (*FxrAlertA020ThermalEventLevel_0) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 18}
}

func (x *FxrAlertA020ThermalEventLevel_0) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type FxrAlertA021ThermalEventLevel_1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold float32 `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *FxrAlertA021ThermalEventLevel_1) Reset() {
	*x = FxrAlertA021ThermalEventLevel_1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA021ThermalEventLevel_1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA021ThermalEventLevel_1) ProtoMessage() {}

func (x *FxrAlertA021ThermalEventLevel_1) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA021ThermalEventLevel_1.ProtoReflect.Descriptor instead.
func (*FxrAlertA021ThermalEventLevel_1) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 19}
}

func (x *FxrAlertA021ThermalEventLevel_1) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

var File_alerts_proto protoreflect.FileDescriptor

var file_alerts_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3,
	0x27, 0x0a, 0x09, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x08,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x69, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x30,
	0x30, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x36, 0x0a, 0x04,
	0x61, 0x30, 0x30, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x74, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x30, 0x37, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x31, 0x30, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x30,
	0x12, 0x3c, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x30, 0x5f,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x30, 0x12, 0x3e,
	0x0a, 0x04, 0x61, 0x30, 0x32, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53,
	0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x34, 0x5f, 0x69, 0x72,
	0x65, 0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x34, 0x12, 0x3f,
	0x0a, 0x04, 0x61, 0x30, 0x32, 0x38, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53,
	0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x38, 0x5f, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x38, 0x12,
	0x3b, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x39, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x39, 0x5f, 0x43,
	0x65, 0x6c, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x39, 0x12, 0x3c, 0x0a, 0x04,
	0x61, 0x30, 0x33, 0x30, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x74, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x30, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x30,
	0x33, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x56,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x31, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x32,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x56, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x34, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x50, 0x6f, 0x67, 0x6f, 0x56, 0x49, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x34, 0x12, 0x35, 0x0a,
	0x04, 0x61, 0x30, 0x33, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x74,
	0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x33, 0x36, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x37, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x33, 0x37, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x37, 0x12, 0x3a, 0x0a, 0x04,
	0x61, 0x30, 0x33, 0x38, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x38, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x31,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x31, 0x5f, 0x43, 0x49, 0x42, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x31, 0x12, 0x3c,
	0x0a, 0x04, 0x61, 0x30, 0x34, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53,
	0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x34, 0x5f, 0x43, 0x49,
	0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x34, 0x12, 0x3e, 0x0a, 0x04,
	0x61, 0x30, 0x34, 0x35, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x74, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x35, 0x5f, 0x43, 0x49, 0x42, 0x5f,
	0x4e, 0x65, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x35, 0x1a, 0x83, 0x01, 0x0a,
	0x0f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x49, 0x53, 0x52, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x49, 0x53, 0x52, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x66, 0x5f, 0x31, 0x6b, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x31, 0x6b,
	0x48, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x5f, 0x31,
	0x30, 0x30, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x78, 0x1a, 0xb2, 0x03, 0x0a, 0x15, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x18,
	0x54, 0x61, 0x73, 0x6b, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x31, 0x6b, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x31, 0x6b, 0x48, 0x7a, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x54, 0x61,
	0x73, 0x6b, 0x5f, 0x31, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x54, 0x61, 0x73, 0x6b,
	0x31, 0x48, 0x7a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12,
	0x35, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x31, 0x30, 0x6d, 0x73, 0x5f, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x31, 0x30, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x43,
	0x41, 0x4e, 0x74, 0x78, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x41,
	0x4e, 0x74, 0x78, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x4f, 0x53, 0x49, 0x64, 0x6c, 0x65, 0x5f, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x53, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x54, 0x61,
	0x73, 0x6b, 0x5f, 0x4f, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x1a, 0x1b, 0x0a, 0x19, 0x61, 0x30, 0x31, 0x30, 0x5f,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x1a, 0x91, 0x01, 0x0a, 0x1b, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x8d, 0x01, 0x0a, 0x1d, 0x61, 0x30, 0x32,
	0x34, 0x5f, 0x69, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69,
	0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x69,
	0x62, 0x49, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x6f,
	0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x1a, 0x5e, 0x0a, 0x1e, 0x61, 0x30, 0x32, 0x38,
	0x5f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x73, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x79, 0x0a, 0x1a, 0x61, 0x30, 0x32, 0x39,
	0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x62, 0x5f,
	0x69, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x69, 0x62, 0x49,
	0x6f, 0x75, 0x74, 0x1a, 0x7a, 0x0a, 0x1b, 0x61, 0x30, 0x33, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x69, 0x62, 0x49, 0x6f, 0x75, 0x74, 0x1a,
	0x4f, 0x0a, 0x0b, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x56, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x1a, 0x4f, 0x0a, 0x0b, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x56, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x1a, 0xad, 0x01, 0x0a, 0x14, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x50, 0x6f, 0x67, 0x6f, 0x56,
	0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x67, 0x6f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x69, 0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x63, 0x69, 0x62, 0x49, 0x6f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f,
	0x67, 0x6f, 0x5f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x67, 0x6f,
	0x52, 0x1a, 0xba, 0x01, 0x0a, 0x1d, 0x61, 0x30, 0x34, 0x35, 0x5f, 0x43, 0x49, 0x42, 0x5f, 0x4e,
	0x65, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x67,
	0x6f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x64,
	0x0a, 0x14, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x54,
	0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x5f,
	0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x54, 0x1a, 0xd5, 0x04, 0x0a, 0x13, 0x61, 0x30, 0x34, 0x31, 0x5f, 0x43, 0x49,
	0x42, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x45, 0x46, 0x4f, 0x4e, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x52, 0x45, 0x46, 0x4f, 0x4e, 0x6f, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x6c, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x64, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75,
	0x78, 0x5f, 0x61, 0x64, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x78, 0x41, 0x64, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x65, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x50, 0x65, 0x63, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x63, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x6d, 0x61, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x44, 0x6d, 0x61, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x72, 0x65, 0x66, 0x32, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x72,
	0x65, 0x66, 0x32, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x72,
	0x65, 0x66, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x72, 0x65, 0x66, 0x32,
	0x12, 0x21, 0x0a, 0x0c, 0x49, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x72, 0x65, 0x66, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x49, 0x72, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x64, 0x69, 0x65, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74,
	0x64, 0x69, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x64,
	0x69, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x64, 0x69, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x76, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x76, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x64, 0x1a, 0x47, 0x0a, 0x1b,
	0x61, 0x30, 0x34, 0x34, 0x5f, 0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x56, 0x0a, 0x15, 0x61, 0x30, 0x33, 0x37, 0x5f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x1a, 0x5d, 0x0a,
	0x19, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x88, 0x0a, 0x0a,
	0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x48, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x67, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x43, 0x70,
	0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x43, 0x41, 0x4e, 0x42, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x72, 0x78, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x06, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x39, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x30, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0a, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x41, 0x6c, 0x6c,
	0x65, 0x67, 0x72, 0x6f, 0x48, 0x77, 0x4f, 0x43, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x32, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x77, 0x4f, 0x43, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x31, 0x33, 0x5f, 0x53, 0x77, 0x4f, 0x43, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x42, 0x75, 0x73, 0x55, 0x56, 0x10,
	0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x35, 0x5f, 0x42,
	0x75, 0x73, 0x4f, 0x56, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x31, 0x36, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x56, 0x10, 0x10, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x56, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x31, 0x38, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f,
	0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x31, 0x39, 0x5f, 0x53, 0x68, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f,
	0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x32, 0x30, 0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x14, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x31, 0x5f, 0x4c, 0x6f, 0x73, 0x73, 0x4f,
	0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10,
	0x15, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x32, 0x5f, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x48, 0x69,
	0x67, 0x68, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32,
	0x33, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x73, 0x74,
	0x10, 0x17, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x34, 0x5f,
	0x69, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x35, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x19,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x36, 0x5f, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x32, 0x37, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x38, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x32, 0x39, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x1e,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65,
	0x6c, 0x6c, 0x4f, 0x56, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x33, 0x32, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x56, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x33, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x76,
	0x44, 0x54, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33,
	0x34, 0x5f, 0x50, 0x6f, 0x67, 0x6f, 0x56, 0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x35,
	0x5f, 0x43, 0x69, 0x62, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x23, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x37, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x26,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x39, 0x5f, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x34, 0x30, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x28, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x31, 0x5f, 0x43, 0x49, 0x42, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x29, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x33, 0x5f, 0x43, 0x49, 0x42, 0x4e, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x34, 0x34, 0x5f, 0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x2c, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x35, 0x5f, 0x43, 0x49, 0x42,
	0x5f, 0x4e, 0x65, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2d, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x30, 0x32, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x1a, 0x46, 0x0a, 0x14, 0x61, 0x30, 0x30,
	0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70,
	0x43, 0x52, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x70, 0x70, 0x43, 0x52,
	0x43, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x42, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41,
	0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xa2, 0x1c, 0x0a, 0x08, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x08,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x30,
	0x30, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x32,
	0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x30, 0x33, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x34, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30,
	0x30, 0x34, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x30, 0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x35, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x30, 0x35, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x31, 0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x30, 0x35, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x36, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x32, 0x5f, 0x4d, 0x49, 0x41, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x36, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x37, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x33, 0x5f, 0x4d, 0x49, 0x41,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x37, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x38,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x46, 0x49, 0x42, 0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x30, 0x38, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x39, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x30, 0x39, 0x5f, 0x69, 0x73, 0x6f, 0x44, 0x69, 0x61, 0x67, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x39, 0x12, 0x33, 0x0a,
	0x04, 0x61, 0x30, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x78,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x30, 0x5f, 0x69, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x31, 0x30, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x31,
	0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x31, 0x31, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x32,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x32, 0x12, 0x37, 0x0a,
	0x04, 0x61, 0x30, 0x31, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x78,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x33, 0x5f, 0x61, 0x70, 0x70, 0x47,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x31, 0x33, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x34, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x34,
	0x12, 0x3b, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x35, 0x5f, 0x66,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x35, 0x12, 0x32, 0x0a,
	0x04, 0x61, 0x30, 0x31, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x78,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x69, 0x62,
	0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31,
	0x36, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x37, 0x5f,
	0x74, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x31, 0x37, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x38, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30,
	0x31, 0x38, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x38, 0x12, 0x3b, 0x0a, 0x04,
	0x61, 0x30, 0x31, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x78, 0x72,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x39, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x32,
	0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x30, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x32, 0x30, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x31, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x32, 0x31, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32,
	0x31, 0x1a, 0x46, 0x0a, 0x14, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x30,
	0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x1a,
	0x11, 0x0a, 0x0f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x30, 0x5f, 0x4d,
	0x49, 0x41, 0x1a, 0x11, 0x0a, 0x0f, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30,
	0x31, 0x5f, 0x4d, 0x49, 0x41, 0x1a, 0x11, 0x0a, 0x0f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54,
	0x49, 0x42, 0x30, 0x32, 0x5f, 0x4d, 0x49, 0x41, 0x1a, 0x11, 0x0a, 0x0f, 0x61, 0x30, 0x30, 0x37,
	0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x33, 0x5f, 0x4d, 0x49, 0x41, 0x1a, 0x0e, 0x0a, 0x0c, 0x61,
	0x30, 0x30, 0x38, 0x5f, 0x46, 0x49, 0x42, 0x5f, 0x4d, 0x49, 0x41, 0x1a, 0xd3, 0x01, 0x0a, 0x15,
	0x61, 0x30, 0x30, 0x39, 0x5f, 0x69, 0x73, 0x6f, 0x44, 0x69, 0x61, 0x67, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x54, 0x6f, 0x56, 0x42, 0x75, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x56, 0x42,
	0x75, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x47, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54,
	0x6f, 0x47, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65,
	0x63, 0x1a, 0x6f, 0x0a, 0x13, 0x61, 0x30, 0x31, 0x30, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x52,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x77, 0x1a, 0x7a, 0x0a, 0x1e, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x73,
	0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x1a, 0x1b,
	0x0a, 0x19, 0x61, 0x30, 0x31, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x1a, 0xbf, 0x02, 0x0a, 0x17,
	0x61, 0x30, 0x31, 0x33, 0x5f, 0x61, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x62, 0x41, 0x70,
	0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x62, 0x41, 0x70, 0x70, 0x47, 0x69,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a,
	0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x30, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x30, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x69,
	0x62, 0x30, 0x31, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x69,
	0x62, 0x30, 0x31, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x32, 0x41,
	0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x32, 0x41,
	0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x33, 0x41, 0x70, 0x70, 0x47, 0x69,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x33, 0x41, 0x70, 0x70, 0x47, 0x69,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x4a, 0x0a,
	0x18, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x1b, 0x61, 0x30,
	0x31, 0x35, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x31,
	0x36, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x1a,
	0x43, 0x0a, 0x11, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x18, 0x0a, 0x16, 0x61, 0x30, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x69,
	0x62, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xc5,
	0x02, 0x0a, 0x1b, 0x61, 0x30, 0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30,
	0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x73,
	0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x12, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x0c, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x6e, 0x6f,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x1a, 0x3a, 0x0a, 0x1a, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x1a, 0x3a, 0x0a, 0x1a, 0x61, 0x30, 0x32, 0x31, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x96,
	0x05, 0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x58,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x58, 0x52, 0x5f,
	0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x58,
	0x52, 0x5f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x30, 0x5f, 0x4d, 0x49,
	0x41, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x35, 0x5f,
	0x53, 0x54, 0x49, 0x42, 0x30, 0x31, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x32, 0x5f,
	0x4d, 0x49, 0x41, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30,
	0x37, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x33, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x46, 0x49, 0x42, 0x5f, 0x4d,
	0x49, 0x41, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x39,
	0x5f, 0x69, 0x73, 0x6f, 0x44, 0x69, 0x61, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x30, 0x5f,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0a,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x69, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x58, 0x52, 0x5f,
	0x61, 0x30, 0x31, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x33, 0x5f, 0x61, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c,
	0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0e, 0x12, 0x23,
	0x0a, 0x1f, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x35, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x36, 0x5f,
	0x73, 0x74, 0x69, 0x62, 0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x10, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x74, 0x72, 0x61, 0x79,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x58,
	0x52, 0x5f, 0x61, 0x30, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x58,
	0x52, 0x5f, 0x61, 0x30, 0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x13, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x30, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x31, 0x5f,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x31, 0x10, 0x15, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x78, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x66,
	0x69, 0x62, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x45, 0x63, 0x75, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x34,
	0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x26, 0x0a,
	0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x48, 0x00, 0x52, 0x06, 0x6d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x07, 0x5a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_alerts_proto_rawDescOnce sync.Once
	file_alerts_proto_rawDescData = file_alerts_proto_rawDesc
)

func file_alerts_proto_rawDescGZIP() []byte {
	file_alerts_proto_rawDescOnce.Do(func() {
		file_alerts_proto_rawDescData = protoimpl.X.CompressGZIP(file_alerts_proto_rawDescData)
	})
	return file_alerts_proto_rawDescData
}

var file_alerts_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_alerts_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_alerts_proto_goTypes = []interface{}{
	(StibAlert_AlertId)(0),                          // 0: StibAlert.AlertId
	(FibAlert_AlertId)(0),                           // 1: FibAlert.AlertId
	(FxrAlert_AlertId)(0),                           // 2: FxrAlert.AlertId
	(FxrAlertA019FixturePosSmFaultedFaultReason)(0), // 3: FxrAlert.a019_fixture_pos_sm_faulted.fault_reason
	(*StibAlert)(nil),                               // 4: StibAlert
	(*FibAlert)(nil),                                // 5: FibAlert
	(*FxrAlert)(nil),                                // 6: FxrAlert
	(*AlertLog)(nil),                                // 7: AlertLog
	(*AlertMatrix)(nil),                             // 8: AlertMatrix
	(*Alerts)(nil),                                  // 9: Alerts
	(*StibAlertA004_CpuOverRun)(nil),                // 10: StibAlert.a004_CpuOverRun
	(*StibAlertA007_TaskStackOverrun)(nil),          // 11: StibAlert.a007_TaskStackOverrun
	(*StibAlertA010_EnumerationWriteFail)(nil),      // 12: StibAlert.a010_EnumerationWriteFail
	(*StibAlertA020_VoltageMatchingTimeout)(nil),    // 13: StibAlert.a020_VoltageMatchingTimeout
	(*StibAlertA024IrefCorrectionIrrational)(nil),   // 14: StibAlert.a024_irefCorrectionIrrational
	(*StibAlertA028_AppliedCurrentIsSaturated)(nil), // 15: StibAlert.a028_AppliedCurrentIsSaturated
	(*StibAlertA029_CellSafetyCheckFailed)(nil),     // 16: StibAlert.a029_CellSafetyCheckFailed
	(*StibAlertA030_CellQualityCheckFailed)(nil),    // 17: StibAlert.a030_CellQualityCheckFailed
	(*StibAlertA031_CellOV)(nil),                    // 18: StibAlert.a031_CellOV
	(*StibAlertA032_CellUV)(nil),                    // 19: StibAlert.a032_CellUV
	(*StibAlertA034_PogoVIrrational)(nil),           // 20: StibAlert.a034_PogoVIrrational
	(*StibAlertA045_CIB_NegVoltageProtection)(nil),  // 21: StibAlert.a045_CIB_NegVoltageProtection
	(*StibAlertA036_CellTempTooHigh)(nil),           // 22: StibAlert.a036_CellTempTooHigh
	(*StibAlertA041_CIBDataInvalid)(nil),            // 23: StibAlert.a041_CIBDataInvalid
	(*StibAlertA044_CIBCellSwitchWriteFail)(nil),    // 24: StibAlert.a044_CIBCellSwitchWriteFail
	(*StibAlertA037_FormationTimeout)(nil),          // 25: StibAlert.a037_FormationTimeout
	(*StibAlertA038_FormationCheckFailed)(nil),      // 26: StibAlert.a038_FormationCheckFailed
	(*FibAlertA002WatchdogExpired)(nil),             // 27: FibAlert.a002_watchdogExpired
	(*FibAlertA003InternalFault)(nil),               // 28: FibAlert.a003_internalFault
	(*FxrAlertA002WatchdogExpired)(nil),             // 29: FxrAlert.a002_watchdogExpired
	(*FxrAlertA003InternalFault)(nil),               // 30: FxrAlert.a003_internalFault
	(*FxrAlertA004_STIB00_MIA)(nil),                 // 31: FxrAlert.a004_STIB00_MIA
	(*FxrAlertA005_STIB01_MIA)(nil),                 // 32: FxrAlert.a005_STIB01_MIA
	(*FxrAlertA006_STIB02_MIA)(nil),                 // 33: FxrAlert.a006_STIB02_MIA
	(*FxrAlertA007_STIB03_MIA)(nil),                 // 34: FxrAlert.a007_STIB03_MIA
	(*FxrAlertA008_FIB_MIA)(nil),                    // 35: FxrAlert.a008_FIB_MIA
	(*FxrAlertA009IsoDiagCheckFail)(nil),            // 36: FxrAlert.a009_isoDiagCheckFail
	(*FxrAlertA010IsolationFault)(nil),              // 37: FxrAlert.a010_isolationFault
	(*FxrAlertA011IsolationDegradationFault)(nil),   // 38: FxrAlert.a011_isolationDegradationFault
	(*FxrAlertA012EnumerationWriteFail)(nil),        // 39: FxrAlert.a012_enumerationWriteFail
	(*FxrAlertA013AppGitHashMismatch)(nil),          // 40: FxrAlert.a013_appGitHashMismatch
	(*FxrAlertA014StateMachineFault)(nil),           // 41: FxrAlert.a014_state_machine_fault
	(*FxrAlertA015FixturePositionFault)(nil),        // 42: FxrAlert.a015_fixture_position_fault
	(*FxrAlertA016StibsFaulted)(nil),                // 43: FxrAlert.a016_stibs_faulted
	(*FxrAlertA017TrayMissing)(nil),                 // 44: FxrAlert.a017_tray_missing
	(*FxrAlertA018StibStepTimeout)(nil),             // 45: FxrAlert.a018_stib_step_timeout
	(*FxrAlertA019FixturePosSmFaulted)(nil),         // 46: FxrAlert.a019_fixture_pos_sm_faulted
	(*FxrAlertA020ThermalEventLevel_0)(nil),         // 47: FxrAlert.a020_thermal_event_level_0
	(*FxrAlertA021ThermalEventLevel_1)(nil),         // 48: FxrAlert.a021_thermal_event_level_1
}
var file_alerts_proto_depIdxs = []int32{
	0,  // 0: StibAlert.alert_id:type_name -> StibAlert.AlertId
	10, // 1: StibAlert.a004:type_name -> StibAlert.a004_CpuOverRun
	11, // 2: StibAlert.a007:type_name -> StibAlert.a007_TaskStackOverrun
	12, // 3: StibAlert.a010:type_name -> StibAlert.a010_EnumerationWriteFail
	13, // 4: StibAlert.a020:type_name -> StibAlert.a020_VoltageMatchingTimeout
	14, // 5: StibAlert.a024:type_name -> StibAlert.a024_irefCorrectionIrrational
	15, // 6: StibAlert.a028:type_name -> StibAlert.a028_AppliedCurrentIsSaturated
	16, // 7: StibAlert.a029:type_name -> StibAlert.a029_CellSafetyCheckFailed
	17, // 8: StibAlert.a030:type_name -> StibAlert.a030_CellQualityCheckFailed
	18, // 9: StibAlert.a031:type_name -> StibAlert.a031_CellOV
	19, // 10: StibAlert.a032:type_name -> StibAlert.a032_CellUV
	20, // 11: StibAlert.a034:type_name -> StibAlert.a034_PogoVIrrational
	22, // 12: StibAlert.a036:type_name -> StibAlert.a036_CellTempTooHigh
	25, // 13: StibAlert.a037:type_name -> StibAlert.a037_FormationTimeout
	26, // 14: StibAlert.a038:type_name -> StibAlert.a038_FormationCheckFailed
	23, // 15: StibAlert.a041:type_name -> StibAlert.a041_CIBDataInvalid
	24, // 16: StibAlert.a044:type_name -> StibAlert.a044_CIBCellSwitchWriteFail
	21, // 17: StibAlert.a045:type_name -> StibAlert.a045_CIB_NegVoltageProtection
	1,  // 18: FibAlert.alert_id:type_name -> FibAlert.AlertId
	27, // 19: FibAlert.a002:type_name -> FibAlert.a002_watchdogExpired
	28, // 20: FibAlert.a003:type_name -> FibAlert.a003_internalFault
	2,  // 21: FxrAlert.alert_id:type_name -> FxrAlert.AlertId
	29, // 22: FxrAlert.a002:type_name -> FxrAlert.a002_watchdogExpired
	30, // 23: FxrAlert.a003:type_name -> FxrAlert.a003_internalFault
	31, // 24: FxrAlert.a004:type_name -> FxrAlert.a004_STIB00_MIA
	32, // 25: FxrAlert.a005:type_name -> FxrAlert.a005_STIB01_MIA
	33, // 26: FxrAlert.a006:type_name -> FxrAlert.a006_STIB02_MIA
	34, // 27: FxrAlert.a007:type_name -> FxrAlert.a007_STIB03_MIA
	35, // 28: FxrAlert.a008:type_name -> FxrAlert.a008_FIB_MIA
	36, // 29: FxrAlert.a009:type_name -> FxrAlert.a009_isoDiagCheckFail
	37, // 30: FxrAlert.a010:type_name -> FxrAlert.a010_isolationFault
	38, // 31: FxrAlert.a011:type_name -> FxrAlert.a011_isolationDegradationFault
	39, // 32: FxrAlert.a012:type_name -> FxrAlert.a012_enumerationWriteFail
	40, // 33: FxrAlert.a013:type_name -> FxrAlert.a013_appGitHashMismatch
	41, // 34: FxrAlert.a014:type_name -> FxrAlert.a014_state_machine_fault
	42, // 35: FxrAlert.a015:type_name -> FxrAlert.a015_fixture_position_fault
	43, // 36: FxrAlert.a016:type_name -> FxrAlert.a016_stibs_faulted
	44, // 37: FxrAlert.a017:type_name -> FxrAlert.a017_tray_missing
	45, // 38: FxrAlert.a018:type_name -> FxrAlert.a018_stib_step_timeout
	46, // 39: FxrAlert.a019:type_name -> FxrAlert.a019_fixture_pos_sm_faulted
	47, // 40: FxrAlert.a020:type_name -> FxrAlert.a020_thermal_event_level_0
	48, // 41: FxrAlert.a021:type_name -> FxrAlert.a021_thermal_event_level_1
	6,  // 42: AlertLog.fxr_alert:type_name -> FxrAlert
	5,  // 43: AlertLog.fib_alert:type_name -> FibAlert
	4,  // 44: AlertLog.stib_alert:type_name -> StibAlert
	7,  // 45: Alerts.log:type_name -> AlertLog
	8,  // 46: Alerts.matrix:type_name -> AlertMatrix
	3,  // 47: FxrAlert.a019_fixture_pos_sm_faulted.fixture_fault_reason:type_name -> FxrAlert.a019_fixture_pos_sm_faulted.fault_reason
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_alerts_proto_init() }
func file_alerts_proto_init() {
	if File_alerts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_alerts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA004_CpuOverRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA007_TaskStackOverrun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA010_EnumerationWriteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA020_VoltageMatchingTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA024IrefCorrectionIrrational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA028_AppliedCurrentIsSaturated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA029_CellSafetyCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA030_CellQualityCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA031_CellOV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA032_CellUV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA034_PogoVIrrational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA045_CIB_NegVoltageProtection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA036_CellTempTooHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA041_CIBDataInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA044_CIBCellSwitchWriteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA037_FormationTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA038_FormationCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA002WatchdogExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA003InternalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA002WatchdogExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA003InternalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA004_STIB00_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA005_STIB01_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA006_STIB02_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA007_STIB03_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA008_FIB_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA009IsoDiagCheckFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA010IsolationFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA011IsolationDegradationFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA012EnumerationWriteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA013AppGitHashMismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA014StateMachineFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA015FixturePositionFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA016StibsFaulted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA017TrayMissing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA018StibStepTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA019FixturePosSmFaulted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA020ThermalEventLevel_0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA021ThermalEventLevel_1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_alerts_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StibAlert_A004)(nil),
		(*StibAlert_A007)(nil),
		(*StibAlert_A010)(nil),
		(*StibAlert_A020)(nil),
		(*StibAlert_A024)(nil),
		(*StibAlert_A028)(nil),
		(*StibAlert_A029)(nil),
		(*StibAlert_A030)(nil),
		(*StibAlert_A031)(nil),
		(*StibAlert_A032)(nil),
		(*StibAlert_A034)(nil),
		(*StibAlert_A036)(nil),
		(*StibAlert_A037)(nil),
		(*StibAlert_A038)(nil),
		(*StibAlert_A041)(nil),
		(*StibAlert_A044)(nil),
		(*StibAlert_A045)(nil),
	}
	file_alerts_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FibAlert_A002)(nil),
		(*FibAlert_A003)(nil),
	}
	file_alerts_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FxrAlert_A002)(nil),
		(*FxrAlert_A003)(nil),
		(*FxrAlert_A004)(nil),
		(*FxrAlert_A005)(nil),
		(*FxrAlert_A006)(nil),
		(*FxrAlert_A007)(nil),
		(*FxrAlert_A008)(nil),
		(*FxrAlert_A009)(nil),
		(*FxrAlert_A010)(nil),
		(*FxrAlert_A011)(nil),
		(*FxrAlert_A012)(nil),
		(*FxrAlert_A013)(nil),
		(*FxrAlert_A014)(nil),
		(*FxrAlert_A015)(nil),
		(*FxrAlert_A016)(nil),
		(*FxrAlert_A017)(nil),
		(*FxrAlert_A018)(nil),
		(*FxrAlert_A019)(nil),
		(*FxrAlert_A020)(nil),
		(*FxrAlert_A021)(nil),
	}
	file_alerts_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AlertLog_FxrAlert)(nil),
		(*AlertLog_FibAlert)(nil),
		(*AlertLog_StibAlert)(nil),
	}
	file_alerts_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Alerts_Log)(nil),
		(*Alerts_Matrix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alerts_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alerts_proto_goTypes,
		DependencyIndexes: file_alerts_proto_depIdxs,
		EnumInfos:         file_alerts_proto_enumTypes,
		MessageInfos:      file_alerts_proto_msgTypes,
	}.Build()
	File_alerts_proto = out.File
	file_alerts_proto_rawDesc = nil
	file_alerts_proto_goTypes = nil
	file_alerts_proto_depIdxs = nil
}
