// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: alerts.proto

package tower

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StibAlert_AlertId int32

const (
	StibAlert_STIB_NONE                                 StibAlert_AlertId = 0
	StibAlert_STIB_a001_SwAppBoot                       StibAlert_AlertId = 1
	StibAlert_STIB_a002_HalError                        StibAlert_AlertId = 2
	StibAlert_STIB_a003_WatchDog                        StibAlert_AlertId = 3
	StibAlert_STIB_a004_CpuOverRun                      StibAlert_AlertId = 4
	StibAlert_STIB_a005_CANBusReset                     StibAlert_AlertId = 5
	StibAlert_STIB_a006_STIBrx_MIA                      StibAlert_AlertId = 6
	StibAlert_STIB_a007_TaskStackOverrun                StibAlert_AlertId = 7
	StibAlert_STIB_a008_unused                          StibAlert_AlertId = 8
	StibAlert_STIB_a009_PS24V                           StibAlert_AlertId = 9
	StibAlert_STIB_a010_EnumerationWriteFail            StibAlert_AlertId = 10
	StibAlert_STIB_a011_CurrentSensorHwOC               StibAlert_AlertId = 11
	StibAlert_STIB_a012_ComparatorHwOC                  StibAlert_AlertId = 12
	StibAlert_STIB_a013_SwOC                            StibAlert_AlertId = 13
	StibAlert_STIB_a014_BusUV                           StibAlert_AlertId = 14
	StibAlert_STIB_a015_BusOV                           StibAlert_AlertId = 15
	StibAlert_STIB_a016_StringOV                        StibAlert_AlertId = 16
	StibAlert_STIB_a017_StringUV                        StibAlert_AlertId = 17
	StibAlert_STIB_a018_SwitchTempTooHigh               StibAlert_AlertId = 18
	StibAlert_STIB_a019_ShuntTempTooHigh                StibAlert_AlertId = 19
	StibAlert_STIB_a020_VoltageMatchingTimeout          StibAlert_AlertId = 20
	StibAlert_STIB_a021_LossOfCurrentControl            StibAlert_AlertId = 21
	StibAlert_STIB_a022_SensorOffsetTooHigh             StibAlert_AlertId = 22
	StibAlert_STIB_a023_EnableLineLost                  StibAlert_AlertId = 23
	StibAlert_STIB_a024_irefCorrectionIrrational        StibAlert_AlertId = 24
	StibAlert_STIB_a025_Rail12V                         StibAlert_AlertId = 25
	StibAlert_STIB_a026_Rail5V                          StibAlert_AlertId = 26
	StibAlert_STIB_a027_Rail3V3a                        StibAlert_AlertId = 27
	StibAlert_STIB_a028_AppliedCurrentIsSaturated       StibAlert_AlertId = 28
	StibAlert_STIB_a029_CellSafetyCheckFailed           StibAlert_AlertId = 29
	StibAlert_STIB_a030_CellQualityCheckFailed          StibAlert_AlertId = 30
	StibAlert_STIB_a031_CellOV                          StibAlert_AlertId = 31
	StibAlert_STIB_a032_CellUV                          StibAlert_AlertId = 32
	StibAlert_STIB_a033_CellDvDT                        StibAlert_AlertId = 33
	StibAlert_STIB_a034_PogoVIrrational                 StibAlert_AlertId = 34
	StibAlert_STIB_a035_CibFaulted                      StibAlert_AlertId = 35
	StibAlert_STIB_a036_CellTempTooHigh                 StibAlert_AlertId = 36
	StibAlert_STIB_a037_FormationTimeout                StibAlert_AlertId = 37
	StibAlert_STIB_a038_FormationCheckFailed            StibAlert_AlertId = 38
	StibAlert_STIB_a039_unused                          StibAlert_AlertId = 39
	StibAlert_STIB_a040_unused                          StibAlert_AlertId = 40
	StibAlert_STIB_a041_CIBDataInvalid                  StibAlert_AlertId = 41
	StibAlert_STIB_a042_Reserved                        StibAlert_AlertId = 42
	StibAlert_STIB_a043_CIBNotConnected                 StibAlert_AlertId = 43
	StibAlert_STIB_a044_CIBCellSwitchWriteFail          StibAlert_AlertId = 44
	StibAlert_STIB_a045_CIB_NegVoltageProtection        StibAlert_AlertId = 45
	StibAlert_STIB_a046_CIB_STIB_VStringDiffCheckFail   StibAlert_AlertId = 46
	StibAlert_STIB_a047_ShuntCalibrationFail            StibAlert_AlertId = 47
	StibAlert_STIB_a048_CIBCellSwitchWriteFailPermanent StibAlert_AlertId = 48
	StibAlert_STIB_a049_CellDvDtOutOfBounds             StibAlert_AlertId = 49
	StibAlert_STIB_a050_CellDetectMIA                   StibAlert_AlertId = 50
	StibAlert_STIB_a051_ParamLimitVoltageCheckFailed    StibAlert_AlertId = 51
	StibAlert_STIB_a052_ParamLimitDvDtCheckFailed       StibAlert_AlertId = 52
	StibAlert_STIB_a053_ParamLimitTempCheckFailed       StibAlert_AlertId = 53
	StibAlert_STIB_a054_ParamLimitCapacityCheckFailed   StibAlert_AlertId = 54
)

// Enum value maps for StibAlert_AlertId.
var (
	StibAlert_AlertId_name = map[int32]string{
		0:  "STIB_NONE",
		1:  "STIB_a001_SwAppBoot",
		2:  "STIB_a002_HalError",
		3:  "STIB_a003_WatchDog",
		4:  "STIB_a004_CpuOverRun",
		5:  "STIB_a005_CANBusReset",
		6:  "STIB_a006_STIBrx_MIA",
		7:  "STIB_a007_TaskStackOverrun",
		8:  "STIB_a008_unused",
		9:  "STIB_a009_PS24V",
		10: "STIB_a010_EnumerationWriteFail",
		11: "STIB_a011_CurrentSensorHwOC",
		12: "STIB_a012_ComparatorHwOC",
		13: "STIB_a013_SwOC",
		14: "STIB_a014_BusUV",
		15: "STIB_a015_BusOV",
		16: "STIB_a016_StringOV",
		17: "STIB_a017_StringUV",
		18: "STIB_a018_SwitchTempTooHigh",
		19: "STIB_a019_ShuntTempTooHigh",
		20: "STIB_a020_VoltageMatchingTimeout",
		21: "STIB_a021_LossOfCurrentControl",
		22: "STIB_a022_SensorOffsetTooHigh",
		23: "STIB_a023_EnableLineLost",
		24: "STIB_a024_irefCorrectionIrrational",
		25: "STIB_a025_Rail12V",
		26: "STIB_a026_Rail5V",
		27: "STIB_a027_Rail3V3a",
		28: "STIB_a028_AppliedCurrentIsSaturated",
		29: "STIB_a029_CellSafetyCheckFailed",
		30: "STIB_a030_CellQualityCheckFailed",
		31: "STIB_a031_CellOV",
		32: "STIB_a032_CellUV",
		33: "STIB_a033_CellDvDT",
		34: "STIB_a034_PogoVIrrational",
		35: "STIB_a035_CibFaulted",
		36: "STIB_a036_CellTempTooHigh",
		37: "STIB_a037_FormationTimeout",
		38: "STIB_a038_FormationCheckFailed",
		39: "STIB_a039_unused",
		40: "STIB_a040_unused",
		41: "STIB_a041_CIBDataInvalid",
		42: "STIB_a042_Reserved",
		43: "STIB_a043_CIBNotConnected",
		44: "STIB_a044_CIBCellSwitchWriteFail",
		45: "STIB_a045_CIB_NegVoltageProtection",
		46: "STIB_a046_CIB_STIB_VStringDiffCheckFail",
		47: "STIB_a047_ShuntCalibrationFail",
		48: "STIB_a048_CIBCellSwitchWriteFailPermanent",
		49: "STIB_a049_CellDvDtOutOfBounds",
		50: "STIB_a050_CellDetectMIA",
		51: "STIB_a051_ParamLimitVoltageCheckFailed",
		52: "STIB_a052_ParamLimitDvDtCheckFailed",
		53: "STIB_a053_ParamLimitTempCheckFailed",
		54: "STIB_a054_ParamLimitCapacityCheckFailed",
	}
	StibAlert_AlertId_value = map[string]int32{
		"STIB_NONE":                                 0,
		"STIB_a001_SwAppBoot":                       1,
		"STIB_a002_HalError":                        2,
		"STIB_a003_WatchDog":                        3,
		"STIB_a004_CpuOverRun":                      4,
		"STIB_a005_CANBusReset":                     5,
		"STIB_a006_STIBrx_MIA":                      6,
		"STIB_a007_TaskStackOverrun":                7,
		"STIB_a008_unused":                          8,
		"STIB_a009_PS24V":                           9,
		"STIB_a010_EnumerationWriteFail":            10,
		"STIB_a011_CurrentSensorHwOC":               11,
		"STIB_a012_ComparatorHwOC":                  12,
		"STIB_a013_SwOC":                            13,
		"STIB_a014_BusUV":                           14,
		"STIB_a015_BusOV":                           15,
		"STIB_a016_StringOV":                        16,
		"STIB_a017_StringUV":                        17,
		"STIB_a018_SwitchTempTooHigh":               18,
		"STIB_a019_ShuntTempTooHigh":                19,
		"STIB_a020_VoltageMatchingTimeout":          20,
		"STIB_a021_LossOfCurrentControl":            21,
		"STIB_a022_SensorOffsetTooHigh":             22,
		"STIB_a023_EnableLineLost":                  23,
		"STIB_a024_irefCorrectionIrrational":        24,
		"STIB_a025_Rail12V":                         25,
		"STIB_a026_Rail5V":                          26,
		"STIB_a027_Rail3V3a":                        27,
		"STIB_a028_AppliedCurrentIsSaturated":       28,
		"STIB_a029_CellSafetyCheckFailed":           29,
		"STIB_a030_CellQualityCheckFailed":          30,
		"STIB_a031_CellOV":                          31,
		"STIB_a032_CellUV":                          32,
		"STIB_a033_CellDvDT":                        33,
		"STIB_a034_PogoVIrrational":                 34,
		"STIB_a035_CibFaulted":                      35,
		"STIB_a036_CellTempTooHigh":                 36,
		"STIB_a037_FormationTimeout":                37,
		"STIB_a038_FormationCheckFailed":            38,
		"STIB_a039_unused":                          39,
		"STIB_a040_unused":                          40,
		"STIB_a041_CIBDataInvalid":                  41,
		"STIB_a042_Reserved":                        42,
		"STIB_a043_CIBNotConnected":                 43,
		"STIB_a044_CIBCellSwitchWriteFail":          44,
		"STIB_a045_CIB_NegVoltageProtection":        45,
		"STIB_a046_CIB_STIB_VStringDiffCheckFail":   46,
		"STIB_a047_ShuntCalibrationFail":            47,
		"STIB_a048_CIBCellSwitchWriteFailPermanent": 48,
		"STIB_a049_CellDvDtOutOfBounds":             49,
		"STIB_a050_CellDetectMIA":                   50,
		"STIB_a051_ParamLimitVoltageCheckFailed":    51,
		"STIB_a052_ParamLimitDvDtCheckFailed":       52,
		"STIB_a053_ParamLimitTempCheckFailed":       53,
		"STIB_a054_ParamLimitCapacityCheckFailed":   54,
	}
)

func (x StibAlert_AlertId) Enum() *StibAlert_AlertId {
	p := new(StibAlert_AlertId)
	*p = x
	return p
}

func (x StibAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[0].Descriptor()
}

func (StibAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[0]
}

func (x StibAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibAlert_AlertId.Descriptor instead.
func (StibAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 0}
}

type StibAlertA038_FormationCheckFailed_AlertReason int32

const (
	StibAlertA038_FormationCheckFailed_none            StibAlertA038_FormationCheckFailed_AlertReason = 0
	StibAlertA038_FormationCheckFailed_no_hw_enable    StibAlertA038_FormationCheckFailed_AlertReason = 1
	StibAlertA038_FormationCheckFailed_dcdc_not_ready  StibAlertA038_FormationCheckFailed_AlertReason = 2
	StibAlertA038_FormationCheckFailed_vmatch_fail     StibAlertA038_FormationCheckFailed_AlertReason = 3
	StibAlertA038_FormationCheckFailed_dcdc_fault      StibAlertA038_FormationCheckFailed_AlertReason = 4
	StibAlertA038_FormationCheckFailed_cib_fault       StibAlertA038_FormationCheckFailed_AlertReason = 5
	StibAlertA038_FormationCheckFailed_cell_ov         StibAlertA038_FormationCheckFailed_AlertReason = 6
	StibAlertA038_FormationCheckFailed_cell_ot         StibAlertA038_FormationCheckFailed_AlertReason = 7
	StibAlertA038_FormationCheckFailed_request_invalid StibAlertA038_FormationCheckFailed_AlertReason = 8
	StibAlertA038_FormationCheckFailed_quality_lim     StibAlertA038_FormationCheckFailed_AlertReason = 9
	StibAlertA038_FormationCheckFailed_safety_lim      StibAlertA038_FormationCheckFailed_AlertReason = 10
	StibAlertA038_FormationCheckFailed_step_timeout    StibAlertA038_FormationCheckFailed_AlertReason = 11
	StibAlertA038_FormationCheckFailed_state_timeout   StibAlertA038_FormationCheckFailed_AlertReason = 12
	StibAlertA038_FormationCheckFailed_command_msg_mia StibAlertA038_FormationCheckFailed_AlertReason = 13
	StibAlertA038_FormationCheckFailed_cell_detect_mia StibAlertA038_FormationCheckFailed_AlertReason = 14
)

// Enum value maps for StibAlertA038_FormationCheckFailed_AlertReason.
var (
	StibAlertA038_FormationCheckFailed_AlertReason_name = map[int32]string{
		0:  "none",
		1:  "no_hw_enable",
		2:  "dcdc_not_ready",
		3:  "vmatch_fail",
		4:  "dcdc_fault",
		5:  "cib_fault",
		6:  "cell_ov",
		7:  "cell_ot",
		8:  "request_invalid",
		9:  "quality_lim",
		10: "safety_lim",
		11: "step_timeout",
		12: "state_timeout",
		13: "command_msg_mia",
		14: "cell_detect_mia",
	}
	StibAlertA038_FormationCheckFailed_AlertReason_value = map[string]int32{
		"none":            0,
		"no_hw_enable":    1,
		"dcdc_not_ready":  2,
		"vmatch_fail":     3,
		"dcdc_fault":      4,
		"cib_fault":       5,
		"cell_ov":         6,
		"cell_ot":         7,
		"request_invalid": 8,
		"quality_lim":     9,
		"safety_lim":      10,
		"step_timeout":    11,
		"state_timeout":   12,
		"command_msg_mia": 13,
		"cell_detect_mia": 14,
	}
)

func (x StibAlertA038_FormationCheckFailed_AlertReason) Enum() *StibAlertA038_FormationCheckFailed_AlertReason {
	p := new(StibAlertA038_FormationCheckFailed_AlertReason)
	*p = x
	return p
}

func (x StibAlertA038_FormationCheckFailed_AlertReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibAlertA038_FormationCheckFailed_AlertReason) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[1].Descriptor()
}

func (StibAlertA038_FormationCheckFailed_AlertReason) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[1]
}

func (x StibAlertA038_FormationCheckFailed_AlertReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibAlertA038_FormationCheckFailed_AlertReason.Descriptor instead.
func (StibAlertA038_FormationCheckFailed_AlertReason) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 27, 0}
}

type FibAlert_AlertId int32

const (
	FibAlert_FIB_NONE                  FibAlert_AlertId = 0
	FibAlert_FIB_a001_SwAppBoot        FibAlert_AlertId = 1
	FibAlert_FIB_a002_watchdogExpired  FibAlert_AlertId = 2
	FibAlert_FIB_a003_internalFault    FibAlert_AlertId = 3
	FibAlert_FIB_a004_FanRpmFault      FibAlert_AlertId = 4
	FibAlert_FIB_a005_FanTotalFault    FibAlert_AlertId = 5
	FibAlert_FIB_a006_FanRationalFault FibAlert_AlertId = 6
	FibAlert_FIB_a007_CpuOverRun       FibAlert_AlertId = 7
	FibAlert_FIB_a008_TaskStackOverrun FibAlert_AlertId = 8
	FibAlert_FIB_a009_FIBrxCommandMIA  FibAlert_AlertId = 9
)

// Enum value maps for FibAlert_AlertId.
var (
	FibAlert_AlertId_name = map[int32]string{
		0: "FIB_NONE",
		1: "FIB_a001_SwAppBoot",
		2: "FIB_a002_watchdogExpired",
		3: "FIB_a003_internalFault",
		4: "FIB_a004_FanRpmFault",
		5: "FIB_a005_FanTotalFault",
		6: "FIB_a006_FanRationalFault",
		7: "FIB_a007_CpuOverRun",
		8: "FIB_a008_TaskStackOverrun",
		9: "FIB_a009_FIBrxCommandMIA",
	}
	FibAlert_AlertId_value = map[string]int32{
		"FIB_NONE":                  0,
		"FIB_a001_SwAppBoot":        1,
		"FIB_a002_watchdogExpired":  2,
		"FIB_a003_internalFault":    3,
		"FIB_a004_FanRpmFault":      4,
		"FIB_a005_FanTotalFault":    5,
		"FIB_a006_FanRationalFault": 6,
		"FIB_a007_CpuOverRun":       7,
		"FIB_a008_TaskStackOverrun": 8,
		"FIB_a009_FIBrxCommandMIA":  9,
	}
)

func (x FibAlert_AlertId) Enum() *FibAlert_AlertId {
	p := new(FibAlert_AlertId)
	*p = x
	return p
}

func (x FibAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FibAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[2].Descriptor()
}

func (FibAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[2]
}

func (x FibAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FibAlert_AlertId.Descriptor instead.
func (FibAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 0}
}

type FxrAlert_AlertId int32

const (
	FxrAlert_FXR_NONE                               FxrAlert_AlertId = 0
	FxrAlert_FXR_a001_SwAppBoot                     FxrAlert_AlertId = 1
	FxrAlert_FXR_a002_watchdogExpired               FxrAlert_AlertId = 2
	FxrAlert_FXR_a003_internalFault                 FxrAlert_AlertId = 3
	FxrAlert_FXR_a004_STIB00_MIA                    FxrAlert_AlertId = 4
	FxrAlert_FXR_a005_STIB01_MIA                    FxrAlert_AlertId = 5
	FxrAlert_FXR_a006_STIB02_MIA                    FxrAlert_AlertId = 6
	FxrAlert_FXR_a007_STIB03_MIA                    FxrAlert_AlertId = 7
	FxrAlert_FXR_a008_FIB_MIA                       FxrAlert_AlertId = 8
	FxrAlert_FXR_a009_isoDiagCheckFail              FxrAlert_AlertId = 9
	FxrAlert_FXR_a010_isolationFault                FxrAlert_AlertId = 10
	FxrAlert_FXR_a011_isolationDegradationFault     FxrAlert_AlertId = 11
	FxrAlert_FXR_a012_enumerationWriteFail          FxrAlert_AlertId = 12
	FxrAlert_FXR_a013_appGitHashMismatch            FxrAlert_AlertId = 13
	FxrAlert_FXR_a014_state_machine_fault           FxrAlert_AlertId = 14
	FxrAlert_FXR_a015_fixture_position_fault        FxrAlert_AlertId = 15
	FxrAlert_FXR_a016_stibs_faulted                 FxrAlert_AlertId = 16
	FxrAlert_FXR_a017_tray_missing                  FxrAlert_AlertId = 17
	FxrAlert_FXR_a018_fixture_control_sm_timeout    FxrAlert_AlertId = 18
	FxrAlert_FXR_a019_fixture_pos_sm_faulted        FxrAlert_AlertId = 19
	FxrAlert_FXR_a020_thermal_event_level_0         FxrAlert_AlertId = 20
	FxrAlert_FXR_a021_thermal_event_level_1         FxrAlert_AlertId = 21
	FxrAlert_FXR_a022_git_mismatch_timeout          FxrAlert_AlertId = 22
	FxrAlert_FXR_a023_HVBus_UV_fault                FxrAlert_AlertId = 23
	FxrAlert_FXR_a024_HVBus_OV_fault                FxrAlert_AlertId = 24
	FxrAlert_FXR_a025_EquipmentNeedsMaintenance     FxrAlert_AlertId = 25
	FxrAlert_FXR_a026_Reserved                      FxrAlert_AlertId = 26
	FxrAlert_FXR_a027_24VBus_UV_fault               FxrAlert_AlertId = 27
	FxrAlert_FXR_a028_24VBus_OV_fault               FxrAlert_AlertId = 28
	FxrAlert_FXR_a029_RecipeMaskMissingCelldetected FxrAlert_AlertId = 29
	FxrAlert_FXR_a030_fib_faulted                   FxrAlert_AlertId = 30
	FxrAlert_FXR_a031_FanPwrCheckFail               FxrAlert_AlertId = 31
	FxrAlert_FXR_a032_StibPwrCheckFail              FxrAlert_AlertId = 32
	FxrAlert_FXR_a033_FanHwPwrSupplyFail            FxrAlert_AlertId = 33
	FxrAlert_FXR_a034_temp_sensor_comms_irrational  FxrAlert_AlertId = 34
	FxrAlert_FXR_a035_enumeration_change            FxrAlert_AlertId = 35
	FxrAlert_FXR_a036_pogo_monitor_fault            FxrAlert_AlertId = 36
	FxrAlert_FXR_a037_fault_request                 FxrAlert_AlertId = 37
)

// Enum value maps for FxrAlert_AlertId.
var (
	FxrAlert_AlertId_name = map[int32]string{
		0:  "FXR_NONE",
		1:  "FXR_a001_SwAppBoot",
		2:  "FXR_a002_watchdogExpired",
		3:  "FXR_a003_internalFault",
		4:  "FXR_a004_STIB00_MIA",
		5:  "FXR_a005_STIB01_MIA",
		6:  "FXR_a006_STIB02_MIA",
		7:  "FXR_a007_STIB03_MIA",
		8:  "FXR_a008_FIB_MIA",
		9:  "FXR_a009_isoDiagCheckFail",
		10: "FXR_a010_isolationFault",
		11: "FXR_a011_isolationDegradationFault",
		12: "FXR_a012_enumerationWriteFail",
		13: "FXR_a013_appGitHashMismatch",
		14: "FXR_a014_state_machine_fault",
		15: "FXR_a015_fixture_position_fault",
		16: "FXR_a016_stibs_faulted",
		17: "FXR_a017_tray_missing",
		18: "FXR_a018_fixture_control_sm_timeout",
		19: "FXR_a019_fixture_pos_sm_faulted",
		20: "FXR_a020_thermal_event_level_0",
		21: "FXR_a021_thermal_event_level_1",
		22: "FXR_a022_git_mismatch_timeout",
		23: "FXR_a023_HVBus_UV_fault",
		24: "FXR_a024_HVBus_OV_fault",
		25: "FXR_a025_EquipmentNeedsMaintenance",
		26: "FXR_a026_Reserved",
		27: "FXR_a027_24VBus_UV_fault",
		28: "FXR_a028_24VBus_OV_fault",
		29: "FXR_a029_RecipeMaskMissingCelldetected",
		30: "FXR_a030_fib_faulted",
		31: "FXR_a031_FanPwrCheckFail",
		32: "FXR_a032_StibPwrCheckFail",
		33: "FXR_a033_FanHwPwrSupplyFail",
		34: "FXR_a034_temp_sensor_comms_irrational",
		35: "FXR_a035_enumeration_change",
		36: "FXR_a036_pogo_monitor_fault",
		37: "FXR_a037_fault_request",
	}
	FxrAlert_AlertId_value = map[string]int32{
		"FXR_NONE":                               0,
		"FXR_a001_SwAppBoot":                     1,
		"FXR_a002_watchdogExpired":               2,
		"FXR_a003_internalFault":                 3,
		"FXR_a004_STIB00_MIA":                    4,
		"FXR_a005_STIB01_MIA":                    5,
		"FXR_a006_STIB02_MIA":                    6,
		"FXR_a007_STIB03_MIA":                    7,
		"FXR_a008_FIB_MIA":                       8,
		"FXR_a009_isoDiagCheckFail":              9,
		"FXR_a010_isolationFault":                10,
		"FXR_a011_isolationDegradationFault":     11,
		"FXR_a012_enumerationWriteFail":          12,
		"FXR_a013_appGitHashMismatch":            13,
		"FXR_a014_state_machine_fault":           14,
		"FXR_a015_fixture_position_fault":        15,
		"FXR_a016_stibs_faulted":                 16,
		"FXR_a017_tray_missing":                  17,
		"FXR_a018_fixture_control_sm_timeout":    18,
		"FXR_a019_fixture_pos_sm_faulted":        19,
		"FXR_a020_thermal_event_level_0":         20,
		"FXR_a021_thermal_event_level_1":         21,
		"FXR_a022_git_mismatch_timeout":          22,
		"FXR_a023_HVBus_UV_fault":                23,
		"FXR_a024_HVBus_OV_fault":                24,
		"FXR_a025_EquipmentNeedsMaintenance":     25,
		"FXR_a026_Reserved":                      26,
		"FXR_a027_24VBus_UV_fault":               27,
		"FXR_a028_24VBus_OV_fault":               28,
		"FXR_a029_RecipeMaskMissingCelldetected": 29,
		"FXR_a030_fib_faulted":                   30,
		"FXR_a031_FanPwrCheckFail":               31,
		"FXR_a032_StibPwrCheckFail":              32,
		"FXR_a033_FanHwPwrSupplyFail":            33,
		"FXR_a034_temp_sensor_comms_irrational":  34,
		"FXR_a035_enumeration_change":            35,
		"FXR_a036_pogo_monitor_fault":            36,
		"FXR_a037_fault_request":                 37,
	}
)

func (x FxrAlert_AlertId) Enum() *FxrAlert_AlertId {
	p := new(FxrAlert_AlertId)
	*p = x
	return p
}

func (x FxrAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FxrAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[3].Descriptor()
}

func (FxrAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[3]
}

func (x FxrAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FxrAlert_AlertId.Descriptor instead.
func (FxrAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 0}
}

type FxrAlertA019FixturePosSmFaultedFaultReason int32

const (
	FxrAlertA019FixturePosSmFaulted_not_open_in_open_st     FxrAlertA019FixturePosSmFaultedFaultReason = 0
	FxrAlertA019FixturePosSmFaulted_not_closed_in_closed_st FxrAlertA019FixturePosSmFaultedFaultReason = 1
	FxrAlertA019FixturePosSmFaulted_timeout_while_opening   FxrAlertA019FixturePosSmFaultedFaultReason = 2
	FxrAlertA019FixturePosSmFaulted_timeout_while_closing   FxrAlertA019FixturePosSmFaultedFaultReason = 3
	FxrAlertA019FixturePosSmFaulted_position_invalid        FxrAlertA019FixturePosSmFaultedFaultReason = 4
)

// Enum value maps for FxrAlertA019FixturePosSmFaultedFaultReason.
var (
	FxrAlertA019FixturePosSmFaultedFaultReason_name = map[int32]string{
		0: "not_open_in_open_st",
		1: "not_closed_in_closed_st",
		2: "timeout_while_opening",
		3: "timeout_while_closing",
		4: "position_invalid",
	}
	FxrAlertA019FixturePosSmFaultedFaultReason_value = map[string]int32{
		"not_open_in_open_st":     0,
		"not_closed_in_closed_st": 1,
		"timeout_while_opening":   2,
		"timeout_while_closing":   3,
		"position_invalid":        4,
	}
)

func (x FxrAlertA019FixturePosSmFaultedFaultReason) Enum() *FxrAlertA019FixturePosSmFaultedFaultReason {
	p := new(FxrAlertA019FixturePosSmFaultedFaultReason)
	*p = x
	return p
}

func (x FxrAlertA019FixturePosSmFaultedFaultReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FxrAlertA019FixturePosSmFaultedFaultReason) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[4].Descriptor()
}

func (FxrAlertA019FixturePosSmFaultedFaultReason) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[4]
}

func (x FxrAlertA019FixturePosSmFaultedFaultReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FxrAlertA019FixturePosSmFaultedFaultReason.Descriptor instead.
func (FxrAlertA019FixturePosSmFaultedFaultReason) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 18, 0}
}

type TauxAlert_AlertId int32

const (
	TauxAlert_TAUX_NONE                          TauxAlert_AlertId = 0
	TauxAlert_TAUX_a001_SwAppBoot                TauxAlert_AlertId = 1
	TauxAlert_TAUX_a002_DcacAlert                TauxAlert_AlertId = 2
	TauxAlert_TAUX_a003_NoPowerCapacity          TauxAlert_AlertId = 3
	TauxAlert_TAUX_a004_PowerCapacityDecrease    TauxAlert_AlertId = 4
	TauxAlert_TAUX_a005_PowerOverload            TauxAlert_AlertId = 5
	TauxAlert_TAUX_a006_PowertrayOverTemperature TauxAlert_AlertId = 6
)

// Enum value maps for TauxAlert_AlertId.
var (
	TauxAlert_AlertId_name = map[int32]string{
		0: "TAUX_NONE",
		1: "TAUX_a001_SwAppBoot",
		2: "TAUX_a002_DcacAlert",
		3: "TAUX_a003_NoPowerCapacity",
		4: "TAUX_a004_PowerCapacityDecrease",
		5: "TAUX_a005_PowerOverload",
		6: "TAUX_a006_PowertrayOverTemperature",
	}
	TauxAlert_AlertId_value = map[string]int32{
		"TAUX_NONE":                          0,
		"TAUX_a001_SwAppBoot":                1,
		"TAUX_a002_DcacAlert":                2,
		"TAUX_a003_NoPowerCapacity":          3,
		"TAUX_a004_PowerCapacityDecrease":    4,
		"TAUX_a005_PowerOverload":            5,
		"TAUX_a006_PowertrayOverTemperature": 6,
	}
)

func (x TauxAlert_AlertId) Enum() *TauxAlert_AlertId {
	p := new(TauxAlert_AlertId)
	*p = x
	return p
}

func (x TauxAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TauxAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[5].Descriptor()
}

func (TauxAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[5]
}

func (x TauxAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TauxAlert_AlertId.Descriptor instead.
func (TauxAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 0}
}

type TauxAlertA002_DcacAlert_Ecu int32

const (
	TauxAlertA002_DcacAlert_DCAC_ALERT_ECU_UNKOWN_UNSPECIFIED TauxAlertA002_DcacAlert_Ecu = 0
	TauxAlertA002_DcacAlert_DCAC_ALERT_ECU_POD                TauxAlertA002_DcacAlert_Ecu = 1
	TauxAlertA002_DcacAlert_DCAC_ALERT_ECU_PINV               TauxAlertA002_DcacAlert_Ecu = 2
)

// Enum value maps for TauxAlertA002_DcacAlert_Ecu.
var (
	TauxAlertA002_DcacAlert_Ecu_name = map[int32]string{
		0: "DCAC_ALERT_ECU_UNKOWN_UNSPECIFIED",
		1: "DCAC_ALERT_ECU_POD",
		2: "DCAC_ALERT_ECU_PINV",
	}
	TauxAlertA002_DcacAlert_Ecu_value = map[string]int32{
		"DCAC_ALERT_ECU_UNKOWN_UNSPECIFIED": 0,
		"DCAC_ALERT_ECU_POD":                1,
		"DCAC_ALERT_ECU_PINV":               2,
	}
)

func (x TauxAlertA002_DcacAlert_Ecu) Enum() *TauxAlertA002_DcacAlert_Ecu {
	p := new(TauxAlertA002_DcacAlert_Ecu)
	*p = x
	return p
}

func (x TauxAlertA002_DcacAlert_Ecu) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TauxAlertA002_DcacAlert_Ecu) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[6].Descriptor()
}

func (TauxAlertA002_DcacAlert_Ecu) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[6]
}

func (x TauxAlertA002_DcacAlert_Ecu) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TauxAlertA002_DcacAlert_Ecu.Descriptor instead.
func (TauxAlertA002_DcacAlert_Ecu) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 1, 0}
}

type AXXX_Reserved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy float32 `protobuf:"fixed32,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *AXXX_Reserved) Reset() {
	*x = AXXX_Reserved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AXXX_Reserved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AXXX_Reserved) ProtoMessage() {}

func (x *AXXX_Reserved) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AXXX_Reserved.ProtoReflect.Descriptor instead.
func (*AXXX_Reserved) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0}
}

func (x *AXXX_Reserved) GetDummy() float32 {
	if x != nil {
		return x.Dummy
	}
	return 0
}

type StibAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId   StibAlert_AlertId    `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=StibAlert_AlertId" json:"alert_id,omitempty"`
	StibIndex uint32               `protobuf:"varint,2,opt,name=stib_index,json=stibIndex,proto3" json:"stib_index,omitempty"`
	Data      *StibAlert_AlertData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StibAlert) Reset() {
	*x = StibAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlert) ProtoMessage() {}

func (x *StibAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlert.ProtoReflect.Descriptor instead.
func (*StibAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1}
}

func (x *StibAlert) GetAlertId() StibAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return StibAlert_STIB_NONE
}

func (x *StibAlert) GetStibIndex() uint32 {
	if x != nil {
		return x.StibIndex
	}
	return 0
}

func (x *StibAlert) GetData() *StibAlert_AlertData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FibAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId FibAlert_AlertId    `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=FibAlert_AlertId" json:"alert_id,omitempty"`
	Data    *FibAlert_AlertData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FibAlert) Reset() {
	*x = FibAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlert) ProtoMessage() {}

func (x *FibAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlert.ProtoReflect.Descriptor instead.
func (*FibAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2}
}

func (x *FibAlert) GetAlertId() FibAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return FibAlert_FIB_NONE
}

func (x *FibAlert) GetData() *FibAlert_AlertData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FxrAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId FxrAlert_AlertId    `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=FxrAlert_AlertId" json:"alert_id,omitempty"`
	Data    *FxrAlert_AlertData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FxrAlert) Reset() {
	*x = FxrAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlert) ProtoMessage() {}

func (x *FxrAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlert.ProtoReflect.Descriptor instead.
func (*FxrAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3}
}

func (x *FxrAlert) GetAlertId() FxrAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return FxrAlert_FXR_NONE
}

func (x *FxrAlert) GetData() *FxrAlert_AlertData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DcacAlertMatrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix0 uint32 `protobuf:"varint,1,opt,name=matrix0,proto3" json:"matrix0,omitempty"`
	Matrix1 uint32 `protobuf:"varint,2,opt,name=matrix1,proto3" json:"matrix1,omitempty"`
	Matrix2 uint32 `protobuf:"varint,3,opt,name=matrix2,proto3" json:"matrix2,omitempty"`
	Matrix3 uint32 `protobuf:"varint,4,opt,name=matrix3,proto3" json:"matrix3,omitempty"`
}

func (x *DcacAlertMatrices) Reset() {
	*x = DcacAlertMatrices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DcacAlertMatrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DcacAlertMatrices) ProtoMessage() {}

func (x *DcacAlertMatrices) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DcacAlertMatrices.ProtoReflect.Descriptor instead.
func (*DcacAlertMatrices) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{4}
}

func (x *DcacAlertMatrices) GetMatrix0() uint32 {
	if x != nil {
		return x.Matrix0
	}
	return 0
}

func (x *DcacAlertMatrices) GetMatrix1() uint32 {
	if x != nil {
		return x.Matrix1
	}
	return 0
}

func (x *DcacAlertMatrices) GetMatrix2() uint32 {
	if x != nil {
		return x.Matrix2
	}
	return 0
}

func (x *DcacAlertMatrices) GetMatrix3() uint32 {
	if x != nil {
		return x.Matrix3
	}
	return 0
}

type TauxAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId TauxAlert_AlertId    `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=TauxAlert_AlertId" json:"alert_id,omitempty"`
	Data    *TauxAlert_AlertData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TauxAlert) Reset() {
	*x = TauxAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlert) ProtoMessage() {}

func (x *TauxAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlert.ProtoReflect.Descriptor instead.
func (*TauxAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5}
}

func (x *TauxAlert) GetAlertId() TauxAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return TauxAlert_TAUX_NONE
}

func (x *TauxAlert) GetData() *TauxAlert_AlertData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AlertLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EcuAlert:
	//	*AlertLog_FxrAlert
	//	*AlertLog_FibAlert
	//	*AlertLog_StibAlert
	//	*AlertLog_TauxAlert
	EcuAlert isAlertLog_EcuAlert `protobuf_oneof:"EcuAlert"`
}

func (x *AlertLog) Reset() {
	*x = AlertLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertLog) ProtoMessage() {}

func (x *AlertLog) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertLog.ProtoReflect.Descriptor instead.
func (*AlertLog) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{6}
}

func (m *AlertLog) GetEcuAlert() isAlertLog_EcuAlert {
	if m != nil {
		return m.EcuAlert
	}
	return nil
}

func (x *AlertLog) GetFxrAlert() *FxrAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_FxrAlert); ok {
		return x.FxrAlert
	}
	return nil
}

func (x *AlertLog) GetFibAlert() *FibAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_FibAlert); ok {
		return x.FibAlert
	}
	return nil
}

func (x *AlertLog) GetStibAlert() *StibAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_StibAlert); ok {
		return x.StibAlert
	}
	return nil
}

func (x *AlertLog) GetTauxAlert() *TauxAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_TauxAlert); ok {
		return x.TauxAlert
	}
	return nil
}

type isAlertLog_EcuAlert interface {
	isAlertLog_EcuAlert()
}

type AlertLog_FxrAlert struct {
	FxrAlert *FxrAlert `protobuf:"bytes,1,opt,name=fxr_alert,json=fxrAlert,proto3,oneof"`
}

type AlertLog_FibAlert struct {
	FibAlert *FibAlert `protobuf:"bytes,2,opt,name=fib_alert,json=fibAlert,proto3,oneof"`
}

type AlertLog_StibAlert struct {
	StibAlert *StibAlert `protobuf:"bytes,3,opt,name=stib_alert,json=stibAlert,proto3,oneof"`
}

type AlertLog_TauxAlert struct {
	TauxAlert *TauxAlert `protobuf:"bytes,4,opt,name=taux_alert,json=tauxAlert,proto3,oneof"`
}

func (*AlertLog_FxrAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_FibAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_StibAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_TauxAlert) isAlertLog_EcuAlert() {}

type AlertMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertMatrices []uint32 `protobuf:"varint,1,rep,packed,name=alert_matrices,json=alertMatrices,proto3" json:"alert_matrices,omitempty"`
}

func (x *AlertMatrix) Reset() {
	*x = AlertMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertMatrix) ProtoMessage() {}

func (x *AlertMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertMatrix.ProtoReflect.Descriptor instead.
func (*AlertMatrix) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{7}
}

func (x *AlertMatrix) GetAlertMatrices() []uint32 {
	if x != nil {
		return x.AlertMatrices
	}
	return nil
}

type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AlertDetail:
	//	*Alerts_Log
	//	*Alerts_Matrix
	AlertDetail isAlerts_AlertDetail `protobuf_oneof:"AlertDetail"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{8}
}

func (m *Alerts) GetAlertDetail() isAlerts_AlertDetail {
	if m != nil {
		return m.AlertDetail
	}
	return nil
}

func (x *Alerts) GetLog() *AlertLog {
	if x, ok := x.GetAlertDetail().(*Alerts_Log); ok {
		return x.Log
	}
	return nil
}

func (x *Alerts) GetMatrix() *AlertMatrix {
	if x, ok := x.GetAlertDetail().(*Alerts_Matrix); ok {
		return x.Matrix
	}
	return nil
}

type isAlerts_AlertDetail interface {
	isAlerts_AlertDetail()
}

type Alerts_Log struct {
	Log *AlertLog `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type Alerts_Matrix struct {
	Matrix *AlertMatrix `protobuf:"bytes,2,opt,name=matrix,proto3,oneof"`
}

func (*Alerts_Log) isAlerts_AlertDetail() {}

func (*Alerts_Matrix) isAlerts_AlertDetail() {}

type StibAlertA004_CpuOverRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ISRTimeMax       float32 `protobuf:"fixed32,1,opt,name=ISR_time_max,json=ISRTimeMax,proto3" json:"ISR_time_max,omitempty"`                    // us
	F_1KHzTimeMax    float32 `protobuf:"fixed32,2,opt,name=f_1kHz_time_max,json=f1kHzTimeMax,proto3" json:"f_1kHz_time_max,omitempty"`            // us
	F_10HzTimeMax    float32 `protobuf:"fixed32,3,opt,name=f_10Hz_time_max,json=f10HzTimeMax,proto3" json:"f_10Hz_time_max,omitempty"`            // us
	F_100HzTimeMax   float32 `protobuf:"fixed32,4,opt,name=f_100Hz_time_max,json=f100HzTimeMax,proto3" json:"f_100Hz_time_max,omitempty"`         // us
	F_1KHzPriTimeMax float32 `protobuf:"fixed32,5,opt,name=f_1kHz_pri_time_max,json=f1kHzPriTimeMax,proto3" json:"f_1kHz_pri_time_max,omitempty"` // us
}

func (x *StibAlertA004_CpuOverRun) Reset() {
	*x = StibAlertA004_CpuOverRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA004_CpuOverRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA004_CpuOverRun) ProtoMessage() {}

func (x *StibAlertA004_CpuOverRun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA004_CpuOverRun.ProtoReflect.Descriptor instead.
func (*StibAlertA004_CpuOverRun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StibAlertA004_CpuOverRun) GetISRTimeMax() float32 {
	if x != nil {
		return x.ISRTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_1KHzTimeMax() float32 {
	if x != nil {
		return x.F_1KHzTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_10HzTimeMax() float32 {
	if x != nil {
		return x.F_10HzTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_100HzTimeMax() float32 {
	if x != nil {
		return x.F_100HzTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_1KHzPriTimeMax() float32 {
	if x != nil {
		return x.F_1KHzPriTimeMax
	}
	return 0
}

type StibAlertA007_TaskStackOverrun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task_Proto_Stack_Overrun    bool `protobuf:"varint,1,opt,name=Task_Proto_Stack_Overrun,json=TaskProtoStackOverrun,proto3" json:"Task_Proto_Stack_Overrun,omitempty"`
	Task_1KHz_Stack_Overrun     bool `protobuf:"varint,2,opt,name=Task_1kHz_Stack_Overrun,json=Task1kHzStackOverrun,proto3" json:"Task_1kHz_Stack_Overrun,omitempty"`
	Task_10Hz_Stack_Overrun     bool `protobuf:"varint,3,opt,name=Task_10Hz_Stack_Overrun,json=Task10HzStackOverrun,proto3" json:"Task_10Hz_Stack_Overrun,omitempty"`
	Task_Fs_Stack_Overrun       bool `protobuf:"varint,4,opt,name=Task_Fs_Stack_Overrun,json=TaskFsStackOverrun,proto3" json:"Task_Fs_Stack_Overrun,omitempty"`
	Task_CanTx_Stack_Overrun    bool `protobuf:"varint,5,opt,name=Task_CanTx_Stack_Overrun,json=TaskCanTxStackOverrun,proto3" json:"Task_CanTx_Stack_Overrun,omitempty"`
	Task_OsIdle_Stack_Overrun   bool `protobuf:"varint,6,opt,name=Task_OsIdle_Stack_Overrun,json=TaskOsIdleStackOverrun,proto3" json:"Task_OsIdle_Stack_Overrun,omitempty"`
	Task_100Hz_Stack_Overrun    bool `protobuf:"varint,7,opt,name=Task_100Hz_Stack_Overrun,json=Task100HzStackOverrun,proto3" json:"Task_100Hz_Stack_Overrun,omitempty"`
	Task_1KHz_Pri_Stack_Overrun bool `protobuf:"varint,8,opt,name=Task_1kHz_Pri_Stack_Overrun,json=Task1kHzPriStackOverrun,proto3" json:"Task_1kHz_Pri_Stack_Overrun,omitempty"`
}

func (x *StibAlertA007_TaskStackOverrun) Reset() {
	*x = StibAlertA007_TaskStackOverrun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA007_TaskStackOverrun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA007_TaskStackOverrun) ProtoMessage() {}

func (x *StibAlertA007_TaskStackOverrun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA007_TaskStackOverrun.ProtoReflect.Descriptor instead.
func (*StibAlertA007_TaskStackOverrun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_Proto_Stack_Overrun() bool {
	if x != nil {
		return x.Task_Proto_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_1KHz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_1KHz_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_10Hz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_10Hz_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_Fs_Stack_Overrun() bool {
	if x != nil {
		return x.Task_Fs_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_CanTx_Stack_Overrun() bool {
	if x != nil {
		return x.Task_CanTx_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_OsIdle_Stack_Overrun() bool {
	if x != nil {
		return x.Task_OsIdle_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_100Hz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_100Hz_Stack_Overrun
	}
	return false
}

func (x *StibAlertA007_TaskStackOverrun) GetTask_1KHz_Pri_Stack_Overrun() bool {
	if x != nil {
		return x.Task_1KHz_Pri_Stack_Overrun
	}
	return false
}

type StibAlertA009_PS24V struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibPs_24V    float32 `protobuf:"fixed32,1,opt,name=stib_ps_24v,json=stibPs24v,proto3" json:"stib_ps_24v,omitempty"`            // V
	StibRail_12V  float32 `protobuf:"fixed32,2,opt,name=stib_rail_12v,json=stibRail12v,proto3" json:"stib_rail_12v,omitempty"`      // V
	StibRailI_12V float32 `protobuf:"fixed32,3,opt,name=stib_rail_i_12v,json=stibRailI12v,proto3" json:"stib_rail_i_12v,omitempty"` // I
	StibRail_5V   float32 `protobuf:"fixed32,4,opt,name=stib_rail_5v,json=stibRail5v,proto3" json:"stib_rail_5v,omitempty"`         // V
	StibRail_3V3A float32 `protobuf:"fixed32,5,opt,name=stib_rail_3v3a,json=stibRail3v3a,proto3" json:"stib_rail_3v3a,omitempty"`   // V
}

func (x *StibAlertA009_PS24V) Reset() {
	*x = StibAlertA009_PS24V{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA009_PS24V) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA009_PS24V) ProtoMessage() {}

func (x *StibAlertA009_PS24V) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA009_PS24V.ProtoReflect.Descriptor instead.
func (*StibAlertA009_PS24V) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StibAlertA009_PS24V) GetStibPs_24V() float32 {
	if x != nil {
		return x.StibPs_24V
	}
	return 0
}

func (x *StibAlertA009_PS24V) GetStibRail_12V() float32 {
	if x != nil {
		return x.StibRail_12V
	}
	return 0
}

func (x *StibAlertA009_PS24V) GetStibRailI_12V() float32 {
	if x != nil {
		return x.StibRailI_12V
	}
	return 0
}

func (x *StibAlertA009_PS24V) GetStibRail_5V() float32 {
	if x != nil {
		return x.StibRail_5V
	}
	return 0
}

func (x *StibAlertA009_PS24V) GetStibRail_3V3A() float32 {
	if x != nil {
		return x.StibRail_3V3A
	}
	return 0
}

type StibAlertA010_EnumerationWriteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StibAlertA010_EnumerationWriteFail) Reset() {
	*x = StibAlertA010_EnumerationWriteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA010_EnumerationWriteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA010_EnumerationWriteFail) ProtoMessage() {}

func (x *StibAlertA010_EnumerationWriteFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA010_EnumerationWriteFail.ProtoReflect.Descriptor instead.
func (*StibAlertA010_EnumerationWriteFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 3}
}

type StibAlertA011_CurrentSensorHwOC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage     float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage  float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1       float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2       float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	Iphase_1OvrPos bool    `protobuf:"varint,5,opt,name=iphase_1_ovr_pos,json=iphase1OvrPos,proto3" json:"iphase_1_ovr_pos,omitempty"`
	Iphase_1OvrNeg bool    `protobuf:"varint,6,opt,name=iphase_1_ovr_neg,json=iphase1OvrNeg,proto3" json:"iphase_1_ovr_neg,omitempty"`
	Iphase_2OvrPos bool    `protobuf:"varint,7,opt,name=iphase_2_ovr_pos,json=iphase2OvrPos,proto3" json:"iphase_2_ovr_pos,omitempty"`
	Iphase_2OvrNeg bool    `protobuf:"varint,8,opt,name=iphase_2_ovr_neg,json=iphase2OvrNeg,proto3" json:"iphase_2_ovr_neg,omitempty"`
}

func (x *StibAlertA011_CurrentSensorHwOC) Reset() {
	*x = StibAlertA011_CurrentSensorHwOC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA011_CurrentSensorHwOC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA011_CurrentSensorHwOC) ProtoMessage() {}

func (x *StibAlertA011_CurrentSensorHwOC) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA011_CurrentSensorHwOC.ProtoReflect.Descriptor instead.
func (*StibAlertA011_CurrentSensorHwOC) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 4}
}

func (x *StibAlertA011_CurrentSensorHwOC) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA011_CurrentSensorHwOC) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA011_CurrentSensorHwOC) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA011_CurrentSensorHwOC) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA011_CurrentSensorHwOC) GetIphase_1OvrPos() bool {
	if x != nil {
		return x.Iphase_1OvrPos
	}
	return false
}

func (x *StibAlertA011_CurrentSensorHwOC) GetIphase_1OvrNeg() bool {
	if x != nil {
		return x.Iphase_1OvrNeg
	}
	return false
}

func (x *StibAlertA011_CurrentSensorHwOC) GetIphase_2OvrPos() bool {
	if x != nil {
		return x.Iphase_2OvrPos
	}
	return false
}

func (x *StibAlertA011_CurrentSensorHwOC) GetIphase_2OvrNeg() bool {
	if x != nil {
		return x.Iphase_2OvrNeg
	}
	return false
}

type StibAlertA012_ComparatorHwOC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage     float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage  float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1       float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2       float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	Iphase_1OvrPos bool    `protobuf:"varint,5,opt,name=iphase_1_ovr_pos,json=iphase1OvrPos,proto3" json:"iphase_1_ovr_pos,omitempty"`
	Iphase_1OvrNeg bool    `protobuf:"varint,6,opt,name=iphase_1_ovr_neg,json=iphase1OvrNeg,proto3" json:"iphase_1_ovr_neg,omitempty"`
	Iphase_2OvrPos bool    `protobuf:"varint,7,opt,name=iphase_2_ovr_pos,json=iphase2OvrPos,proto3" json:"iphase_2_ovr_pos,omitempty"`
	Iphase_2OvrNeg bool    `protobuf:"varint,8,opt,name=iphase_2_ovr_neg,json=iphase2OvrNeg,proto3" json:"iphase_2_ovr_neg,omitempty"`
}

func (x *StibAlertA012_ComparatorHwOC) Reset() {
	*x = StibAlertA012_ComparatorHwOC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA012_ComparatorHwOC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA012_ComparatorHwOC) ProtoMessage() {}

func (x *StibAlertA012_ComparatorHwOC) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA012_ComparatorHwOC.ProtoReflect.Descriptor instead.
func (*StibAlertA012_ComparatorHwOC) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 5}
}

func (x *StibAlertA012_ComparatorHwOC) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA012_ComparatorHwOC) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA012_ComparatorHwOC) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA012_ComparatorHwOC) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA012_ComparatorHwOC) GetIphase_1OvrPos() bool {
	if x != nil {
		return x.Iphase_1OvrPos
	}
	return false
}

func (x *StibAlertA012_ComparatorHwOC) GetIphase_1OvrNeg() bool {
	if x != nil {
		return x.Iphase_1OvrNeg
	}
	return false
}

func (x *StibAlertA012_ComparatorHwOC) GetIphase_2OvrPos() bool {
	if x != nil {
		return x.Iphase_2OvrPos
	}
	return false
}

func (x *StibAlertA012_ComparatorHwOC) GetIphase_2OvrNeg() bool {
	if x != nil {
		return x.Iphase_2OvrNeg
	}
	return false
}

type StibAlertA013_SwOC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage    float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1      float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2      float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	ConvIout      float32 `protobuf:"fixed32,5,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"`                // A
}

func (x *StibAlertA013_SwOC) Reset() {
	*x = StibAlertA013_SwOC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA013_SwOC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA013_SwOC) ProtoMessage() {}

func (x *StibAlertA013_SwOC) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA013_SwOC.ProtoReflect.Descriptor instead.
func (*StibAlertA013_SwOC) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 6}
}

func (x *StibAlertA013_SwOC) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA013_SwOC) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA013_SwOC) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA013_SwOC) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA013_SwOC) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

type StibAlertA014_BusUV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage    float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1      float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2      float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	ConvIout      float32 `protobuf:"fixed32,5,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"`                // A
}

func (x *StibAlertA014_BusUV) Reset() {
	*x = StibAlertA014_BusUV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA014_BusUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA014_BusUV) ProtoMessage() {}

func (x *StibAlertA014_BusUV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA014_BusUV.ProtoReflect.Descriptor instead.
func (*StibAlertA014_BusUV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 7}
}

func (x *StibAlertA014_BusUV) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA014_BusUV) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA014_BusUV) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA014_BusUV) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA014_BusUV) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

type StibAlertA015_BusOV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage    float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1      float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2      float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	ConvIout      float32 `protobuf:"fixed32,5,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"`                // A
}

func (x *StibAlertA015_BusOV) Reset() {
	*x = StibAlertA015_BusOV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA015_BusOV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA015_BusOV) ProtoMessage() {}

func (x *StibAlertA015_BusOV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA015_BusOV.ProtoReflect.Descriptor instead.
func (*StibAlertA015_BusOV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 8}
}

func (x *StibAlertA015_BusOV) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA015_BusOV) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA015_BusOV) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA015_BusOV) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA015_BusOV) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

type StibAlertA016_StringOV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage    float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1      float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2      float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	ConvIout      float32 `protobuf:"fixed32,5,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"`                // A
}

func (x *StibAlertA016_StringOV) Reset() {
	*x = StibAlertA016_StringOV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA016_StringOV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA016_StringOV) ProtoMessage() {}

func (x *StibAlertA016_StringOV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA016_StringOV.ProtoReflect.Descriptor instead.
func (*StibAlertA016_StringOV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 9}
}

func (x *StibAlertA016_StringOV) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA016_StringOV) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA016_StringOV) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA016_StringOV) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA016_StringOV) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

type StibAlertA017_StringUV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage    float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`          // V
	StringVoltage float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	Iphase_1      float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`                   // A
	Iphase_2      float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`                   // A
	ConvIout      float32 `protobuf:"fixed32,5,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"`                // A
}

func (x *StibAlertA017_StringUV) Reset() {
	*x = StibAlertA017_StringUV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA017_StringUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA017_StringUV) ProtoMessage() {}

func (x *StibAlertA017_StringUV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA017_StringUV.ProtoReflect.Descriptor instead.
func (*StibAlertA017_StringUV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 10}
}

func (x *StibAlertA017_StringUV) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibAlertA017_StringUV) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA017_StringUV) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA017_StringUV) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

func (x *StibAlertA017_StringUV) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

type StibAlertA018_SwitchTempTooHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tphase_1    float32 `protobuf:"fixed32,1,opt,name=tphase_1,json=tphase1,proto3" json:"tphase_1,omitempty"` // degC
	Tphase_2    float32 `protobuf:"fixed32,2,opt,name=tphase_2,json=tphase2,proto3" json:"tphase_2,omitempty"` // degC
	Tphase_1Ovr bool    `protobuf:"varint,3,opt,name=tphase_1_ovr,json=tphase1Ovr,proto3" json:"tphase_1_ovr,omitempty"`
	Tphase_2Ovr bool    `protobuf:"varint,4,opt,name=tphase_2_ovr,json=tphase2Ovr,proto3" json:"tphase_2_ovr,omitempty"`
}

func (x *StibAlertA018_SwitchTempTooHigh) Reset() {
	*x = StibAlertA018_SwitchTempTooHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA018_SwitchTempTooHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA018_SwitchTempTooHigh) ProtoMessage() {}

func (x *StibAlertA018_SwitchTempTooHigh) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA018_SwitchTempTooHigh.ProtoReflect.Descriptor instead.
func (*StibAlertA018_SwitchTempTooHigh) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 11}
}

func (x *StibAlertA018_SwitchTempTooHigh) GetTphase_1() float32 {
	if x != nil {
		return x.Tphase_1
	}
	return 0
}

func (x *StibAlertA018_SwitchTempTooHigh) GetTphase_2() float32 {
	if x != nil {
		return x.Tphase_2
	}
	return 0
}

func (x *StibAlertA018_SwitchTempTooHigh) GetTphase_1Ovr() bool {
	if x != nil {
		return x.Tphase_1Ovr
	}
	return false
}

func (x *StibAlertA018_SwitchTempTooHigh) GetTphase_2Ovr() bool {
	if x != nil {
		return x.Tphase_2Ovr
	}
	return false
}

type StibAlertA020_VoltageMatchingTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringVoltage float32 `protobuf:"fixed32,1,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"` // V
	VoltageTarget float32 `protobuf:"fixed32,2,opt,name=voltage_target,json=voltageTarget,proto3" json:"voltage_target,omitempty"` // V
	CellStateReq  uint32  `protobuf:"varint,3,opt,name=cell_state_req,json=cellStateReq,proto3" json:"cell_state_req,omitempty"`
}

func (x *StibAlertA020_VoltageMatchingTimeout) Reset() {
	*x = StibAlertA020_VoltageMatchingTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA020_VoltageMatchingTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA020_VoltageMatchingTimeout) ProtoMessage() {}

func (x *StibAlertA020_VoltageMatchingTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA020_VoltageMatchingTimeout.ProtoReflect.Descriptor instead.
func (*StibAlertA020_VoltageMatchingTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 12}
}

func (x *StibAlertA020_VoltageMatchingTimeout) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA020_VoltageMatchingTimeout) GetVoltageTarget() float32 {
	if x != nil {
		return x.VoltageTarget
	}
	return 0
}

func (x *StibAlertA020_VoltageMatchingTimeout) GetCellStateReq() uint32 {
	if x != nil {
		return x.CellStateReq
	}
	return 0
}

type StibAlertA024IrefCorrectionIrrational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CibIout  float32 `protobuf:"fixed32,1,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`    // A
	ConvIout float32 `protobuf:"fixed32,2,opt,name=conv_iout,json=convIout,proto3" json:"conv_iout,omitempty"` // A
	Iphase_1 float32 `protobuf:"fixed32,3,opt,name=iphase_1,json=iphase1,proto3" json:"iphase_1,omitempty"`    // A
	Iphase_2 float32 `protobuf:"fixed32,4,opt,name=iphase_2,json=iphase2,proto3" json:"iphase_2,omitempty"`    // A
}

func (x *StibAlertA024IrefCorrectionIrrational) Reset() {
	*x = StibAlertA024IrefCorrectionIrrational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA024IrefCorrectionIrrational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA024IrefCorrectionIrrational) ProtoMessage() {}

func (x *StibAlertA024IrefCorrectionIrrational) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA024IrefCorrectionIrrational.ProtoReflect.Descriptor instead.
func (*StibAlertA024IrefCorrectionIrrational) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 13}
}

func (x *StibAlertA024IrefCorrectionIrrational) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

func (x *StibAlertA024IrefCorrectionIrrational) GetConvIout() float32 {
	if x != nil {
		return x.ConvIout
	}
	return 0
}

func (x *StibAlertA024IrefCorrectionIrrational) GetIphase_1() float32 {
	if x != nil {
		return x.Iphase_1
	}
	return 0
}

func (x *StibAlertA024IrefCorrectionIrrational) GetIphase_2() float32 {
	if x != nil {
		return x.Iphase_2
	}
	return 0
}

type StibAlertA025_Rail12V struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibPs_24V    float32 `protobuf:"fixed32,1,opt,name=stib_ps_24v,json=stibPs24v,proto3" json:"stib_ps_24v,omitempty"`            // V
	StibRail_12V  float32 `protobuf:"fixed32,2,opt,name=stib_rail_12v,json=stibRail12v,proto3" json:"stib_rail_12v,omitempty"`      // V
	StibRailI_12V float32 `protobuf:"fixed32,3,opt,name=stib_rail_i_12v,json=stibRailI12v,proto3" json:"stib_rail_i_12v,omitempty"` // I
	StibRail_5V   float32 `protobuf:"fixed32,4,opt,name=stib_rail_5v,json=stibRail5v,proto3" json:"stib_rail_5v,omitempty"`         // V
	StibRail_3V3A float32 `protobuf:"fixed32,5,opt,name=stib_rail_3v3a,json=stibRail3v3a,proto3" json:"stib_rail_3v3a,omitempty"`   // V
}

func (x *StibAlertA025_Rail12V) Reset() {
	*x = StibAlertA025_Rail12V{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA025_Rail12V) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA025_Rail12V) ProtoMessage() {}

func (x *StibAlertA025_Rail12V) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA025_Rail12V.ProtoReflect.Descriptor instead.
func (*StibAlertA025_Rail12V) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 14}
}

func (x *StibAlertA025_Rail12V) GetStibPs_24V() float32 {
	if x != nil {
		return x.StibPs_24V
	}
	return 0
}

func (x *StibAlertA025_Rail12V) GetStibRail_12V() float32 {
	if x != nil {
		return x.StibRail_12V
	}
	return 0
}

func (x *StibAlertA025_Rail12V) GetStibRailI_12V() float32 {
	if x != nil {
		return x.StibRailI_12V
	}
	return 0
}

func (x *StibAlertA025_Rail12V) GetStibRail_5V() float32 {
	if x != nil {
		return x.StibRail_5V
	}
	return 0
}

func (x *StibAlertA025_Rail12V) GetStibRail_3V3A() float32 {
	if x != nil {
		return x.StibRail_3V3A
	}
	return 0
}

type StibAlertA026_Rail5V struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibPs_24V    float32 `protobuf:"fixed32,1,opt,name=stib_ps_24v,json=stibPs24v,proto3" json:"stib_ps_24v,omitempty"`            // V
	StibRail_12V  float32 `protobuf:"fixed32,2,opt,name=stib_rail_12v,json=stibRail12v,proto3" json:"stib_rail_12v,omitempty"`      // V
	StibRailI_12V float32 `protobuf:"fixed32,3,opt,name=stib_rail_i_12v,json=stibRailI12v,proto3" json:"stib_rail_i_12v,omitempty"` // I
	StibRail_5V   float32 `protobuf:"fixed32,4,opt,name=stib_rail_5v,json=stibRail5v,proto3" json:"stib_rail_5v,omitempty"`         // V
	StibRail_3V3A float32 `protobuf:"fixed32,5,opt,name=stib_rail_3v3a,json=stibRail3v3a,proto3" json:"stib_rail_3v3a,omitempty"`   // V
}

func (x *StibAlertA026_Rail5V) Reset() {
	*x = StibAlertA026_Rail5V{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA026_Rail5V) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA026_Rail5V) ProtoMessage() {}

func (x *StibAlertA026_Rail5V) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA026_Rail5V.ProtoReflect.Descriptor instead.
func (*StibAlertA026_Rail5V) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 15}
}

func (x *StibAlertA026_Rail5V) GetStibPs_24V() float32 {
	if x != nil {
		return x.StibPs_24V
	}
	return 0
}

func (x *StibAlertA026_Rail5V) GetStibRail_12V() float32 {
	if x != nil {
		return x.StibRail_12V
	}
	return 0
}

func (x *StibAlertA026_Rail5V) GetStibRailI_12V() float32 {
	if x != nil {
		return x.StibRailI_12V
	}
	return 0
}

func (x *StibAlertA026_Rail5V) GetStibRail_5V() float32 {
	if x != nil {
		return x.StibRail_5V
	}
	return 0
}

func (x *StibAlertA026_Rail5V) GetStibRail_3V3A() float32 {
	if x != nil {
		return x.StibRail_3V3A
	}
	return 0
}

type StibAlertA027_Rail3V3A struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibPs_24V    float32 `protobuf:"fixed32,1,opt,name=stib_ps_24v,json=stibPs24v,proto3" json:"stib_ps_24v,omitempty"`            // V
	StibRail_12V  float32 `protobuf:"fixed32,2,opt,name=stib_rail_12v,json=stibRail12v,proto3" json:"stib_rail_12v,omitempty"`      // V
	StibRailI_12V float32 `protobuf:"fixed32,3,opt,name=stib_rail_i_12v,json=stibRailI12v,proto3" json:"stib_rail_i_12v,omitempty"` // I
	StibRail_5V   float32 `protobuf:"fixed32,4,opt,name=stib_rail_5v,json=stibRail5v,proto3" json:"stib_rail_5v,omitempty"`         // V
	StibRail_3V3A float32 `protobuf:"fixed32,5,opt,name=stib_rail_3v3a,json=stibRail3v3a,proto3" json:"stib_rail_3v3a,omitempty"`   // V
}

func (x *StibAlertA027_Rail3V3A) Reset() {
	*x = StibAlertA027_Rail3V3A{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA027_Rail3V3A) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA027_Rail3V3A) ProtoMessage() {}

func (x *StibAlertA027_Rail3V3A) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA027_Rail3V3A.ProtoReflect.Descriptor instead.
func (*StibAlertA027_Rail3V3A) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 16}
}

func (x *StibAlertA027_Rail3V3A) GetStibPs_24V() float32 {
	if x != nil {
		return x.StibPs_24V
	}
	return 0
}

func (x *StibAlertA027_Rail3V3A) GetStibRail_12V() float32 {
	if x != nil {
		return x.StibRail_12V
	}
	return 0
}

func (x *StibAlertA027_Rail3V3A) GetStibRailI_12V() float32 {
	if x != nil {
		return x.StibRailI_12V
	}
	return 0
}

func (x *StibAlertA027_Rail3V3A) GetStibRail_5V() float32 {
	if x != nil {
		return x.StibRail_5V
	}
	return 0
}

func (x *StibAlertA027_Rail3V3A) GetStibRail_3V3A() float32 {
	if x != nil {
		return x.StibRail_3V3A
	}
	return 0
}

type StibAlertA028_AppliedCurrentIsSaturated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppliedCurrentIsSaturated bool `protobuf:"varint,1,opt,name=AppliedCurrentIsSaturated,proto3" json:"AppliedCurrentIsSaturated,omitempty"`
}

func (x *StibAlertA028_AppliedCurrentIsSaturated) Reset() {
	*x = StibAlertA028_AppliedCurrentIsSaturated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA028_AppliedCurrentIsSaturated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA028_AppliedCurrentIsSaturated) ProtoMessage() {}

func (x *StibAlertA028_AppliedCurrentIsSaturated) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA028_AppliedCurrentIsSaturated.ProtoReflect.Descriptor instead.
func (*StibAlertA028_AppliedCurrentIsSaturated) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 17}
}

func (x *StibAlertA028_AppliedCurrentIsSaturated) GetAppliedCurrentIsSaturated() bool {
	if x != nil {
		return x.AppliedCurrentIsSaturated
	}
	return false
}

type StibAlertA029_CellSafetyCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
	CibIout     float32 `protobuf:"fixed32,3,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`             // A
}

func (x *StibAlertA029_CellSafetyCheckFailed) Reset() {
	*x = StibAlertA029_CellSafetyCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA029_CellSafetyCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA029_CellSafetyCheckFailed) ProtoMessage() {}

func (x *StibAlertA029_CellSafetyCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA029_CellSafetyCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA029_CellSafetyCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 18}
}

func (x *StibAlertA029_CellSafetyCheckFailed) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA029_CellSafetyCheckFailed) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA029_CellSafetyCheckFailed) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

type StibAlertA030_CellQualityCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
	CibIout     float32 `protobuf:"fixed32,3,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`             // A
}

func (x *StibAlertA030_CellQualityCheckFailed) Reset() {
	*x = StibAlertA030_CellQualityCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA030_CellQualityCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA030_CellQualityCheckFailed) ProtoMessage() {}

func (x *StibAlertA030_CellQualityCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA030_CellQualityCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA030_CellQualityCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 19}
}

func (x *StibAlertA030_CellQualityCheckFailed) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA030_CellQualityCheckFailed) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA030_CellQualityCheckFailed) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

type StibAlertA031_CellOV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
}

func (x *StibAlertA031_CellOV) Reset() {
	*x = StibAlertA031_CellOV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA031_CellOV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA031_CellOV) ProtoMessage() {}

func (x *StibAlertA031_CellOV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA031_CellOV.ProtoReflect.Descriptor instead.
func (*StibAlertA031_CellOV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 20}
}

func (x *StibAlertA031_CellOV) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA031_CellOV) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

type StibAlertA032_CellUV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
}

func (x *StibAlertA032_CellUV) Reset() {
	*x = StibAlertA032_CellUV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA032_CellUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA032_CellUV) ProtoMessage() {}

func (x *StibAlertA032_CellUV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA032_CellUV.ProtoReflect.Descriptor instead.
func (*StibAlertA032_CellUV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 21}
}

func (x *StibAlertA032_CellUV) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA032_CellUV) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

type StibAlertA034_PogoVIrrational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
	PogoVoltage float32 `protobuf:"fixed32,3,opt,name=pogo_voltage,json=pogoVoltage,proto3" json:"pogo_voltage,omitempty"` // V
	CibIout     float32 `protobuf:"fixed32,4,opt,name=cib_iout,json=cibIout,proto3" json:"cib_iout,omitempty"`             // A
	PogoR       float32 `protobuf:"fixed32,5,opt,name=pogo_r,json=pogoR,proto3" json:"pogo_r,omitempty"`                   // Ohm
}

func (x *StibAlertA034_PogoVIrrational) Reset() {
	*x = StibAlertA034_PogoVIrrational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA034_PogoVIrrational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA034_PogoVIrrational) ProtoMessage() {}

func (x *StibAlertA034_PogoVIrrational) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA034_PogoVIrrational.ProtoReflect.Descriptor instead.
func (*StibAlertA034_PogoVIrrational) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 22}
}

func (x *StibAlertA034_PogoVIrrational) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetPogoVoltage() float32 {
	if x != nil {
		return x.PogoVoltage
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetCibIout() float32 {
	if x != nil {
		return x.CibIout
	}
	return 0
}

func (x *StibAlertA034_PogoVIrrational) GetPogoR() float32 {
	if x != nil {
		return x.PogoR
	}
	return 0
}

type StibAlertA035_CibFaulted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringVoltage  float32 `protobuf:"fixed32,1,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"`
	ShuntCurrent   float32 `protobuf:"fixed32,2,opt,name=shunt_current,json=shuntCurrent,proto3" json:"shunt_current,omitempty"`
	CurrentPhase_1 float32 `protobuf:"fixed32,3,opt,name=current_phase_1,json=currentPhase1,proto3" json:"current_phase_1,omitempty"`
	CurrentPhase_2 float32 `protobuf:"fixed32,4,opt,name=current_phase_2,json=currentPhase2,proto3" json:"current_phase_2,omitempty"`
	CellSwitchMask uint32  `protobuf:"varint,5,opt,name=cell_switch_mask,json=cellSwitchMask,proto3" json:"cell_switch_mask,omitempty"`
}

func (x *StibAlertA035_CibFaulted) Reset() {
	*x = StibAlertA035_CibFaulted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA035_CibFaulted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA035_CibFaulted) ProtoMessage() {}

func (x *StibAlertA035_CibFaulted) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA035_CibFaulted.ProtoReflect.Descriptor instead.
func (*StibAlertA035_CibFaulted) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 23}
}

func (x *StibAlertA035_CibFaulted) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibAlertA035_CibFaulted) GetShuntCurrent() float32 {
	if x != nil {
		return x.ShuntCurrent
	}
	return 0
}

func (x *StibAlertA035_CibFaulted) GetCurrentPhase_1() float32 {
	if x != nil {
		return x.CurrentPhase_1
	}
	return 0
}

func (x *StibAlertA035_CibFaulted) GetCurrentPhase_2() float32 {
	if x != nil {
		return x.CurrentPhase_2
	}
	return 0
}

func (x *StibAlertA035_CibFaulted) GetCellSwitchMask() uint32 {
	if x != nil {
		return x.CellSwitchMask
	}
	return 0
}

type StibAlertA045_CIB_NegVoltageProtection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIndex              uint32  `protobuf:"varint,1,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
	NodeVoltage            float32 `protobuf:"fixed32,2,opt,name=node_voltage,json=nodeVoltage,proto3" json:"node_voltage,omitempty"` // V
	PogoVoltage            float32 `protobuf:"fixed32,3,opt,name=pogo_voltage,json=pogoVoltage,proto3" json:"pogo_voltage,omitempty"` // V
	Current                float32 `protobuf:"fixed32,4,opt,name=current,proto3" json:"current,omitempty"`                            // A
	Switches               uint32  `protobuf:"varint,5,opt,name=switches,proto3" json:"switches,omitempty"`
	CellSwitchActive       bool    `protobuf:"varint,6,opt,name=cell_switch_active,json=cellSwitchActive,proto3" json:"cell_switch_active,omitempty"`                     // is cell switching active
	CellSwitchTimer        uint32  `protobuf:"varint,7,opt,name=cell_switch_timer,json=cellSwitchTimer,proto3" json:"cell_switch_timer,omitempty"`                        // if cell switching active, time (ms) since since cell switching started
	CellSwitch             uint32  `protobuf:"varint,8,opt,name=cell_switch,json=cellSwitch,proto3" json:"cell_switch,omitempty"`                                         // recently completed cell switch mask
	CellSwitchTimerLatched uint32  `protobuf:"varint,9,opt,name=cell_switch_timer_latched,json=cellSwitchTimerLatched,proto3" json:"cell_switch_timer_latched,omitempty"` // recently recorded time (ms) to complete switching (above cell mask)
}

func (x *StibAlertA045_CIB_NegVoltageProtection) Reset() {
	*x = StibAlertA045_CIB_NegVoltageProtection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA045_CIB_NegVoltageProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA045_CIB_NegVoltageProtection) ProtoMessage() {}

func (x *StibAlertA045_CIB_NegVoltageProtection) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA045_CIB_NegVoltageProtection.ProtoReflect.Descriptor instead.
func (*StibAlertA045_CIB_NegVoltageProtection) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 24}
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetNodeIndex() uint32 {
	if x != nil {
		return x.NodeIndex
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetNodeVoltage() float32 {
	if x != nil {
		return x.NodeVoltage
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetPogoVoltage() float32 {
	if x != nil {
		return x.PogoVoltage
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetSwitches() uint32 {
	if x != nil {
		return x.Switches
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetCellSwitchActive() bool {
	if x != nil {
		return x.CellSwitchActive
	}
	return false
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetCellSwitchTimer() uint32 {
	if x != nil {
		return x.CellSwitchTimer
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetCellSwitch() uint32 {
	if x != nil {
		return x.CellSwitch
	}
	return 0
}

func (x *StibAlertA045_CIB_NegVoltageProtection) GetCellSwitchTimerLatched() uint32 {
	if x != nil {
		return x.CellSwitchTimerLatched
	}
	return 0
}

type StibAlertA036_CellTempTooHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermistorIndex uint32  `protobuf:"varint,1,opt,name=thermistor_index,json=thermistorIndex,proto3" json:"thermistor_index,omitempty"`
	Thermistor_T    float32 `protobuf:"fixed32,2,opt,name=thermistor_T,json=thermistorT,proto3" json:"thermistor_T,omitempty"` // degC
}

func (x *StibAlertA036_CellTempTooHigh) Reset() {
	*x = StibAlertA036_CellTempTooHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA036_CellTempTooHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA036_CellTempTooHigh) ProtoMessage() {}

func (x *StibAlertA036_CellTempTooHigh) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA036_CellTempTooHigh.ProtoReflect.Descriptor instead.
func (*StibAlertA036_CellTempTooHigh) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 25}
}

func (x *StibAlertA036_CellTempTooHigh) GetThermistorIndex() uint32 {
	if x != nil {
		return x.ThermistorIndex
	}
	return 0
}

func (x *StibAlertA036_CellTempTooHigh) GetThermistor_T() float32 {
	if x != nil {
		return x.Thermistor_T
	}
	return 0
}

type StibAlertA037_FormationTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibFormState StibFormState `protobuf:"varint,1,opt,name=stib_form_state,json=stibFormState,proto3,enum=StibFormState" json:"stib_form_state,omitempty"`
	StepTimeS     uint32        `protobuf:"varint,2,opt,name=step_time_s,json=stepTimeS,proto3" json:"step_time_s,omitempty"` // s
}

func (x *StibAlertA037_FormationTimeout) Reset() {
	*x = StibAlertA037_FormationTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA037_FormationTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA037_FormationTimeout) ProtoMessage() {}

func (x *StibAlertA037_FormationTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA037_FormationTimeout.ProtoReflect.Descriptor instead.
func (*StibAlertA037_FormationTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 26}
}

func (x *StibAlertA037_FormationTimeout) GetStibFormState() StibFormState {
	if x != nil {
		return x.StibFormState
	}
	return StibFormState_STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA037_FormationTimeout) GetStepTimeS() uint32 {
	if x != nil {
		return x.StepTimeS
	}
	return 0
}

type StibAlertA038_FormationCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibFormState StibFormState                                  `protobuf:"varint,1,opt,name=stib_form_state,json=stibFormState,proto3,enum=StibFormState" json:"stib_form_state,omitempty"`
	AlertReason   StibAlertA038_FormationCheckFailed_AlertReason `protobuf:"varint,2,opt,name=alert_reason,json=alertReason,proto3,enum=StibAlertA038_FormationCheckFailed_AlertReason" json:"alert_reason,omitempty"`
}

func (x *StibAlertA038_FormationCheckFailed) Reset() {
	*x = StibAlertA038_FormationCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA038_FormationCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA038_FormationCheckFailed) ProtoMessage() {}

func (x *StibAlertA038_FormationCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA038_FormationCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA038_FormationCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 27}
}

func (x *StibAlertA038_FormationCheckFailed) GetStibFormState() StibFormState {
	if x != nil {
		return x.StibFormState
	}
	return StibFormState_STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA038_FormationCheckFailed) GetAlertReason() StibAlertA038_FormationCheckFailed_AlertReason {
	if x != nil {
		return x.AlertReason
	}
	return StibAlertA038_FormationCheckFailed_none
}

type StibAlertA041_CIBDataInvalid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	REFONoff              bool    `protobuf:"varint,1,opt,name=REFONoff,proto3" json:"REFONoff,omitempty"`
	CelldataAdcDelayed    bool    `protobuf:"varint,2,opt,name=celldata_adc_delayed,json=celldataAdcDelayed,proto3" json:"celldata_adc_delayed,omitempty"`
	AuxAdcDelayed         bool    `protobuf:"varint,3,opt,name=aux_adc_delayed,json=auxAdcDelayed,proto3" json:"aux_adc_delayed,omitempty"`
	CelldataPecInvalid    bool    `protobuf:"varint,4,opt,name=celldata_pec_invalid,json=celldataPecInvalid,proto3" json:"celldata_pec_invalid,omitempty"`
	AuxDataPecInvalid     bool    `protobuf:"varint,5,opt,name=aux_data_pec_invalid,json=auxDataPecInvalid,proto3" json:"aux_data_pec_invalid,omitempty"`
	CommandCounterInvalid bool    `protobuf:"varint,6,opt,name=command_counter_invalid,json=commandCounterInvalid,proto3" json:"command_counter_invalid,omitempty"`
	ReadDmaFailed         bool    `protobuf:"varint,7,opt,name=read_dma_failed,json=readDmaFailed,proto3" json:"read_dma_failed,omitempty"`
	Vref2Invalid          bool    `protobuf:"varint,8,opt,name=vref2_invalid,json=vref2Invalid,proto3" json:"vref2_invalid,omitempty"`
	Vref2                 float32 `protobuf:"fixed32,9,opt,name=vref2,proto3" json:"vref2,omitempty"` // V
	IrefInvalid           bool    `protobuf:"varint,10,opt,name=Iref_invalid,json=IrefInvalid,proto3" json:"Iref_invalid,omitempty"`
	Iref                  float32 `protobuf:"fixed32,11,opt,name=Iref,proto3" json:"Iref,omitempty"` // V
	TdieInvalid           bool    `protobuf:"varint,12,opt,name=tdie_invalid,json=tdieInvalid,proto3" json:"tdie_invalid,omitempty"`
	Tdie                  float32 `protobuf:"fixed32,13,opt,name=tdie,proto3" json:"tdie,omitempty"` // V
	VaInvalid             bool    `protobuf:"varint,14,opt,name=va_invalid,json=vaInvalid,proto3" json:"va_invalid,omitempty"`
	Va                    float32 `protobuf:"fixed32,15,opt,name=va,proto3" json:"va,omitempty"` // V
	VdInvalid             bool    `protobuf:"varint,16,opt,name=vd_invalid,json=vdInvalid,proto3" json:"vd_invalid,omitempty"`
	Vd                    float32 `protobuf:"fixed32,17,opt,name=vd,proto3" json:"vd,omitempty"` // V
}

func (x *StibAlertA041_CIBDataInvalid) Reset() {
	*x = StibAlertA041_CIBDataInvalid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA041_CIBDataInvalid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA041_CIBDataInvalid) ProtoMessage() {}

func (x *StibAlertA041_CIBDataInvalid) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA041_CIBDataInvalid.ProtoReflect.Descriptor instead.
func (*StibAlertA041_CIBDataInvalid) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 28}
}

func (x *StibAlertA041_CIBDataInvalid) GetREFONoff() bool {
	if x != nil {
		return x.REFONoff
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetCelldataAdcDelayed() bool {
	if x != nil {
		return x.CelldataAdcDelayed
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetAuxAdcDelayed() bool {
	if x != nil {
		return x.AuxAdcDelayed
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetCelldataPecInvalid() bool {
	if x != nil {
		return x.CelldataPecInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetAuxDataPecInvalid() bool {
	if x != nil {
		return x.AuxDataPecInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetCommandCounterInvalid() bool {
	if x != nil {
		return x.CommandCounterInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetReadDmaFailed() bool {
	if x != nil {
		return x.ReadDmaFailed
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVref2Invalid() bool {
	if x != nil {
		return x.Vref2Invalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVref2() float32 {
	if x != nil {
		return x.Vref2
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetIrefInvalid() bool {
	if x != nil {
		return x.IrefInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetIref() float32 {
	if x != nil {
		return x.Iref
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetTdieInvalid() bool {
	if x != nil {
		return x.TdieInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetTdie() float32 {
	if x != nil {
		return x.Tdie
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetVaInvalid() bool {
	if x != nil {
		return x.VaInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVa() float32 {
	if x != nil {
		return x.Va
	}
	return 0
}

func (x *StibAlertA041_CIBDataInvalid) GetVdInvalid() bool {
	if x != nil {
		return x.VdInvalid
	}
	return false
}

func (x *StibAlertA041_CIBDataInvalid) GetVd() float32 {
	if x != nil {
		return x.Vd
	}
	return 0
}

type StibAlertA044_CIBCellSwitchWriteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellSwitchData    uint32 `protobuf:"varint,1,opt,name=cell_switch_data,json=cellSwitchData,proto3" json:"cell_switch_data,omitempty"`
	CellSwitchRequest uint32 `protobuf:"varint,2,opt,name=cell_switch_request,json=cellSwitchRequest,proto3" json:"cell_switch_request,omitempty"`
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) Reset() {
	*x = StibAlertA044_CIBCellSwitchWriteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA044_CIBCellSwitchWriteFail) ProtoMessage() {}

func (x *StibAlertA044_CIBCellSwitchWriteFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA044_CIBCellSwitchWriteFail.ProtoReflect.Descriptor instead.
func (*StibAlertA044_CIBCellSwitchWriteFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 29}
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) GetCellSwitchData() uint32 {
	if x != nil {
		return x.CellSwitchData
	}
	return 0
}

func (x *StibAlertA044_CIBCellSwitchWriteFail) GetCellSwitchRequest() uint32 {
	if x != nil {
		return x.CellSwitchRequest
	}
	return 0
}

type StibAlertA046_CIB_STIB_VStringDiffCheckFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CibStibVstringDiff float32 `protobuf:"fixed32,1,opt,name=cib_stib_vstring_diff,json=cibStibVstringDiff,proto3" json:"cib_stib_vstring_diff,omitempty"`
}

func (x *StibAlertA046_CIB_STIB_VStringDiffCheckFail) Reset() {
	*x = StibAlertA046_CIB_STIB_VStringDiffCheckFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA046_CIB_STIB_VStringDiffCheckFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA046_CIB_STIB_VStringDiffCheckFail) ProtoMessage() {}

func (x *StibAlertA046_CIB_STIB_VStringDiffCheckFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA046_CIB_STIB_VStringDiffCheckFail.ProtoReflect.Descriptor instead.
func (*StibAlertA046_CIB_STIB_VStringDiffCheckFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 30}
}

func (x *StibAlertA046_CIB_STIB_VStringDiffCheckFail) GetCibStibVstringDiff() float32 {
	if x != nil {
		return x.CibStibVstringDiff
	}
	return 0
}

type StibAlertA047_ShuntCalibrationFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ShuntCalStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ShuntCalStatus" json:"status,omitempty"`
	ICalA  float32        `protobuf:"fixed32,2,opt,name=i_cal_a,json=iCalA,proto3" json:"i_cal_a,omitempty"`
	ICalB  float32        `protobuf:"fixed32,3,opt,name=i_cal_b,json=iCalB,proto3" json:"i_cal_b,omitempty"`
	SidLsb uint32         `protobuf:"varint,4,opt,name=sid_lsb,json=sidLsb,proto3" json:"sid_lsb,omitempty"`
}

func (x *StibAlertA047_ShuntCalibrationFail) Reset() {
	*x = StibAlertA047_ShuntCalibrationFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA047_ShuntCalibrationFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA047_ShuntCalibrationFail) ProtoMessage() {}

func (x *StibAlertA047_ShuntCalibrationFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA047_ShuntCalibrationFail.ProtoReflect.Descriptor instead.
func (*StibAlertA047_ShuntCalibrationFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 31}
}

func (x *StibAlertA047_ShuntCalibrationFail) GetStatus() ShuntCalStatus {
	if x != nil {
		return x.Status
	}
	return ShuntCalStatus_SHUNT_CAL_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA047_ShuntCalibrationFail) GetICalA() float32 {
	if x != nil {
		return x.ICalA
	}
	return 0
}

func (x *StibAlertA047_ShuntCalibrationFail) GetICalB() float32 {
	if x != nil {
		return x.ICalB
	}
	return 0
}

func (x *StibAlertA047_ShuntCalibrationFail) GetSidLsb() uint32 {
	if x != nil {
		return x.SidLsb
	}
	return 0
}

type StibAlertA048_CIBCellSwitchWriteFailPermanent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellSwitchData    uint32 `protobuf:"varint,1,opt,name=cell_switch_data,json=cellSwitchData,proto3" json:"cell_switch_data,omitempty"`
	CellSwitchRequest uint32 `protobuf:"varint,2,opt,name=cell_switch_request,json=cellSwitchRequest,proto3" json:"cell_switch_request,omitempty"`
}

func (x *StibAlertA048_CIBCellSwitchWriteFailPermanent) Reset() {
	*x = StibAlertA048_CIBCellSwitchWriteFailPermanent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA048_CIBCellSwitchWriteFailPermanent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA048_CIBCellSwitchWriteFailPermanent) ProtoMessage() {}

func (x *StibAlertA048_CIBCellSwitchWriteFailPermanent) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA048_CIBCellSwitchWriteFailPermanent.ProtoReflect.Descriptor instead.
func (*StibAlertA048_CIBCellSwitchWriteFailPermanent) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 32}
}

func (x *StibAlertA048_CIBCellSwitchWriteFailPermanent) GetCellSwitchData() uint32 {
	if x != nil {
		return x.CellSwitchData
	}
	return 0
}

func (x *StibAlertA048_CIBCellSwitchWriteFailPermanent) GetCellSwitchRequest() uint32 {
	if x != nil {
		return x.CellSwitchRequest
	}
	return 0
}

type StibAlertA049_CellDvDtOutOfBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"`
	DvdtValue   float32 `protobuf:"fixed32,3,opt,name=dvdt_value,json=dvdtValue,proto3" json:"dvdt_value,omitempty"`
	Current     float32 `protobuf:"fixed32,4,opt,name=current,proto3" json:"current,omitempty"`
	CellAh      float32 `protobuf:"fixed32,5,opt,name=cell_ah,json=cellAh,proto3" json:"cell_ah,omitempty"`
}

func (x *StibAlertA049_CellDvDtOutOfBounds) Reset() {
	*x = StibAlertA049_CellDvDtOutOfBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA049_CellDvDtOutOfBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA049_CellDvDtOutOfBounds) ProtoMessage() {}

func (x *StibAlertA049_CellDvDtOutOfBounds) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA049_CellDvDtOutOfBounds.ProtoReflect.Descriptor instead.
func (*StibAlertA049_CellDvDtOutOfBounds) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 33}
}

func (x *StibAlertA049_CellDvDtOutOfBounds) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA049_CellDvDtOutOfBounds) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA049_CellDvDtOutOfBounds) GetDvdtValue() float32 {
	if x != nil {
		return x.DvdtValue
	}
	return 0
}

func (x *StibAlertA049_CellDvDtOutOfBounds) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *StibAlertA049_CellDvDtOutOfBounds) GetCellAh() float32 {
	if x != nil {
		return x.CellAh
	}
	return 0
}

type StibAlertA050_CellDetectMIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellDetectMiaIndex uint32  `protobuf:"varint,1,opt,name=cell_detect_mia_index,json=cellDetectMiaIndex,proto3" json:"cell_detect_mia_index,omitempty"`
	CellVoltage        float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"`
	CellResistance     float32 `protobuf:"fixed32,3,opt,name=cell_resistance,json=cellResistance,proto3" json:"cell_resistance,omitempty"`
}

func (x *StibAlertA050_CellDetectMIA) Reset() {
	*x = StibAlertA050_CellDetectMIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA050_CellDetectMIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA050_CellDetectMIA) ProtoMessage() {}

func (x *StibAlertA050_CellDetectMIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA050_CellDetectMIA.ProtoReflect.Descriptor instead.
func (*StibAlertA050_CellDetectMIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 34}
}

func (x *StibAlertA050_CellDetectMIA) GetCellDetectMiaIndex() uint32 {
	if x != nil {
		return x.CellDetectMiaIndex
	}
	return 0
}

func (x *StibAlertA050_CellDetectMIA) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

func (x *StibAlertA050_CellDetectMIA) GetCellResistance() float32 {
	if x != nil {
		return x.CellResistance
	}
	return 0
}

type StibAlertA051_ParamLimitVoltageCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellNum     uint32           `protobuf:"varint,1,opt,name=cellNum,proto3" json:"cellNum,omitempty"`
	StepNum     uint32           `protobuf:"varint,2,opt,name=stepNum,proto3" json:"stepNum,omitempty"`
	LimitActive ParamLimitActive `protobuf:"varint,3,opt,name=limit_active,json=limitActive,proto3,enum=ParamLimitActive" json:"limit_active,omitempty"`
	Value       float32          `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
	Status      CellStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=CellStatus" json:"status,omitempty"`
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) Reset() {
	*x = StibAlertA051_ParamLimitVoltageCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA051_ParamLimitVoltageCheckFailed) ProtoMessage() {}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA051_ParamLimitVoltageCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA051_ParamLimitVoltageCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 35}
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) GetCellNum() uint32 {
	if x != nil {
		return x.CellNum
	}
	return 0
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) GetStepNum() uint32 {
	if x != nil {
		return x.StepNum
	}
	return 0
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) GetLimitActive() ParamLimitActive {
	if x != nil {
		return x.LimitActive
	}
	return ParamLimitActive_PARAM_LIMIT_ACTIVE_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StibAlertA051_ParamLimitVoltageCheckFailed) GetStatus() CellStatus {
	if x != nil {
		return x.Status
	}
	return CellStatus_CELL_STATUS_NONE_UNSPECIFIED
}

type StibAlertA052_ParamLimitDvDtCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellNum     uint32           `protobuf:"varint,1,opt,name=cellNum,proto3" json:"cellNum,omitempty"`
	StepNum     uint32           `protobuf:"varint,2,opt,name=stepNum,proto3" json:"stepNum,omitempty"`
	LimitActive ParamLimitActive `protobuf:"varint,3,opt,name=limit_active,json=limitActive,proto3,enum=ParamLimitActive" json:"limit_active,omitempty"`
	Value       float32          `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
	Status      CellStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=CellStatus" json:"status,omitempty"`
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) Reset() {
	*x = StibAlertA052_ParamLimitDvDtCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA052_ParamLimitDvDtCheckFailed) ProtoMessage() {}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA052_ParamLimitDvDtCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA052_ParamLimitDvDtCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 36}
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) GetCellNum() uint32 {
	if x != nil {
		return x.CellNum
	}
	return 0
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) GetStepNum() uint32 {
	if x != nil {
		return x.StepNum
	}
	return 0
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) GetLimitActive() ParamLimitActive {
	if x != nil {
		return x.LimitActive
	}
	return ParamLimitActive_PARAM_LIMIT_ACTIVE_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StibAlertA052_ParamLimitDvDtCheckFailed) GetStatus() CellStatus {
	if x != nil {
		return x.Status
	}
	return CellStatus_CELL_STATUS_NONE_UNSPECIFIED
}

type StibAlertA053_ParamLimitTempCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThermistorIndex uint32           `protobuf:"varint,1,opt,name=thermistor_index,json=thermistorIndex,proto3" json:"thermistor_index,omitempty"`
	StepNum         uint32           `protobuf:"varint,2,opt,name=stepNum,proto3" json:"stepNum,omitempty"`
	LimitActive     ParamLimitActive `protobuf:"varint,3,opt,name=limit_active,json=limitActive,proto3,enum=ParamLimitActive" json:"limit_active,omitempty"`
	Value           float32          `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
	Status          CellStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=CellStatus" json:"status,omitempty"`
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) Reset() {
	*x = StibAlertA053_ParamLimitTempCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA053_ParamLimitTempCheckFailed) ProtoMessage() {}

func (x *StibAlertA053_ParamLimitTempCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA053_ParamLimitTempCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA053_ParamLimitTempCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 37}
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) GetThermistorIndex() uint32 {
	if x != nil {
		return x.ThermistorIndex
	}
	return 0
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) GetStepNum() uint32 {
	if x != nil {
		return x.StepNum
	}
	return 0
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) GetLimitActive() ParamLimitActive {
	if x != nil {
		return x.LimitActive
	}
	return ParamLimitActive_PARAM_LIMIT_ACTIVE_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StibAlertA053_ParamLimitTempCheckFailed) GetStatus() CellStatus {
	if x != nil {
		return x.Status
	}
	return CellStatus_CELL_STATUS_NONE_UNSPECIFIED
}

type StibAlertA054_ParamLimitCapacityCheckFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellNum     uint32           `protobuf:"varint,1,opt,name=cellNum,proto3" json:"cellNum,omitempty"`
	StepNum     uint32           `protobuf:"varint,2,opt,name=stepNum,proto3" json:"stepNum,omitempty"`
	LimitActive ParamLimitActive `protobuf:"varint,3,opt,name=limit_active,json=limitActive,proto3,enum=ParamLimitActive" json:"limit_active,omitempty"`
	Value       float32          `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
	Status      CellStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=CellStatus" json:"status,omitempty"`
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) Reset() {
	*x = StibAlertA054_ParamLimitCapacityCheckFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA054_ParamLimitCapacityCheckFailed) ProtoMessage() {}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA054_ParamLimitCapacityCheckFailed.ProtoReflect.Descriptor instead.
func (*StibAlertA054_ParamLimitCapacityCheckFailed) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 38}
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) GetCellNum() uint32 {
	if x != nil {
		return x.CellNum
	}
	return 0
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) GetStepNum() uint32 {
	if x != nil {
		return x.StepNum
	}
	return 0
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) GetLimitActive() ParamLimitActive {
	if x != nil {
		return x.LimitActive
	}
	return ParamLimitActive_PARAM_LIMIT_ACTIVE_UNKNOWN_UNSPECIFIED
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StibAlertA054_ParamLimitCapacityCheckFailed) GetStatus() CellStatus {
	if x != nil {
		return x.Status
	}
	return CellStatus_CELL_STATUS_NONE_UNSPECIFIED
}

type StibAlert_AlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*StibAlert_AlertData_A003
	//	*StibAlert_AlertData_A004
	//	*StibAlert_AlertData_A005
	//	*StibAlert_AlertData_A006
	//	*StibAlert_AlertData_A007
	//	*StibAlert_AlertData_A008
	//	*StibAlert_AlertData_A009
	//	*StibAlert_AlertData_A010
	//	*StibAlert_AlertData_A011
	//	*StibAlert_AlertData_A012
	//	*StibAlert_AlertData_A013
	//	*StibAlert_AlertData_A014
	//	*StibAlert_AlertData_A015
	//	*StibAlert_AlertData_A016
	//	*StibAlert_AlertData_A017
	//	*StibAlert_AlertData_A018
	//	*StibAlert_AlertData_A019
	//	*StibAlert_AlertData_A020
	//	*StibAlert_AlertData_A021
	//	*StibAlert_AlertData_A022
	//	*StibAlert_AlertData_A023
	//	*StibAlert_AlertData_A024
	//	*StibAlert_AlertData_A025
	//	*StibAlert_AlertData_A026
	//	*StibAlert_AlertData_A027
	//	*StibAlert_AlertData_A028
	//	*StibAlert_AlertData_A029
	//	*StibAlert_AlertData_A030
	//	*StibAlert_AlertData_A031
	//	*StibAlert_AlertData_A032
	//	*StibAlert_AlertData_A033
	//	*StibAlert_AlertData_A034
	//	*StibAlert_AlertData_A035
	//	*StibAlert_AlertData_A036
	//	*StibAlert_AlertData_A037
	//	*StibAlert_AlertData_A038
	//	*StibAlert_AlertData_A039
	//	*StibAlert_AlertData_A040
	//	*StibAlert_AlertData_A041
	//	*StibAlert_AlertData_A042
	//	*StibAlert_AlertData_A043
	//	*StibAlert_AlertData_A044
	//	*StibAlert_AlertData_A045
	//	*StibAlert_AlertData_A046
	//	*StibAlert_AlertData_A047
	//	*StibAlert_AlertData_A048
	//	*StibAlert_AlertData_A049
	//	*StibAlert_AlertData_A050
	//	*StibAlert_AlertData_A051
	//	*StibAlert_AlertData_A052
	//	*StibAlert_AlertData_A053
	//	*StibAlert_AlertData_A054
	Payload isStibAlert_AlertData_Payload `protobuf_oneof:"Payload"`
}

func (x *StibAlert_AlertData) Reset() {
	*x = StibAlert_AlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlert_AlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlert_AlertData) ProtoMessage() {}

func (x *StibAlert_AlertData) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlert_AlertData.ProtoReflect.Descriptor instead.
func (*StibAlert_AlertData) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 39}
}

func (m *StibAlert_AlertData) GetPayload() isStibAlert_AlertData_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *StibAlert_AlertData) GetA003() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A003); ok {
		return x.A003
	}
	return nil
}

func (x *StibAlert_AlertData) GetA004() *StibAlertA004_CpuOverRun {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A004); ok {
		return x.A004
	}
	return nil
}

func (x *StibAlert_AlertData) GetA005() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A005); ok {
		return x.A005
	}
	return nil
}

func (x *StibAlert_AlertData) GetA006() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A006); ok {
		return x.A006
	}
	return nil
}

func (x *StibAlert_AlertData) GetA007() *StibAlertA007_TaskStackOverrun {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A007); ok {
		return x.A007
	}
	return nil
}

func (x *StibAlert_AlertData) GetA008() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A008); ok {
		return x.A008
	}
	return nil
}

func (x *StibAlert_AlertData) GetA009() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A009); ok {
		return x.A009
	}
	return nil
}

func (x *StibAlert_AlertData) GetA010() *StibAlertA010_EnumerationWriteFail {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A010); ok {
		return x.A010
	}
	return nil
}

func (x *StibAlert_AlertData) GetA011() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A011); ok {
		return x.A011
	}
	return nil
}

func (x *StibAlert_AlertData) GetA012() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A012); ok {
		return x.A012
	}
	return nil
}

func (x *StibAlert_AlertData) GetA013() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A013); ok {
		return x.A013
	}
	return nil
}

func (x *StibAlert_AlertData) GetA014() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A014); ok {
		return x.A014
	}
	return nil
}

func (x *StibAlert_AlertData) GetA015() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A015); ok {
		return x.A015
	}
	return nil
}

func (x *StibAlert_AlertData) GetA016() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A016); ok {
		return x.A016
	}
	return nil
}

func (x *StibAlert_AlertData) GetA017() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A017); ok {
		return x.A017
	}
	return nil
}

func (x *StibAlert_AlertData) GetA018() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A018); ok {
		return x.A018
	}
	return nil
}

func (x *StibAlert_AlertData) GetA019() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A019); ok {
		return x.A019
	}
	return nil
}

func (x *StibAlert_AlertData) GetA020() *StibAlertA020_VoltageMatchingTimeout {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A020); ok {
		return x.A020
	}
	return nil
}

func (x *StibAlert_AlertData) GetA021() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A021); ok {
		return x.A021
	}
	return nil
}

func (x *StibAlert_AlertData) GetA022() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A022); ok {
		return x.A022
	}
	return nil
}

func (x *StibAlert_AlertData) GetA023() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A023); ok {
		return x.A023
	}
	return nil
}

func (x *StibAlert_AlertData) GetA024() *StibAlertA024IrefCorrectionIrrational {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A024); ok {
		return x.A024
	}
	return nil
}

func (x *StibAlert_AlertData) GetA025() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A025); ok {
		return x.A025
	}
	return nil
}

func (x *StibAlert_AlertData) GetA026() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A026); ok {
		return x.A026
	}
	return nil
}

func (x *StibAlert_AlertData) GetA027() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A027); ok {
		return x.A027
	}
	return nil
}

func (x *StibAlert_AlertData) GetA028() *StibAlertA028_AppliedCurrentIsSaturated {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A028); ok {
		return x.A028
	}
	return nil
}

func (x *StibAlert_AlertData) GetA029() *StibAlertA029_CellSafetyCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A029); ok {
		return x.A029
	}
	return nil
}

func (x *StibAlert_AlertData) GetA030() *StibAlertA030_CellQualityCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A030); ok {
		return x.A030
	}
	return nil
}

func (x *StibAlert_AlertData) GetA031() *StibAlertA031_CellOV {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A031); ok {
		return x.A031
	}
	return nil
}

func (x *StibAlert_AlertData) GetA032() *StibAlertA032_CellUV {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A032); ok {
		return x.A032
	}
	return nil
}

func (x *StibAlert_AlertData) GetA033() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A033); ok {
		return x.A033
	}
	return nil
}

func (x *StibAlert_AlertData) GetA034() *StibAlertA034_PogoVIrrational {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A034); ok {
		return x.A034
	}
	return nil
}

func (x *StibAlert_AlertData) GetA035() *StibAlertA035_CibFaulted {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A035); ok {
		return x.A035
	}
	return nil
}

func (x *StibAlert_AlertData) GetA036() *StibAlertA036_CellTempTooHigh {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A036); ok {
		return x.A036
	}
	return nil
}

func (x *StibAlert_AlertData) GetA037() *StibAlertA037_FormationTimeout {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A037); ok {
		return x.A037
	}
	return nil
}

func (x *StibAlert_AlertData) GetA038() *StibAlertA038_FormationCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A038); ok {
		return x.A038
	}
	return nil
}

func (x *StibAlert_AlertData) GetA039() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A039); ok {
		return x.A039
	}
	return nil
}

func (x *StibAlert_AlertData) GetA040() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A040); ok {
		return x.A040
	}
	return nil
}

func (x *StibAlert_AlertData) GetA041() *StibAlertA041_CIBDataInvalid {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A041); ok {
		return x.A041
	}
	return nil
}

func (x *StibAlert_AlertData) GetA042() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A042); ok {
		return x.A042
	}
	return nil
}

func (x *StibAlert_AlertData) GetA043() *AXXX_Reserved {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A043); ok {
		return x.A043
	}
	return nil
}

func (x *StibAlert_AlertData) GetA044() *StibAlertA044_CIBCellSwitchWriteFail {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A044); ok {
		return x.A044
	}
	return nil
}

func (x *StibAlert_AlertData) GetA045() *StibAlertA045_CIB_NegVoltageProtection {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A045); ok {
		return x.A045
	}
	return nil
}

func (x *StibAlert_AlertData) GetA046() *StibAlertA046_CIB_STIB_VStringDiffCheckFail {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A046); ok {
		return x.A046
	}
	return nil
}

func (x *StibAlert_AlertData) GetA047() *StibAlertA047_ShuntCalibrationFail {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A047); ok {
		return x.A047
	}
	return nil
}

func (x *StibAlert_AlertData) GetA048() *StibAlertA048_CIBCellSwitchWriteFailPermanent {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A048); ok {
		return x.A048
	}
	return nil
}

func (x *StibAlert_AlertData) GetA049() *StibAlertA049_CellDvDtOutOfBounds {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A049); ok {
		return x.A049
	}
	return nil
}

func (x *StibAlert_AlertData) GetA050() *StibAlertA050_CellDetectMIA {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A050); ok {
		return x.A050
	}
	return nil
}

func (x *StibAlert_AlertData) GetA051() *StibAlertA051_ParamLimitVoltageCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A051); ok {
		return x.A051
	}
	return nil
}

func (x *StibAlert_AlertData) GetA052() *StibAlertA052_ParamLimitDvDtCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A052); ok {
		return x.A052
	}
	return nil
}

func (x *StibAlert_AlertData) GetA053() *StibAlertA053_ParamLimitTempCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A053); ok {
		return x.A053
	}
	return nil
}

func (x *StibAlert_AlertData) GetA054() *StibAlertA054_ParamLimitCapacityCheckFailed {
	if x, ok := x.GetPayload().(*StibAlert_AlertData_A054); ok {
		return x.A054
	}
	return nil
}

type isStibAlert_AlertData_Payload interface {
	isStibAlert_AlertData_Payload()
}

type StibAlert_AlertData_A003 struct {
	A003 *AXXX_Reserved `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

type StibAlert_AlertData_A004 struct {
	A004 *StibAlertA004_CpuOverRun `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type StibAlert_AlertData_A005 struct {
	A005 *AXXX_Reserved `protobuf:"bytes,5,opt,name=a005,proto3,oneof"`
}

type StibAlert_AlertData_A006 struct {
	A006 *AXXX_Reserved `protobuf:"bytes,6,opt,name=a006,proto3,oneof"`
}

type StibAlert_AlertData_A007 struct {
	A007 *StibAlertA007_TaskStackOverrun `protobuf:"bytes,7,opt,name=a007,proto3,oneof"`
}

type StibAlert_AlertData_A008 struct {
	A008 *AXXX_Reserved `protobuf:"bytes,8,opt,name=a008,proto3,oneof"`
}

type StibAlert_AlertData_A009 struct {
	A009 *AXXX_Reserved `protobuf:"bytes,9,opt,name=a009,proto3,oneof"`
}

type StibAlert_AlertData_A010 struct {
	A010 *StibAlertA010_EnumerationWriteFail `protobuf:"bytes,10,opt,name=a010,proto3,oneof"`
}

type StibAlert_AlertData_A011 struct {
	A011 *AXXX_Reserved `protobuf:"bytes,11,opt,name=a011,proto3,oneof"`
}

type StibAlert_AlertData_A012 struct {
	A012 *AXXX_Reserved `protobuf:"bytes,12,opt,name=a012,proto3,oneof"`
}

type StibAlert_AlertData_A013 struct {
	A013 *AXXX_Reserved `protobuf:"bytes,13,opt,name=a013,proto3,oneof"`
}

type StibAlert_AlertData_A014 struct {
	A014 *AXXX_Reserved `protobuf:"bytes,14,opt,name=a014,proto3,oneof"`
}

type StibAlert_AlertData_A015 struct {
	A015 *AXXX_Reserved `protobuf:"bytes,15,opt,name=a015,proto3,oneof"`
}

type StibAlert_AlertData_A016 struct {
	A016 *AXXX_Reserved `protobuf:"bytes,16,opt,name=a016,proto3,oneof"`
}

type StibAlert_AlertData_A017 struct {
	A017 *AXXX_Reserved `protobuf:"bytes,17,opt,name=a017,proto3,oneof"`
}

type StibAlert_AlertData_A018 struct {
	A018 *AXXX_Reserved `protobuf:"bytes,18,opt,name=a018,proto3,oneof"`
}

type StibAlert_AlertData_A019 struct {
	A019 *AXXX_Reserved `protobuf:"bytes,19,opt,name=a019,proto3,oneof"`
}

type StibAlert_AlertData_A020 struct {
	A020 *StibAlertA020_VoltageMatchingTimeout `protobuf:"bytes,20,opt,name=a020,proto3,oneof"`
}

type StibAlert_AlertData_A021 struct {
	A021 *AXXX_Reserved `protobuf:"bytes,21,opt,name=a021,proto3,oneof"`
}

type StibAlert_AlertData_A022 struct {
	A022 *AXXX_Reserved `protobuf:"bytes,22,opt,name=a022,proto3,oneof"`
}

type StibAlert_AlertData_A023 struct {
	A023 *AXXX_Reserved `protobuf:"bytes,23,opt,name=a023,proto3,oneof"`
}

type StibAlert_AlertData_A024 struct {
	A024 *StibAlertA024IrefCorrectionIrrational `protobuf:"bytes,24,opt,name=a024,proto3,oneof"`
}

type StibAlert_AlertData_A025 struct {
	A025 *AXXX_Reserved `protobuf:"bytes,25,opt,name=a025,proto3,oneof"`
}

type StibAlert_AlertData_A026 struct {
	A026 *AXXX_Reserved `protobuf:"bytes,26,opt,name=a026,proto3,oneof"`
}

type StibAlert_AlertData_A027 struct {
	A027 *AXXX_Reserved `protobuf:"bytes,27,opt,name=a027,proto3,oneof"`
}

type StibAlert_AlertData_A028 struct {
	A028 *StibAlertA028_AppliedCurrentIsSaturated `protobuf:"bytes,28,opt,name=a028,proto3,oneof"`
}

type StibAlert_AlertData_A029 struct {
	A029 *StibAlertA029_CellSafetyCheckFailed `protobuf:"bytes,29,opt,name=a029,proto3,oneof"`
}

type StibAlert_AlertData_A030 struct {
	A030 *StibAlertA030_CellQualityCheckFailed `protobuf:"bytes,30,opt,name=a030,proto3,oneof"`
}

type StibAlert_AlertData_A031 struct {
	A031 *StibAlertA031_CellOV `protobuf:"bytes,31,opt,name=a031,proto3,oneof"`
}

type StibAlert_AlertData_A032 struct {
	A032 *StibAlertA032_CellUV `protobuf:"bytes,32,opt,name=a032,proto3,oneof"`
}

type StibAlert_AlertData_A033 struct {
	A033 *AXXX_Reserved `protobuf:"bytes,33,opt,name=a033,proto3,oneof"`
}

type StibAlert_AlertData_A034 struct {
	A034 *StibAlertA034_PogoVIrrational `protobuf:"bytes,34,opt,name=a034,proto3,oneof"`
}

type StibAlert_AlertData_A035 struct {
	A035 *StibAlertA035_CibFaulted `protobuf:"bytes,35,opt,name=a035,proto3,oneof"`
}

type StibAlert_AlertData_A036 struct {
	A036 *StibAlertA036_CellTempTooHigh `protobuf:"bytes,36,opt,name=a036,proto3,oneof"`
}

type StibAlert_AlertData_A037 struct {
	A037 *StibAlertA037_FormationTimeout `protobuf:"bytes,37,opt,name=a037,proto3,oneof"`
}

type StibAlert_AlertData_A038 struct {
	A038 *StibAlertA038_FormationCheckFailed `protobuf:"bytes,38,opt,name=a038,proto3,oneof"`
}

type StibAlert_AlertData_A039 struct {
	A039 *AXXX_Reserved `protobuf:"bytes,39,opt,name=a039,proto3,oneof"`
}

type StibAlert_AlertData_A040 struct {
	A040 *AXXX_Reserved `protobuf:"bytes,40,opt,name=a040,proto3,oneof"`
}

type StibAlert_AlertData_A041 struct {
	A041 *StibAlertA041_CIBDataInvalid `protobuf:"bytes,41,opt,name=a041,proto3,oneof"`
}

type StibAlert_AlertData_A042 struct {
	A042 *AXXX_Reserved `protobuf:"bytes,42,opt,name=a042,proto3,oneof"`
}

type StibAlert_AlertData_A043 struct {
	A043 *AXXX_Reserved `protobuf:"bytes,43,opt,name=a043,proto3,oneof"`
}

type StibAlert_AlertData_A044 struct {
	A044 *StibAlertA044_CIBCellSwitchWriteFail `protobuf:"bytes,44,opt,name=a044,proto3,oneof"`
}

type StibAlert_AlertData_A045 struct {
	A045 *StibAlertA045_CIB_NegVoltageProtection `protobuf:"bytes,45,opt,name=a045,proto3,oneof"`
}

type StibAlert_AlertData_A046 struct {
	A046 *StibAlertA046_CIB_STIB_VStringDiffCheckFail `protobuf:"bytes,46,opt,name=a046,proto3,oneof"`
}

type StibAlert_AlertData_A047 struct {
	A047 *StibAlertA047_ShuntCalibrationFail `protobuf:"bytes,47,opt,name=a047,proto3,oneof"`
}

type StibAlert_AlertData_A048 struct {
	A048 *StibAlertA048_CIBCellSwitchWriteFailPermanent `protobuf:"bytes,48,opt,name=a048,proto3,oneof"`
}

type StibAlert_AlertData_A049 struct {
	A049 *StibAlertA049_CellDvDtOutOfBounds `protobuf:"bytes,49,opt,name=a049,proto3,oneof"`
}

type StibAlert_AlertData_A050 struct {
	A050 *StibAlertA050_CellDetectMIA `protobuf:"bytes,50,opt,name=a050,proto3,oneof"`
}

type StibAlert_AlertData_A051 struct {
	A051 *StibAlertA051_ParamLimitVoltageCheckFailed `protobuf:"bytes,51,opt,name=a051,proto3,oneof"`
}

type StibAlert_AlertData_A052 struct {
	A052 *StibAlertA052_ParamLimitDvDtCheckFailed `protobuf:"bytes,52,opt,name=a052,proto3,oneof"`
}

type StibAlert_AlertData_A053 struct {
	A053 *StibAlertA053_ParamLimitTempCheckFailed `protobuf:"bytes,53,opt,name=a053,proto3,oneof"`
}

type StibAlert_AlertData_A054 struct {
	A054 *StibAlertA054_ParamLimitCapacityCheckFailed `protobuf:"bytes,54,opt,name=a054,proto3,oneof"`
}

func (*StibAlert_AlertData_A003) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A004) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A005) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A006) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A007) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A008) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A009) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A010) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A011) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A012) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A013) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A014) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A015) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A016) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A017) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A018) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A019) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A020) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A021) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A022) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A023) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A024) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A025) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A026) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A027) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A028) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A029) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A030) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A031) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A032) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A033) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A034) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A035) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A036) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A037) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A038) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A039) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A040) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A041) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A042) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A043) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A044) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A045) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A046) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A047) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A048) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A049) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A050) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A051) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A052) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A053) isStibAlert_AlertData_Payload() {}

func (*StibAlert_AlertData_A054) isStibAlert_AlertData_Payload() {}

type FibAlertA002WatchdogExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId float32 `protobuf:"fixed32,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // us
	AppCRC float32 `protobuf:"fixed32,2,opt,name=AppCRC,proto3" json:"AppCRC,omitempty"` // us
}

func (x *FibAlertA002WatchdogExpired) Reset() {
	*x = FibAlertA002WatchdogExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA002WatchdogExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA002WatchdogExpired) ProtoMessage() {}

func (x *FibAlertA002WatchdogExpired) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA002WatchdogExpired.ProtoReflect.Descriptor instead.
func (*FibAlertA002WatchdogExpired) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FibAlertA002WatchdogExpired) GetTaskId() float32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FibAlertA002WatchdogExpired) GetAppCRC() float32 {
	if x != nil {
		return x.AppCRC
	}
	return 0
}

type FibAlertA003InternalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FibAlertA003InternalFault) Reset() {
	*x = FibAlertA003InternalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA003InternalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA003InternalFault) ProtoMessage() {}

func (x *FibAlertA003InternalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA003InternalFault.ProtoReflect.Descriptor instead.
func (*FibAlertA003InternalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 1}
}

type FibAlertA004_FanRpmFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanIndex   uint32  `protobuf:"varint,1,opt,name=fan_index,json=fanIndex,proto3" json:"fan_index,omitempty"`
	FanRpm     uint32  `protobuf:"varint,2,opt,name=fan_rpm,json=fanRpm,proto3" json:"fan_rpm,omitempty"` // rpm
	FanPwmDuty uint32  `protobuf:"varint,3,opt,name=fan_pwm_duty,json=fanPwmDuty,proto3" json:"fan_pwm_duty,omitempty"`
	FanCurrent float32 `protobuf:"fixed32,4,opt,name=fan_current,json=fanCurrent,proto3" json:"fan_current,omitempty"` // A
}

func (x *FibAlertA004_FanRpmFault) Reset() {
	*x = FibAlertA004_FanRpmFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA004_FanRpmFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA004_FanRpmFault) ProtoMessage() {}

func (x *FibAlertA004_FanRpmFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA004_FanRpmFault.ProtoReflect.Descriptor instead.
func (*FibAlertA004_FanRpmFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 2}
}

func (x *FibAlertA004_FanRpmFault) GetFanIndex() uint32 {
	if x != nil {
		return x.FanIndex
	}
	return 0
}

func (x *FibAlertA004_FanRpmFault) GetFanRpm() uint32 {
	if x != nil {
		return x.FanRpm
	}
	return 0
}

func (x *FibAlertA004_FanRpmFault) GetFanPwmDuty() uint32 {
	if x != nil {
		return x.FanPwmDuty
	}
	return 0
}

func (x *FibAlertA004_FanRpmFault) GetFanCurrent() float32 {
	if x != nil {
		return x.FanCurrent
	}
	return 0
}

type FibAlertA005_FanTotalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanTotal       uint32  `protobuf:"varint,1,opt,name=fan_total,json=fanTotal,proto3" json:"fan_total,omitempty"`
	FanCurrent     float32 `protobuf:"fixed32,2,opt,name=fan_current,json=fanCurrent,proto3" json:"fan_current,omitempty"` // A
	FanBitPosition uint32  `protobuf:"varint,3,opt,name=fan_bit_position,json=fanBitPosition,proto3" json:"fan_bit_position,omitempty"`
}

func (x *FibAlertA005_FanTotalFault) Reset() {
	*x = FibAlertA005_FanTotalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA005_FanTotalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA005_FanTotalFault) ProtoMessage() {}

func (x *FibAlertA005_FanTotalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA005_FanTotalFault.ProtoReflect.Descriptor instead.
func (*FibAlertA005_FanTotalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 3}
}

func (x *FibAlertA005_FanTotalFault) GetFanTotal() uint32 {
	if x != nil {
		return x.FanTotal
	}
	return 0
}

func (x *FibAlertA005_FanTotalFault) GetFanCurrent() float32 {
	if x != nil {
		return x.FanCurrent
	}
	return 0
}

func (x *FibAlertA005_FanTotalFault) GetFanBitPosition() uint32 {
	if x != nil {
		return x.FanBitPosition
	}
	return 0
}

type FibAlertA006_FanRationalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanIndex       uint32 `protobuf:"varint,1,opt,name=fan_index,json=fanIndex,proto3" json:"fan_index,omitempty"`
	FanRpmMeasured uint32 `protobuf:"varint,2,opt,name=fan_rpm_measured,json=fanRpmMeasured,proto3" json:"fan_rpm_measured,omitempty"` // rpm
	FanRpmRequest  uint32 `protobuf:"varint,3,opt,name=fan_rpm_request,json=fanRpmRequest,proto3" json:"fan_rpm_request,omitempty"`    // rpm
	FanPwmDuty     uint32 `protobuf:"varint,4,opt,name=fan_pwm_duty,json=fanPwmDuty,proto3" json:"fan_pwm_duty,omitempty"`
}

func (x *FibAlertA006_FanRationalFault) Reset() {
	*x = FibAlertA006_FanRationalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA006_FanRationalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA006_FanRationalFault) ProtoMessage() {}

func (x *FibAlertA006_FanRationalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA006_FanRationalFault.ProtoReflect.Descriptor instead.
func (*FibAlertA006_FanRationalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 4}
}

func (x *FibAlertA006_FanRationalFault) GetFanIndex() uint32 {
	if x != nil {
		return x.FanIndex
	}
	return 0
}

func (x *FibAlertA006_FanRationalFault) GetFanRpmMeasured() uint32 {
	if x != nil {
		return x.FanRpmMeasured
	}
	return 0
}

func (x *FibAlertA006_FanRationalFault) GetFanRpmRequest() uint32 {
	if x != nil {
		return x.FanRpmRequest
	}
	return 0
}

func (x *FibAlertA006_FanRationalFault) GetFanPwmDuty() uint32 {
	if x != nil {
		return x.FanPwmDuty
	}
	return 0
}

type FibAlertA007_CpuOverRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ISRTimeMax    float32 `protobuf:"fixed32,1,opt,name=ISR_time_max,json=ISRTimeMax,proto3" json:"ISR_time_max,omitempty"`         // us
	F_1KHzTimeMax float32 `protobuf:"fixed32,2,opt,name=f_1kHz_time_max,json=f1kHzTimeMax,proto3" json:"f_1kHz_time_max,omitempty"` // us
	F_10HzTimeMax float32 `protobuf:"fixed32,3,opt,name=f_10Hz_time_max,json=f10HzTimeMax,proto3" json:"f_10Hz_time_max,omitempty"` // us
}

func (x *FibAlertA007_CpuOverRun) Reset() {
	*x = FibAlertA007_CpuOverRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA007_CpuOverRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA007_CpuOverRun) ProtoMessage() {}

func (x *FibAlertA007_CpuOverRun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA007_CpuOverRun.ProtoReflect.Descriptor instead.
func (*FibAlertA007_CpuOverRun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 5}
}

func (x *FibAlertA007_CpuOverRun) GetISRTimeMax() float32 {
	if x != nil {
		return x.ISRTimeMax
	}
	return 0
}

func (x *FibAlertA007_CpuOverRun) GetF_1KHzTimeMax() float32 {
	if x != nil {
		return x.F_1KHzTimeMax
	}
	return 0
}

func (x *FibAlertA007_CpuOverRun) GetF_10HzTimeMax() float32 {
	if x != nil {
		return x.F_10HzTimeMax
	}
	return 0
}

type FibAlertA008_TaskStackOverrun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task_Proto_Stack_Overrun   bool `protobuf:"varint,1,opt,name=Task_Proto_Stack_Overrun,json=TaskProtoStackOverrun,proto3" json:"Task_Proto_Stack_Overrun,omitempty"`
	Task_1KHz_Stack_Overrun    bool `protobuf:"varint,2,opt,name=Task_1kHz_Stack_Overrun,json=Task1kHzStackOverrun,proto3" json:"Task_1kHz_Stack_Overrun,omitempty"`
	Task_1Hz_Stack_Overrun     bool `protobuf:"varint,3,opt,name=Task_1Hz_Stack_Overrun,json=Task1HzStackOverrun,proto3" json:"Task_1Hz_Stack_Overrun,omitempty"`
	Task_10Hz_Stack_Overrun    bool `protobuf:"varint,4,opt,name=Task_10Hz_Stack_Overrun,json=Task10HzStackOverrun,proto3" json:"Task_10Hz_Stack_Overrun,omitempty"`
	Task_CANtx_Stack_Overrun   bool `protobuf:"varint,5,opt,name=Task_CANtx_Stack_Overrun,json=TaskCANtxStackOverrun,proto3" json:"Task_CANtx_Stack_Overrun,omitempty"`
	Task_OSIdle_Stack_Overrun  bool `protobuf:"varint,6,opt,name=Task_OSIdle_Stack_Overrun,json=TaskOSIdleStackOverrun,proto3" json:"Task_OSIdle_Stack_Overrun,omitempty"`
	Task_OSTimer_Stack_Overrun bool `protobuf:"varint,7,opt,name=Task_OSTimer_Stack_Overrun,json=TaskOSTimerStackOverrun,proto3" json:"Task_OSTimer_Stack_Overrun,omitempty"`
}

func (x *FibAlertA008_TaskStackOverrun) Reset() {
	*x = FibAlertA008_TaskStackOverrun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA008_TaskStackOverrun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA008_TaskStackOverrun) ProtoMessage() {}

func (x *FibAlertA008_TaskStackOverrun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA008_TaskStackOverrun.ProtoReflect.Descriptor instead.
func (*FibAlertA008_TaskStackOverrun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 6}
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_Proto_Stack_Overrun() bool {
	if x != nil {
		return x.Task_Proto_Stack_Overrun
	}
	return false
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_1KHz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_1KHz_Stack_Overrun
	}
	return false
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_1Hz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_1Hz_Stack_Overrun
	}
	return false
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_10Hz_Stack_Overrun() bool {
	if x != nil {
		return x.Task_10Hz_Stack_Overrun
	}
	return false
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_CANtx_Stack_Overrun() bool {
	if x != nil {
		return x.Task_CANtx_Stack_Overrun
	}
	return false
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_OSIdle_Stack_Overrun() bool {
	if x != nil {
		return x.Task_OSIdle_Stack_Overrun
	}
	return false
}

func (x *FibAlertA008_TaskStackOverrun) GetTask_OSTimer_Stack_Overrun() bool {
	if x != nil {
		return x.Task_OSTimer_Stack_Overrun
	}
	return false
}

type FibAlertA009_FIBrxCommandMIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FibAlertA009_FIBrxCommandMIA) Reset() {
	*x = FibAlertA009_FIBrxCommandMIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA009_FIBrxCommandMIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA009_FIBrxCommandMIA) ProtoMessage() {}

func (x *FibAlertA009_FIBrxCommandMIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA009_FIBrxCommandMIA.ProtoReflect.Descriptor instead.
func (*FibAlertA009_FIBrxCommandMIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 7}
}

type FibAlert_AlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*FibAlert_AlertData_A002
	//	*FibAlert_AlertData_A003
	//	*FibAlert_AlertData_A004
	//	*FibAlert_AlertData_A005
	//	*FibAlert_AlertData_A006
	//	*FibAlert_AlertData_A007
	//	*FibAlert_AlertData_A008
	//	*FibAlert_AlertData_A009
	Payload isFibAlert_AlertData_Payload `protobuf_oneof:"Payload"`
}

func (x *FibAlert_AlertData) Reset() {
	*x = FibAlert_AlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlert_AlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlert_AlertData) ProtoMessage() {}

func (x *FibAlert_AlertData) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlert_AlertData.ProtoReflect.Descriptor instead.
func (*FibAlert_AlertData) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 8}
}

func (m *FibAlert_AlertData) GetPayload() isFibAlert_AlertData_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *FibAlert_AlertData) GetA002() *FibAlertA002WatchdogExpired {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A002); ok {
		return x.A002
	}
	return nil
}

func (x *FibAlert_AlertData) GetA003() *FibAlertA003InternalFault {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A003); ok {
		return x.A003
	}
	return nil
}

func (x *FibAlert_AlertData) GetA004() *FibAlertA004_FanRpmFault {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A004); ok {
		return x.A004
	}
	return nil
}

func (x *FibAlert_AlertData) GetA005() *FibAlertA005_FanTotalFault {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A005); ok {
		return x.A005
	}
	return nil
}

func (x *FibAlert_AlertData) GetA006() *FibAlertA006_FanRationalFault {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A006); ok {
		return x.A006
	}
	return nil
}

func (x *FibAlert_AlertData) GetA007() *FibAlertA007_CpuOverRun {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A007); ok {
		return x.A007
	}
	return nil
}

func (x *FibAlert_AlertData) GetA008() *FibAlertA008_TaskStackOverrun {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A008); ok {
		return x.A008
	}
	return nil
}

func (x *FibAlert_AlertData) GetA009() *FibAlertA009_FIBrxCommandMIA {
	if x, ok := x.GetPayload().(*FibAlert_AlertData_A009); ok {
		return x.A009
	}
	return nil
}

type isFibAlert_AlertData_Payload interface {
	isFibAlert_AlertData_Payload()
}

type FibAlert_AlertData_A002 struct {
	A002 *FibAlertA002WatchdogExpired `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type FibAlert_AlertData_A003 struct {
	A003 *FibAlertA003InternalFault `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

type FibAlert_AlertData_A004 struct {
	A004 *FibAlertA004_FanRpmFault `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type FibAlert_AlertData_A005 struct {
	A005 *FibAlertA005_FanTotalFault `protobuf:"bytes,5,opt,name=a005,proto3,oneof"`
}

type FibAlert_AlertData_A006 struct {
	A006 *FibAlertA006_FanRationalFault `protobuf:"bytes,6,opt,name=a006,proto3,oneof"`
}

type FibAlert_AlertData_A007 struct {
	A007 *FibAlertA007_CpuOverRun `protobuf:"bytes,7,opt,name=a007,proto3,oneof"`
}

type FibAlert_AlertData_A008 struct {
	A008 *FibAlertA008_TaskStackOverrun `protobuf:"bytes,8,opt,name=a008,proto3,oneof"`
}

type FibAlert_AlertData_A009 struct {
	A009 *FibAlertA009_FIBrxCommandMIA `protobuf:"bytes,9,opt,name=a009,proto3,oneof"`
}

func (*FibAlert_AlertData_A002) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A003) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A004) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A005) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A006) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A007) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A008) isFibAlert_AlertData_Payload() {}

func (*FibAlert_AlertData_A009) isFibAlert_AlertData_Payload() {}

type FxrAlertA001_SwAppBoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA001_SwAppBoot) Reset() {
	*x = FxrAlertA001_SwAppBoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA001_SwAppBoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA001_SwAppBoot) ProtoMessage() {}

func (x *FxrAlertA001_SwAppBoot) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA001_SwAppBoot.ProtoReflect.Descriptor instead.
func (*FxrAlertA001_SwAppBoot) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 0}
}

type FxrAlertA002WatchdogExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId float32 `protobuf:"fixed32,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // us
	AppCRC float32 `protobuf:"fixed32,2,opt,name=AppCRC,proto3" json:"AppCRC,omitempty"` // us
}

func (x *FxrAlertA002WatchdogExpired) Reset() {
	*x = FxrAlertA002WatchdogExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA002WatchdogExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA002WatchdogExpired) ProtoMessage() {}

func (x *FxrAlertA002WatchdogExpired) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA002WatchdogExpired.ProtoReflect.Descriptor instead.
func (*FxrAlertA002WatchdogExpired) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 1}
}

func (x *FxrAlertA002WatchdogExpired) GetTaskId() float32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FxrAlertA002WatchdogExpired) GetAppCRC() float32 {
	if x != nil {
		return x.AppCRC
	}
	return 0
}

type FxrAlertA003InternalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA003InternalFault) Reset() {
	*x = FxrAlertA003InternalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA003InternalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA003InternalFault) ProtoMessage() {}

func (x *FxrAlertA003InternalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA003InternalFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA003InternalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 2}
}

type FxrAlertA004_STIB00_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA004_STIB00_MIA) Reset() {
	*x = FxrAlertA004_STIB00_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA004_STIB00_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA004_STIB00_MIA) ProtoMessage() {}

func (x *FxrAlertA004_STIB00_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA004_STIB00_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA004_STIB00_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 3}
}

type FxrAlertA005_STIB01_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA005_STIB01_MIA) Reset() {
	*x = FxrAlertA005_STIB01_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA005_STIB01_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA005_STIB01_MIA) ProtoMessage() {}

func (x *FxrAlertA005_STIB01_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA005_STIB01_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA005_STIB01_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 4}
}

type FxrAlertA006_STIB02_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA006_STIB02_MIA) Reset() {
	*x = FxrAlertA006_STIB02_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA006_STIB02_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA006_STIB02_MIA) ProtoMessage() {}

func (x *FxrAlertA006_STIB02_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA006_STIB02_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA006_STIB02_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 5}
}

type FxrAlertA007_STIB03_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA007_STIB03_MIA) Reset() {
	*x = FxrAlertA007_STIB03_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA007_STIB03_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA007_STIB03_MIA) ProtoMessage() {}

func (x *FxrAlertA007_STIB03_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA007_STIB03_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA007_STIB03_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 6}
}

type FxrAlertA008_FIB_MIA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA008_FIB_MIA) Reset() {
	*x = FxrAlertA008_FIB_MIA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA008_FIB_MIA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA008_FIB_MIA) ProtoMessage() {}

func (x *FxrAlertA008_FIB_MIA) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA008_FIB_MIA.ProtoReflect.Descriptor instead.
func (*FxrAlertA008_FIB_MIA) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 7}
}

type FxrAlertA009IsoDiagCheckFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChassisToVBusShorted bool `protobuf:"varint,1,opt,name=chassisToVBusShorted,proto3" json:"chassisToVBusShorted,omitempty"`
	ChassisToGndShorted  bool `protobuf:"varint,2,opt,name=chassisToGndShorted,proto3" json:"chassisToGndShorted,omitempty"`
	ChassisNotConnected  bool `protobuf:"varint,3,opt,name=chassisNotConnected,proto3" json:"chassisNotConnected,omitempty"`
	BusOutOfSpec         bool `protobuf:"varint,4,opt,name=busOutOfSpec,proto3" json:"busOutOfSpec,omitempty"`
}

func (x *FxrAlertA009IsoDiagCheckFail) Reset() {
	*x = FxrAlertA009IsoDiagCheckFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA009IsoDiagCheckFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA009IsoDiagCheckFail) ProtoMessage() {}

func (x *FxrAlertA009IsoDiagCheckFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA009IsoDiagCheckFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA009IsoDiagCheckFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 8}
}

func (x *FxrAlertA009IsoDiagCheckFail) GetChassisToVBusShorted() bool {
	if x != nil {
		return x.ChassisToVBusShorted
	}
	return false
}

func (x *FxrAlertA009IsoDiagCheckFail) GetChassisToGndShorted() bool {
	if x != nil {
		return x.ChassisToGndShorted
	}
	return false
}

func (x *FxrAlertA009IsoDiagCheckFail) GetChassisNotConnected() bool {
	if x != nil {
		return x.ChassisNotConnected
	}
	return false
}

func (x *FxrAlertA009IsoDiagCheckFail) GetBusOutOfSpec() bool {
	if x != nil {
		return x.BusOutOfSpec
	}
	return false
}

type FxrAlertA010IsolationFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoResistanceHigh float32 `protobuf:"fixed32,1,opt,name=isoResistanceHigh,proto3" json:"isoResistanceHigh,omitempty"`
	IsoResistanceLow  float32 `protobuf:"fixed32,2,opt,name=isoResistanceLow,proto3" json:"isoResistanceLow,omitempty"`
}

func (x *FxrAlertA010IsolationFault) Reset() {
	*x = FxrAlertA010IsolationFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA010IsolationFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA010IsolationFault) ProtoMessage() {}

func (x *FxrAlertA010IsolationFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA010IsolationFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA010IsolationFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 9}
}

func (x *FxrAlertA010IsolationFault) GetIsoResistanceHigh() float32 {
	if x != nil {
		return x.IsoResistanceHigh
	}
	return 0
}

func (x *FxrAlertA010IsolationFault) GetIsoResistanceLow() float32 {
	if x != nil {
		return x.IsoResistanceLow
	}
	return 0
}

type FxrAlertA011IsolationDegradationFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoResistanceHigh float32 `protobuf:"fixed32,1,opt,name=isoResistanceHigh,proto3" json:"isoResistanceHigh,omitempty"`
	IsoResistanceLow  float32 `protobuf:"fixed32,2,opt,name=isoResistanceLow,proto3" json:"isoResistanceLow,omitempty"`
}

func (x *FxrAlertA011IsolationDegradationFault) Reset() {
	*x = FxrAlertA011IsolationDegradationFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA011IsolationDegradationFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA011IsolationDegradationFault) ProtoMessage() {}

func (x *FxrAlertA011IsolationDegradationFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA011IsolationDegradationFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA011IsolationDegradationFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 10}
}

func (x *FxrAlertA011IsolationDegradationFault) GetIsoResistanceHigh() float32 {
	if x != nil {
		return x.IsoResistanceHigh
	}
	return 0
}

func (x *FxrAlertA011IsolationDegradationFault) GetIsoResistanceLow() float32 {
	if x != nil {
		return x.IsoResistanceLow
	}
	return 0
}

type FxrAlertA012EnumerationWriteFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA012EnumerationWriteFail) Reset() {
	*x = FxrAlertA012EnumerationWriteFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA012EnumerationWriteFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA012EnumerationWriteFail) ProtoMessage() {}

func (x *FxrAlertA012EnumerationWriteFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA012EnumerationWriteFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA012EnumerationWriteFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 11}
}

type FxrAlertA013AppGitHashMismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FibAppGitHashMismatch    bool `protobuf:"varint,1,opt,name=fibAppGitHashMismatch,proto3" json:"fibAppGitHashMismatch,omitempty"`
	Stib00AppGitHashMismatch bool `protobuf:"varint,2,opt,name=stib00AppGitHashMismatch,proto3" json:"stib00AppGitHashMismatch,omitempty"`
	Stib01AppGitHashMismatch bool `protobuf:"varint,3,opt,name=stib01AppGitHashMismatch,proto3" json:"stib01AppGitHashMismatch,omitempty"`
	Stib02AppGitHashMismatch bool `protobuf:"varint,4,opt,name=stib02AppGitHashMismatch,proto3" json:"stib02AppGitHashMismatch,omitempty"`
	Stib03AppGitHashMismatch bool `protobuf:"varint,5,opt,name=stib03AppGitHashMismatch,proto3" json:"stib03AppGitHashMismatch,omitempty"`
}

func (x *FxrAlertA013AppGitHashMismatch) Reset() {
	*x = FxrAlertA013AppGitHashMismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA013AppGitHashMismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA013AppGitHashMismatch) ProtoMessage() {}

func (x *FxrAlertA013AppGitHashMismatch) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA013AppGitHashMismatch.ProtoReflect.Descriptor instead.
func (*FxrAlertA013AppGitHashMismatch) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 12}
}

func (x *FxrAlertA013AppGitHashMismatch) GetFibAppGitHashMismatch() bool {
	if x != nil {
		return x.FibAppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib00AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib00AppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib01AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib01AppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib02AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib02AppGitHashMismatch
	}
	return false
}

func (x *FxrAlertA013AppGitHashMismatch) GetStib03AppGitHashMismatch() bool {
	if x != nil {
		return x.Stib03AppGitHashMismatch
	}
	return false
}

type FxrAlertA014StateMachineFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureControlState FixtureControlSmState `protobuf:"varint,1,opt,name=fixture_control_state,json=fixtureControlState,proto3,enum=FixtureControlSmState" json:"fixture_control_state,omitempty"`
	FaultingAlertId     uint32                `protobuf:"varint,2,opt,name=faulting_alert_id,json=faultingAlertId,proto3" json:"faulting_alert_id,omitempty"`
}

func (x *FxrAlertA014StateMachineFault) Reset() {
	*x = FxrAlertA014StateMachineFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA014StateMachineFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA014StateMachineFault) ProtoMessage() {}

func (x *FxrAlertA014StateMachineFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA014StateMachineFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA014StateMachineFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 13}
}

func (x *FxrAlertA014StateMachineFault) GetFixtureControlState() FixtureControlSmState {
	if x != nil {
		return x.FixtureControlState
	}
	return FixtureControlSmState_FXR_ST_INIT_UNSPECIFIED
}

func (x *FxrAlertA014StateMachineFault) GetFaultingAlertId() uint32 {
	if x != nil {
		return x.FaultingAlertId
	}
	return 0
}

type FxrAlertA015FixturePositionFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixturePosition      FixturePosition        `protobuf:"varint,1,opt,name=fixture_position,json=fixturePosition,proto3,enum=FixturePosition" json:"fixture_position,omitempty"`
	FixtureControlState  FixtureControlSmState  `protobuf:"varint,2,opt,name=fixture_control_state,json=fixtureControlState,proto3,enum=FixtureControlSmState" json:"fixture_control_state,omitempty"`
	FixturePositionState FixturePositionSmState `protobuf:"varint,3,opt,name=fixture_position_state,json=fixturePositionState,proto3,enum=FixturePositionSmState" json:"fixture_position_state,omitempty"`
}

func (x *FxrAlertA015FixturePositionFault) Reset() {
	*x = FxrAlertA015FixturePositionFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA015FixturePositionFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA015FixturePositionFault) ProtoMessage() {}

func (x *FxrAlertA015FixturePositionFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA015FixturePositionFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA015FixturePositionFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 14}
}

func (x *FxrAlertA015FixturePositionFault) GetFixturePosition() FixturePosition {
	if x != nil {
		return x.FixturePosition
	}
	return FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED
}

func (x *FxrAlertA015FixturePositionFault) GetFixtureControlState() FixtureControlSmState {
	if x != nil {
		return x.FixtureControlState
	}
	return FixtureControlSmState_FXR_ST_INIT_UNSPECIFIED
}

func (x *FxrAlertA015FixturePositionFault) GetFixturePositionState() FixturePositionSmState {
	if x != nil {
		return x.FixturePositionState
	}
	return FixturePositionSmState_FIXTURE_POSITION_ST_INIT_UNSPECIFIED
}

type FxrAlertA016StibsFaulted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA016StibsFaulted) Reset() {
	*x = FxrAlertA016StibsFaulted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA016StibsFaulted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA016StibsFaulted) ProtoMessage() {}

func (x *FxrAlertA016StibsFaulted) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA016StibsFaulted.ProtoReflect.Descriptor instead.
func (*FxrAlertA016StibsFaulted) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 15}
}

type FxrAlertA017TrayMissing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureControlState FixtureControlSmState `protobuf:"varint,1,opt,name=fixture_control_state,json=fixtureControlState,proto3,enum=FixtureControlSmState" json:"fixture_control_state,omitempty"`
}

func (x *FxrAlertA017TrayMissing) Reset() {
	*x = FxrAlertA017TrayMissing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA017TrayMissing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA017TrayMissing) ProtoMessage() {}

func (x *FxrAlertA017TrayMissing) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA017TrayMissing.ProtoReflect.Descriptor instead.
func (*FxrAlertA017TrayMissing) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 16}
}

func (x *FxrAlertA017TrayMissing) GetFixtureControlState() FixtureControlSmState {
	if x != nil {
		return x.FixtureControlState
	}
	return FixtureControlSmState_FXR_ST_INIT_UNSPECIFIED
}

type FxrAlertA018FixtureControlSmTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureControlState FixtureControlSmState `protobuf:"varint,1,opt,name=fixture_control_state,json=fixtureControlState,proto3,enum=FixtureControlSmState" json:"fixture_control_state,omitempty"`
	StibFormState       []StibFormState       `protobuf:"varint,2,rep,packed,name=stib_form_state,json=stibFormState,proto3,enum=StibFormState" json:"stib_form_state,omitempty"`
	StibDcdcState       []StibDCDCState       `protobuf:"varint,3,rep,packed,name=stib_dcdc_state,json=stibDcdcState,proto3,enum=StibDCDCState" json:"stib_dcdc_state,omitempty"`
}

func (x *FxrAlertA018FixtureControlSmTimeout) Reset() {
	*x = FxrAlertA018FixtureControlSmTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA018FixtureControlSmTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA018FixtureControlSmTimeout) ProtoMessage() {}

func (x *FxrAlertA018FixtureControlSmTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA018FixtureControlSmTimeout.ProtoReflect.Descriptor instead.
func (*FxrAlertA018FixtureControlSmTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 17}
}

func (x *FxrAlertA018FixtureControlSmTimeout) GetFixtureControlState() FixtureControlSmState {
	if x != nil {
		return x.FixtureControlState
	}
	return FixtureControlSmState_FXR_ST_INIT_UNSPECIFIED
}

func (x *FxrAlertA018FixtureControlSmTimeout) GetStibFormState() []StibFormState {
	if x != nil {
		return x.StibFormState
	}
	return nil
}

func (x *FxrAlertA018FixtureControlSmTimeout) GetStibDcdcState() []StibDCDCState {
	if x != nil {
		return x.StibDcdcState
	}
	return nil
}

type FxrAlertA019FixturePosSmFaulted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixturePositionState FixturePositionSmState                     `protobuf:"varint,1,opt,name=fixture_position_state,json=fixturePositionState,proto3,enum=FixturePositionSmState" json:"fixture_position_state,omitempty"`
	FixturePosition      FixturePosition                            `protobuf:"varint,2,opt,name=fixture_position,json=fixturePosition,proto3,enum=FixturePosition" json:"fixture_position,omitempty"`
	FixtureFaultReason   FxrAlertA019FixturePosSmFaultedFaultReason `protobuf:"varint,3,opt,name=fixture_fault_reason,json=fixtureFaultReason,proto3,enum=FxrAlertA019FixturePosSmFaultedFaultReason" json:"fixture_fault_reason,omitempty"`
}

func (x *FxrAlertA019FixturePosSmFaulted) Reset() {
	*x = FxrAlertA019FixturePosSmFaulted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA019FixturePosSmFaulted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA019FixturePosSmFaulted) ProtoMessage() {}

func (x *FxrAlertA019FixturePosSmFaulted) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA019FixturePosSmFaulted.ProtoReflect.Descriptor instead.
func (*FxrAlertA019FixturePosSmFaulted) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 18}
}

func (x *FxrAlertA019FixturePosSmFaulted) GetFixturePositionState() FixturePositionSmState {
	if x != nil {
		return x.FixturePositionState
	}
	return FixturePositionSmState_FIXTURE_POSITION_ST_INIT_UNSPECIFIED
}

func (x *FxrAlertA019FixturePosSmFaulted) GetFixturePosition() FixturePosition {
	if x != nil {
		return x.FixturePosition
	}
	return FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED
}

func (x *FxrAlertA019FixturePosSmFaulted) GetFixtureFaultReason() FxrAlertA019FixturePosSmFaultedFaultReason {
	if x != nil {
		return x.FixtureFaultReason
	}
	return FxrAlertA019FixturePosSmFaulted_not_open_in_open_st
}

type FxrAlertA020ThermalEventLevel_0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold float32 `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *FxrAlertA020ThermalEventLevel_0) Reset() {
	*x = FxrAlertA020ThermalEventLevel_0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA020ThermalEventLevel_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA020ThermalEventLevel_0) ProtoMessage() {}

func (x *FxrAlertA020ThermalEventLevel_0) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA020ThermalEventLevel_0.ProtoReflect.Descriptor instead.
func (*FxrAlertA020ThermalEventLevel_0) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 19}
}

func (x *FxrAlertA020ThermalEventLevel_0) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type FxrAlertA021ThermalEventLevel_1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold float32 `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *FxrAlertA021ThermalEventLevel_1) Reset() {
	*x = FxrAlertA021ThermalEventLevel_1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA021ThermalEventLevel_1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA021ThermalEventLevel_1) ProtoMessage() {}

func (x *FxrAlertA021ThermalEventLevel_1) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA021ThermalEventLevel_1.ProtoReflect.Descriptor instead.
func (*FxrAlertA021ThermalEventLevel_1) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 20}
}

func (x *FxrAlertA021ThermalEventLevel_1) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type FxrAlertA022GitMismatchTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA022GitMismatchTimeout) Reset() {
	*x = FxrAlertA022GitMismatchTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA022GitMismatchTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA022GitMismatchTimeout) ProtoMessage() {}

func (x *FxrAlertA022GitMismatchTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA022GitMismatchTimeout.ProtoReflect.Descriptor instead.
func (*FxrAlertA022GitMismatchTimeout) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 21}
}

type FxrAlertA023BusHVUvFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage float32 `protobuf:"fixed32,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *FxrAlertA023BusHVUvFault) Reset() {
	*x = FxrAlertA023BusHVUvFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA023BusHVUvFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA023BusHVUvFault) ProtoMessage() {}

func (x *FxrAlertA023BusHVUvFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA023BusHVUvFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA023BusHVUvFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 22}
}

func (x *FxrAlertA023BusHVUvFault) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type FxrAlertA024BusHVOvFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage float32 `protobuf:"fixed32,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *FxrAlertA024BusHVOvFault) Reset() {
	*x = FxrAlertA024BusHVOvFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA024BusHVOvFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA024BusHVOvFault) ProtoMessage() {}

func (x *FxrAlertA024BusHVOvFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA024BusHVOvFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA024BusHVOvFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 23}
}

func (x *FxrAlertA024BusHVOvFault) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type FxrAlertA025_EquipmentNeedsMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevStatus              int32             `protobuf:"varint,1,opt,name=prev_status,json=prevStatus,proto3" json:"prev_status,omitempty"`                                             // what equipment status transitioning from
	FaultingAlertId         int32             `protobuf:"varint,2,opt,name=faulting_alert_id,json=faultingAlertId,proto3" json:"faulting_alert_id,omitempty"`                            // alert id causing transition if non-zero
	FixtureStatusFaulted    bool              `protobuf:"varint,3,opt,name=fixture_status_faulted,json=fixtureStatusFaulted,proto3" json:"fixture_status_faulted,omitempty"`             // if fixture status faulted is causing transition
	EquipmentMaintenanceReq bool              `protobuf:"varint,4,opt,name=equipment_maintenance_req,json=equipmentMaintenanceReq,proto3" json:"equipment_maintenance_req,omitempty"`    // if needs maintenance was requested via equipment request
	CellsIncomplete         bool              `protobuf:"varint,5,opt,name=cells_incomplete,json=cellsIncomplete,proto3" json:"cells_incomplete,omitempty"`                              // fail due to cell(s) not complete during commissioning recipe
	MaintenanceReason       MaintenanceReason `protobuf:"varint,6,opt,name=maintenance_reason,json=maintenanceReason,proto3,enum=MaintenanceReason" json:"maintenance_reason,omitempty"` // reason for needs maintenance status
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) Reset() {
	*x = FxrAlertA025_EquipmentNeedsMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA025_EquipmentNeedsMaintenance) ProtoMessage() {}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA025_EquipmentNeedsMaintenance.ProtoReflect.Descriptor instead.
func (*FxrAlertA025_EquipmentNeedsMaintenance) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 24}
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) GetPrevStatus() int32 {
	if x != nil {
		return x.PrevStatus
	}
	return 0
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) GetFaultingAlertId() int32 {
	if x != nil {
		return x.FaultingAlertId
	}
	return 0
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) GetFixtureStatusFaulted() bool {
	if x != nil {
		return x.FixtureStatusFaulted
	}
	return false
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) GetEquipmentMaintenanceReq() bool {
	if x != nil {
		return x.EquipmentMaintenanceReq
	}
	return false
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) GetCellsIncomplete() bool {
	if x != nil {
		return x.CellsIncomplete
	}
	return false
}

func (x *FxrAlertA025_EquipmentNeedsMaintenance) GetMaintenanceReason() MaintenanceReason {
	if x != nil {
		return x.MaintenanceReason
	}
	return MaintenanceReason_MAINTENANCE_REASON_UNKNOWN_UNSPECIFIED
}

type FxrAlertA027_24VBus_UVFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage float32 `protobuf:"fixed32,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *FxrAlertA027_24VBus_UVFault) Reset() {
	*x = FxrAlertA027_24VBus_UVFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA027_24VBus_UVFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA027_24VBus_UVFault) ProtoMessage() {}

func (x *FxrAlertA027_24VBus_UVFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA027_24VBus_UVFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA027_24VBus_UVFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 25}
}

func (x *FxrAlertA027_24VBus_UVFault) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type FxrAlertA028_24VBus_OVFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage float32 `protobuf:"fixed32,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *FxrAlertA028_24VBus_OVFault) Reset() {
	*x = FxrAlertA028_24VBus_OVFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA028_24VBus_OVFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA028_24VBus_OVFault) ProtoMessage() {}

func (x *FxrAlertA028_24VBus_OVFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA028_24VBus_OVFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA028_24VBus_OVFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 26}
}

func (x *FxrAlertA028_24VBus_OVFault) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type FxrAlertA029_RecipeMaskMissingCelldetected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumMissingCellsDetected uint32   `protobuf:"varint,1,opt,name=NumMissingCellsDetected,proto3" json:"NumMissingCellsDetected,omitempty"` // Number of cells request in recipe but not detected by cib(ranges from 1 to 64)
	MissingCellPosition     []uint32 `protobuf:"varint,2,rep,packed,name=MissingCellPosition,proto3" json:"MissingCellPosition,omitempty"`  // cell position of missing cell 1(ranges from 0 to 63, 0xFF = NA)
}

func (x *FxrAlertA029_RecipeMaskMissingCelldetected) Reset() {
	*x = FxrAlertA029_RecipeMaskMissingCelldetected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA029_RecipeMaskMissingCelldetected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA029_RecipeMaskMissingCelldetected) ProtoMessage() {}

func (x *FxrAlertA029_RecipeMaskMissingCelldetected) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA029_RecipeMaskMissingCelldetected.ProtoReflect.Descriptor instead.
func (*FxrAlertA029_RecipeMaskMissingCelldetected) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 27}
}

func (x *FxrAlertA029_RecipeMaskMissingCelldetected) GetNumMissingCellsDetected() uint32 {
	if x != nil {
		return x.NumMissingCellsDetected
	}
	return 0
}

func (x *FxrAlertA029_RecipeMaskMissingCelldetected) GetMissingCellPosition() []uint32 {
	if x != nil {
		return x.MissingCellPosition
	}
	return nil
}

type FxrAlertA030FibFaulted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA030FibFaulted) Reset() {
	*x = FxrAlertA030FibFaulted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA030FibFaulted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA030FibFaulted) ProtoMessage() {}

func (x *FxrAlertA030FibFaulted) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA030FibFaulted.ProtoReflect.Descriptor instead.
func (*FxrAlertA030FibFaulted) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 28}
}

type FxrAlertA031_FanPwrCheckFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current float32 `protobuf:"fixed32,1,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *FxrAlertA031_FanPwrCheckFail) Reset() {
	*x = FxrAlertA031_FanPwrCheckFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA031_FanPwrCheckFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA031_FanPwrCheckFail) ProtoMessage() {}

func (x *FxrAlertA031_FanPwrCheckFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA031_FanPwrCheckFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA031_FanPwrCheckFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 29}
}

func (x *FxrAlertA031_FanPwrCheckFail) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

type FxrAlertA032_StibPwrCheckFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current float32 `protobuf:"fixed32,1,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *FxrAlertA032_StibPwrCheckFail) Reset() {
	*x = FxrAlertA032_StibPwrCheckFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA032_StibPwrCheckFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA032_StibPwrCheckFail) ProtoMessage() {}

func (x *FxrAlertA032_StibPwrCheckFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA032_StibPwrCheckFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA032_StibPwrCheckFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 30}
}

func (x *FxrAlertA032_StibPwrCheckFail) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

type FxrAlertA033_FanHwPwrSupplyFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanPowerBad bool `protobuf:"varint,1,opt,name=fan_power_bad,json=fanPowerBad,proto3" json:"fan_power_bad,omitempty"`
}

func (x *FxrAlertA033_FanHwPwrSupplyFail) Reset() {
	*x = FxrAlertA033_FanHwPwrSupplyFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA033_FanHwPwrSupplyFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA033_FanHwPwrSupplyFail) ProtoMessage() {}

func (x *FxrAlertA033_FanHwPwrSupplyFail) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA033_FanHwPwrSupplyFail.ProtoReflect.Descriptor instead.
func (*FxrAlertA033_FanHwPwrSupplyFail) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 31}
}

func (x *FxrAlertA033_FanHwPwrSupplyFail) GetFanPowerBad() bool {
	if x != nil {
		return x.FanPowerBad
	}
	return false
}

type FxrAlertA034TempSensorCommsIrrational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibMia    bool `protobuf:"varint,1,opt,name=stib_mia,json=stibMia,proto3" json:"stib_mia,omitempty"`
	CibOffline bool `protobuf:"varint,2,opt,name=cib_offline,json=cibOffline,proto3" json:"cib_offline,omitempty"`
}

func (x *FxrAlertA034TempSensorCommsIrrational) Reset() {
	*x = FxrAlertA034TempSensorCommsIrrational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA034TempSensorCommsIrrational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA034TempSensorCommsIrrational) ProtoMessage() {}

func (x *FxrAlertA034TempSensorCommsIrrational) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA034TempSensorCommsIrrational.ProtoReflect.Descriptor instead.
func (*FxrAlertA034TempSensorCommsIrrational) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 32}
}

func (x *FxrAlertA034TempSensorCommsIrrational) GetStibMia() bool {
	if x != nil {
		return x.StibMia
	}
	return false
}

func (x *FxrAlertA034TempSensorCommsIrrational) GetCibOffline() bool {
	if x != nil {
		return x.CibOffline
	}
	return false
}

type FxrAlertA035EnumerationChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressCurrent uint32 `protobuf:"varint,1,opt,name=address_current,json=addressCurrent,proto3" json:"address_current,omitempty"`
	AddressNew     uint32 `protobuf:"varint,2,opt,name=address_new,json=addressNew,proto3" json:"address_new,omitempty"`
	UartEnum       bool   `protobuf:"varint,3,opt,name=uart_enum,json=uartEnum,proto3" json:"uart_enum,omitempty"`
	GpioEnum       bool   `protobuf:"varint,4,opt,name=gpio_enum,json=gpioEnum,proto3" json:"gpio_enum,omitempty"`
}

func (x *FxrAlertA035EnumerationChange) Reset() {
	*x = FxrAlertA035EnumerationChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA035EnumerationChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA035EnumerationChange) ProtoMessage() {}

func (x *FxrAlertA035EnumerationChange) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA035EnumerationChange.ProtoReflect.Descriptor instead.
func (*FxrAlertA035EnumerationChange) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 33}
}

func (x *FxrAlertA035EnumerationChange) GetAddressCurrent() uint32 {
	if x != nil {
		return x.AddressCurrent
	}
	return 0
}

func (x *FxrAlertA035EnumerationChange) GetAddressNew() uint32 {
	if x != nil {
		return x.AddressNew
	}
	return 0
}

func (x *FxrAlertA035EnumerationChange) GetUartEnum() bool {
	if x != nil {
		return x.UartEnum
	}
	return false
}

func (x *FxrAlertA035EnumerationChange) GetGpioEnum() bool {
	if x != nil {
		return x.GpioEnum
	}
	return false
}

type FxrAlertA036PogoMonitorFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PogoMonitorPosition_1StibIndex uint32 `protobuf:"varint,1,opt,name=pogo_monitor_position_1_stib_index,json=pogoMonitorPosition1StibIndex,proto3" json:"pogo_monitor_position_1_stib_index,omitempty"`
	PogoMonitorPosition_1CellIndex uint32 `protobuf:"varint,2,opt,name=pogo_monitor_position_1_cell_index,json=pogoMonitorPosition1CellIndex,proto3" json:"pogo_monitor_position_1_cell_index,omitempty"`
	PogoMonitorPosition_2StibIndex uint32 `protobuf:"varint,3,opt,name=pogo_monitor_position_2_stib_index,json=pogoMonitorPosition2StibIndex,proto3" json:"pogo_monitor_position_2_stib_index,omitempty"`
	PogoMonitorPosition_2CellIndex uint32 `protobuf:"varint,4,opt,name=pogo_monitor_position_2_cell_index,json=pogoMonitorPosition2CellIndex,proto3" json:"pogo_monitor_position_2_cell_index,omitempty"`
	PogoMonitorLimit               uint32 `protobuf:"varint,5,opt,name=pogo_monitor_limit,json=pogoMonitorLimit,proto3" json:"pogo_monitor_limit,omitempty"`
}

func (x *FxrAlertA036PogoMonitorFault) Reset() {
	*x = FxrAlertA036PogoMonitorFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA036PogoMonitorFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA036PogoMonitorFault) ProtoMessage() {}

func (x *FxrAlertA036PogoMonitorFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA036PogoMonitorFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA036PogoMonitorFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 34}
}

func (x *FxrAlertA036PogoMonitorFault) GetPogoMonitorPosition_1StibIndex() uint32 {
	if x != nil {
		return x.PogoMonitorPosition_1StibIndex
	}
	return 0
}

func (x *FxrAlertA036PogoMonitorFault) GetPogoMonitorPosition_1CellIndex() uint32 {
	if x != nil {
		return x.PogoMonitorPosition_1CellIndex
	}
	return 0
}

func (x *FxrAlertA036PogoMonitorFault) GetPogoMonitorPosition_2StibIndex() uint32 {
	if x != nil {
		return x.PogoMonitorPosition_2StibIndex
	}
	return 0
}

func (x *FxrAlertA036PogoMonitorFault) GetPogoMonitorPosition_2CellIndex() uint32 {
	if x != nil {
		return x.PogoMonitorPosition_2CellIndex
	}
	return 0
}

func (x *FxrAlertA036PogoMonitorFault) GetPogoMonitorLimit() uint32 {
	if x != nil {
		return x.PogoMonitorLimit
	}
	return 0
}

type FxrAlertA037FaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA037FaultRequest) Reset() {
	*x = FxrAlertA037FaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA037FaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA037FaultRequest) ProtoMessage() {}

func (x *FxrAlertA037FaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA037FaultRequest.ProtoReflect.Descriptor instead.
func (*FxrAlertA037FaultRequest) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 35}
}

type FxrAlert_AlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*FxrAlert_AlertData_A001
	//	*FxrAlert_AlertData_A002
	//	*FxrAlert_AlertData_A003
	//	*FxrAlert_AlertData_A004
	//	*FxrAlert_AlertData_A005
	//	*FxrAlert_AlertData_A006
	//	*FxrAlert_AlertData_A007
	//	*FxrAlert_AlertData_A008
	//	*FxrAlert_AlertData_A009
	//	*FxrAlert_AlertData_A010
	//	*FxrAlert_AlertData_A011
	//	*FxrAlert_AlertData_A012
	//	*FxrAlert_AlertData_A013
	//	*FxrAlert_AlertData_A014
	//	*FxrAlert_AlertData_A015
	//	*FxrAlert_AlertData_A016
	//	*FxrAlert_AlertData_A017
	//	*FxrAlert_AlertData_A018
	//	*FxrAlert_AlertData_A019
	//	*FxrAlert_AlertData_A020
	//	*FxrAlert_AlertData_A021
	//	*FxrAlert_AlertData_A022
	//	*FxrAlert_AlertData_A023
	//	*FxrAlert_AlertData_A024
	//	*FxrAlert_AlertData_A025
	//	*FxrAlert_AlertData_A027
	//	*FxrAlert_AlertData_A028
	//	*FxrAlert_AlertData_A029
	//	*FxrAlert_AlertData_A030
	//	*FxrAlert_AlertData_A031
	//	*FxrAlert_AlertData_A032
	//	*FxrAlert_AlertData_A033
	//	*FxrAlert_AlertData_A034
	//	*FxrAlert_AlertData_A035
	//	*FxrAlert_AlertData_A036
	//	*FxrAlert_AlertData_A037
	Payload isFxrAlert_AlertData_Payload `protobuf_oneof:"Payload"`
}

func (x *FxrAlert_AlertData) Reset() {
	*x = FxrAlert_AlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlert_AlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlert_AlertData) ProtoMessage() {}

func (x *FxrAlert_AlertData) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlert_AlertData.ProtoReflect.Descriptor instead.
func (*FxrAlert_AlertData) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3, 36}
}

func (m *FxrAlert_AlertData) GetPayload() isFxrAlert_AlertData_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA001() *FxrAlertA001_SwAppBoot {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A001); ok {
		return x.A001
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA002() *FxrAlertA002WatchdogExpired {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A002); ok {
		return x.A002
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA003() *FxrAlertA003InternalFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A003); ok {
		return x.A003
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA004() *FxrAlertA004_STIB00_MIA {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A004); ok {
		return x.A004
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA005() *FxrAlertA005_STIB01_MIA {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A005); ok {
		return x.A005
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA006() *FxrAlertA006_STIB02_MIA {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A006); ok {
		return x.A006
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA007() *FxrAlertA007_STIB03_MIA {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A007); ok {
		return x.A007
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA008() *FxrAlertA008_FIB_MIA {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A008); ok {
		return x.A008
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA009() *FxrAlertA009IsoDiagCheckFail {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A009); ok {
		return x.A009
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA010() *FxrAlertA010IsolationFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A010); ok {
		return x.A010
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA011() *FxrAlertA011IsolationDegradationFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A011); ok {
		return x.A011
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA012() *FxrAlertA012EnumerationWriteFail {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A012); ok {
		return x.A012
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA013() *FxrAlertA013AppGitHashMismatch {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A013); ok {
		return x.A013
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA014() *FxrAlertA014StateMachineFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A014); ok {
		return x.A014
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA015() *FxrAlertA015FixturePositionFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A015); ok {
		return x.A015
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA016() *FxrAlertA016StibsFaulted {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A016); ok {
		return x.A016
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA017() *FxrAlertA017TrayMissing {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A017); ok {
		return x.A017
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA018() *FxrAlertA018FixtureControlSmTimeout {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A018); ok {
		return x.A018
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA019() *FxrAlertA019FixturePosSmFaulted {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A019); ok {
		return x.A019
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA020() *FxrAlertA020ThermalEventLevel_0 {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A020); ok {
		return x.A020
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA021() *FxrAlertA021ThermalEventLevel_1 {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A021); ok {
		return x.A021
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA022() *FxrAlertA022GitMismatchTimeout {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A022); ok {
		return x.A022
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA023() *FxrAlertA023BusHVUvFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A023); ok {
		return x.A023
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA024() *FxrAlertA024BusHVOvFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A024); ok {
		return x.A024
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA025() *FxrAlertA025_EquipmentNeedsMaintenance {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A025); ok {
		return x.A025
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA027() *FxrAlertA027_24VBus_UVFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A027); ok {
		return x.A027
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA028() *FxrAlertA028_24VBus_OVFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A028); ok {
		return x.A028
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA029() *FxrAlertA029_RecipeMaskMissingCelldetected {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A029); ok {
		return x.A029
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA030() *FxrAlertA030FibFaulted {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A030); ok {
		return x.A030
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA031() *FxrAlertA031_FanPwrCheckFail {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A031); ok {
		return x.A031
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA032() *FxrAlertA032_StibPwrCheckFail {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A032); ok {
		return x.A032
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA033() *FxrAlertA033_FanHwPwrSupplyFail {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A033); ok {
		return x.A033
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA034() *FxrAlertA034TempSensorCommsIrrational {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A034); ok {
		return x.A034
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA035() *FxrAlertA035EnumerationChange {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A035); ok {
		return x.A035
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA036() *FxrAlertA036PogoMonitorFault {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A036); ok {
		return x.A036
	}
	return nil
}

func (x *FxrAlert_AlertData) GetA037() *FxrAlertA037FaultRequest {
	if x, ok := x.GetPayload().(*FxrAlert_AlertData_A037); ok {
		return x.A037
	}
	return nil
}

type isFxrAlert_AlertData_Payload interface {
	isFxrAlert_AlertData_Payload()
}

type FxrAlert_AlertData_A001 struct {
	A001 *FxrAlertA001_SwAppBoot `protobuf:"bytes,1,opt,name=a001,proto3,oneof"`
}

type FxrAlert_AlertData_A002 struct {
	A002 *FxrAlertA002WatchdogExpired `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type FxrAlert_AlertData_A003 struct {
	A003 *FxrAlertA003InternalFault `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

type FxrAlert_AlertData_A004 struct {
	A004 *FxrAlertA004_STIB00_MIA `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type FxrAlert_AlertData_A005 struct {
	A005 *FxrAlertA005_STIB01_MIA `protobuf:"bytes,5,opt,name=a005,proto3,oneof"`
}

type FxrAlert_AlertData_A006 struct {
	A006 *FxrAlertA006_STIB02_MIA `protobuf:"bytes,6,opt,name=a006,proto3,oneof"`
}

type FxrAlert_AlertData_A007 struct {
	A007 *FxrAlertA007_STIB03_MIA `protobuf:"bytes,7,opt,name=a007,proto3,oneof"`
}

type FxrAlert_AlertData_A008 struct {
	A008 *FxrAlertA008_FIB_MIA `protobuf:"bytes,8,opt,name=a008,proto3,oneof"`
}

type FxrAlert_AlertData_A009 struct {
	A009 *FxrAlertA009IsoDiagCheckFail `protobuf:"bytes,9,opt,name=a009,proto3,oneof"`
}

type FxrAlert_AlertData_A010 struct {
	A010 *FxrAlertA010IsolationFault `protobuf:"bytes,10,opt,name=a010,proto3,oneof"`
}

type FxrAlert_AlertData_A011 struct {
	A011 *FxrAlertA011IsolationDegradationFault `protobuf:"bytes,11,opt,name=a011,proto3,oneof"`
}

type FxrAlert_AlertData_A012 struct {
	A012 *FxrAlertA012EnumerationWriteFail `protobuf:"bytes,12,opt,name=a012,proto3,oneof"`
}

type FxrAlert_AlertData_A013 struct {
	A013 *FxrAlertA013AppGitHashMismatch `protobuf:"bytes,13,opt,name=a013,proto3,oneof"`
}

type FxrAlert_AlertData_A014 struct {
	A014 *FxrAlertA014StateMachineFault `protobuf:"bytes,14,opt,name=a014,proto3,oneof"`
}

type FxrAlert_AlertData_A015 struct {
	A015 *FxrAlertA015FixturePositionFault `protobuf:"bytes,15,opt,name=a015,proto3,oneof"`
}

type FxrAlert_AlertData_A016 struct {
	A016 *FxrAlertA016StibsFaulted `protobuf:"bytes,16,opt,name=a016,proto3,oneof"`
}

type FxrAlert_AlertData_A017 struct {
	A017 *FxrAlertA017TrayMissing `protobuf:"bytes,17,opt,name=a017,proto3,oneof"`
}

type FxrAlert_AlertData_A018 struct {
	A018 *FxrAlertA018FixtureControlSmTimeout `protobuf:"bytes,18,opt,name=a018,proto3,oneof"`
}

type FxrAlert_AlertData_A019 struct {
	A019 *FxrAlertA019FixturePosSmFaulted `protobuf:"bytes,19,opt,name=a019,proto3,oneof"`
}

type FxrAlert_AlertData_A020 struct {
	A020 *FxrAlertA020ThermalEventLevel_0 `protobuf:"bytes,20,opt,name=a020,proto3,oneof"`
}

type FxrAlert_AlertData_A021 struct {
	A021 *FxrAlertA021ThermalEventLevel_1 `protobuf:"bytes,21,opt,name=a021,proto3,oneof"`
}

type FxrAlert_AlertData_A022 struct {
	A022 *FxrAlertA022GitMismatchTimeout `protobuf:"bytes,22,opt,name=a022,proto3,oneof"`
}

type FxrAlert_AlertData_A023 struct {
	A023 *FxrAlertA023BusHVUvFault `protobuf:"bytes,23,opt,name=a023,proto3,oneof"`
}

type FxrAlert_AlertData_A024 struct {
	A024 *FxrAlertA024BusHVOvFault `protobuf:"bytes,24,opt,name=a024,proto3,oneof"`
}

type FxrAlert_AlertData_A025 struct {
	A025 *FxrAlertA025_EquipmentNeedsMaintenance `protobuf:"bytes,25,opt,name=a025,proto3,oneof"`
}

type FxrAlert_AlertData_A027 struct {
	A027 *FxrAlertA027_24VBus_UVFault `protobuf:"bytes,27,opt,name=a027,proto3,oneof"`
}

type FxrAlert_AlertData_A028 struct {
	A028 *FxrAlertA028_24VBus_OVFault `protobuf:"bytes,28,opt,name=a028,proto3,oneof"`
}

type FxrAlert_AlertData_A029 struct {
	A029 *FxrAlertA029_RecipeMaskMissingCelldetected `protobuf:"bytes,29,opt,name=a029,proto3,oneof"`
}

type FxrAlert_AlertData_A030 struct {
	A030 *FxrAlertA030FibFaulted `protobuf:"bytes,30,opt,name=a030,proto3,oneof"`
}

type FxrAlert_AlertData_A031 struct {
	A031 *FxrAlertA031_FanPwrCheckFail `protobuf:"bytes,31,opt,name=a031,proto3,oneof"`
}

type FxrAlert_AlertData_A032 struct {
	A032 *FxrAlertA032_StibPwrCheckFail `protobuf:"bytes,32,opt,name=a032,proto3,oneof"`
}

type FxrAlert_AlertData_A033 struct {
	A033 *FxrAlertA033_FanHwPwrSupplyFail `protobuf:"bytes,33,opt,name=a033,proto3,oneof"`
}

type FxrAlert_AlertData_A034 struct {
	A034 *FxrAlertA034TempSensorCommsIrrational `protobuf:"bytes,34,opt,name=a034,proto3,oneof"`
}

type FxrAlert_AlertData_A035 struct {
	A035 *FxrAlertA035EnumerationChange `protobuf:"bytes,35,opt,name=a035,proto3,oneof"`
}

type FxrAlert_AlertData_A036 struct {
	A036 *FxrAlertA036PogoMonitorFault `protobuf:"bytes,36,opt,name=a036,proto3,oneof"`
}

type FxrAlert_AlertData_A037 struct {
	A037 *FxrAlertA037FaultRequest `protobuf:"bytes,37,opt,name=a037,proto3,oneof"`
}

func (*FxrAlert_AlertData_A001) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A002) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A003) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A004) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A005) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A006) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A007) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A008) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A009) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A010) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A011) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A012) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A013) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A014) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A015) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A016) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A017) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A018) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A019) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A020) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A021) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A022) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A023) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A024) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A025) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A027) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A028) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A029) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A030) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A031) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A032) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A033) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A034) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A035) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A036) isFxrAlert_AlertData_Payload() {}

func (*FxrAlert_AlertData_A037) isFxrAlert_AlertData_Payload() {}

type TauxAlertA001_SwAppBoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TauxAlertA001_SwAppBoot) Reset() {
	*x = TauxAlertA001_SwAppBoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlertA001_SwAppBoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlertA001_SwAppBoot) ProtoMessage() {}

func (x *TauxAlertA001_SwAppBoot) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlertA001_SwAppBoot.ProtoReflect.Descriptor instead.
func (*TauxAlertA001_SwAppBoot) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 0}
}

type TauxAlertA002_DcacAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtIndex      uint32                      `protobuf:"varint,1,opt,name=pt_index,json=ptIndex,proto3" json:"pt_index,omitempty"`       // powertray has alert
	DcacIndex    uint32                      `protobuf:"varint,2,opt,name=dcac_index,json=dcacIndex,proto3" json:"dcac_index,omitempty"` // dcac index in powertray
	AlertId      uint32                      `protobuf:"varint,3,opt,name=alert_id,json=alertId,proto3" json:"alert_id,omitempty"`       // id of dcac alert
	FaultedEcu   TauxAlertA002_DcacAlert_Ecu `protobuf:"varint,4,opt,name=faulted_ecu,json=faultedEcu,proto3,enum=TauxAlertA002_DcacAlert_Ecu" json:"faulted_ecu,omitempty"`
	SubpackageSn string                      `protobuf:"bytes,5,opt,name=subpackage_sn,json=subpackageSn,proto3" json:"subpackage_sn,omitempty"`
}

func (x *TauxAlertA002_DcacAlert) Reset() {
	*x = TauxAlertA002_DcacAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlertA002_DcacAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlertA002_DcacAlert) ProtoMessage() {}

func (x *TauxAlertA002_DcacAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlertA002_DcacAlert.ProtoReflect.Descriptor instead.
func (*TauxAlertA002_DcacAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 1}
}

func (x *TauxAlertA002_DcacAlert) GetPtIndex() uint32 {
	if x != nil {
		return x.PtIndex
	}
	return 0
}

func (x *TauxAlertA002_DcacAlert) GetDcacIndex() uint32 {
	if x != nil {
		return x.DcacIndex
	}
	return 0
}

func (x *TauxAlertA002_DcacAlert) GetAlertId() uint32 {
	if x != nil {
		return x.AlertId
	}
	return 0
}

func (x *TauxAlertA002_DcacAlert) GetFaultedEcu() TauxAlertA002_DcacAlert_Ecu {
	if x != nil {
		return x.FaultedEcu
	}
	return TauxAlertA002_DcacAlert_DCAC_ALERT_ECU_UNKOWN_UNSPECIFIED
}

func (x *TauxAlertA002_DcacAlert) GetSubpackageSn() string {
	if x != nil {
		return x.SubpackageSn
	}
	return ""
}

type TauxAlertA003_NoPowerCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TauxAlertA003_NoPowerCapacity) Reset() {
	*x = TauxAlertA003_NoPowerCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlertA003_NoPowerCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlertA003_NoPowerCapacity) ProtoMessage() {}

func (x *TauxAlertA003_NoPowerCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlertA003_NoPowerCapacity.ProtoReflect.Descriptor instead.
func (*TauxAlertA003_NoPowerCapacity) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 2}
}

type TauxAlertA004_PowerCapacityDecrease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousCapacityW int32 `protobuf:"varint,1,opt,name=previous_capacity_w,json=previousCapacityW,proto3" json:"previous_capacity_w,omitempty"`
	PowerCapacityW    int32 `protobuf:"varint,2,opt,name=power_capacity_w,json=powerCapacityW,proto3" json:"power_capacity_w,omitempty"`
}

func (x *TauxAlertA004_PowerCapacityDecrease) Reset() {
	*x = TauxAlertA004_PowerCapacityDecrease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlertA004_PowerCapacityDecrease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlertA004_PowerCapacityDecrease) ProtoMessage() {}

func (x *TauxAlertA004_PowerCapacityDecrease) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlertA004_PowerCapacityDecrease.ProtoReflect.Descriptor instead.
func (*TauxAlertA004_PowerCapacityDecrease) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 3}
}

func (x *TauxAlertA004_PowerCapacityDecrease) GetPreviousCapacityW() int32 {
	if x != nil {
		return x.PreviousCapacityW
	}
	return 0
}

func (x *TauxAlertA004_PowerCapacityDecrease) GetPowerCapacityW() int32 {
	if x != nil {
		return x.PowerCapacityW
	}
	return 0
}

type TauxAlertA005_PowerOverload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousInUseW int32 `protobuf:"varint,1,opt,name=previous_in_use_w,json=previousInUseW,proto3" json:"previous_in_use_w,omitempty"`
	PowerCapacityW int32 `protobuf:"varint,2,opt,name=power_capacity_w,json=powerCapacityW,proto3" json:"power_capacity_w,omitempty"`
}

func (x *TauxAlertA005_PowerOverload) Reset() {
	*x = TauxAlertA005_PowerOverload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlertA005_PowerOverload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlertA005_PowerOverload) ProtoMessage() {}

func (x *TauxAlertA005_PowerOverload) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlertA005_PowerOverload.ProtoReflect.Descriptor instead.
func (*TauxAlertA005_PowerOverload) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 4}
}

func (x *TauxAlertA005_PowerOverload) GetPreviousInUseW() int32 {
	if x != nil {
		return x.PreviousInUseW
	}
	return 0
}

func (x *TauxAlertA005_PowerOverload) GetPowerCapacityW() int32 {
	if x != nil {
		return x.PowerCapacityW
	}
	return 0
}

type TauxAlertA006_PowertrayOverTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtIndex              uint32  `protobuf:"varint,1,opt,name=pt_index,json=ptIndex,proto3" json:"pt_index,omitempty"`
	DcacIndex            uint32  `protobuf:"varint,2,opt,name=dcac_index,json=dcacIndex,proto3" json:"dcac_index,omitempty"`
	SubpackageSn         string  `protobuf:"bytes,3,opt,name=subpackage_sn,json=subpackageSn,proto3" json:"subpackage_sn,omitempty"`
	PINV_HeatsinkTemp    float32 `protobuf:"fixed32,4,opt,name=PINV_HeatsinkTemp,json=PINVHeatsinkTemp,proto3" json:"PINV_HeatsinkTemp,omitempty"`          // degC
	POD_DCDCHeatsinkTemp float32 `protobuf:"fixed32,5,opt,name=POD_DCDCHeatsinkTemp,json=PODDCDCHeatsinkTemp,proto3" json:"POD_DCDCHeatsinkTemp,omitempty"` // degC
}

func (x *TauxAlertA006_PowertrayOverTemperature) Reset() {
	*x = TauxAlertA006_PowertrayOverTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlertA006_PowertrayOverTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlertA006_PowertrayOverTemperature) ProtoMessage() {}

func (x *TauxAlertA006_PowertrayOverTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlertA006_PowertrayOverTemperature.ProtoReflect.Descriptor instead.
func (*TauxAlertA006_PowertrayOverTemperature) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 5}
}

func (x *TauxAlertA006_PowertrayOverTemperature) GetPtIndex() uint32 {
	if x != nil {
		return x.PtIndex
	}
	return 0
}

func (x *TauxAlertA006_PowertrayOverTemperature) GetDcacIndex() uint32 {
	if x != nil {
		return x.DcacIndex
	}
	return 0
}

func (x *TauxAlertA006_PowertrayOverTemperature) GetSubpackageSn() string {
	if x != nil {
		return x.SubpackageSn
	}
	return ""
}

func (x *TauxAlertA006_PowertrayOverTemperature) GetPINV_HeatsinkTemp() float32 {
	if x != nil {
		return x.PINV_HeatsinkTemp
	}
	return 0
}

func (x *TauxAlertA006_PowertrayOverTemperature) GetPOD_DCDCHeatsinkTemp() float32 {
	if x != nil {
		return x.POD_DCDCHeatsinkTemp
	}
	return 0
}

type TauxAlert_AlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*TauxAlert_AlertData_A001
	//	*TauxAlert_AlertData_A002
	//	*TauxAlert_AlertData_A003
	//	*TauxAlert_AlertData_A004
	//	*TauxAlert_AlertData_A005
	//	*TauxAlert_AlertData_A006
	Payload isTauxAlert_AlertData_Payload `protobuf_oneof:"Payload"`
}

func (x *TauxAlert_AlertData) Reset() {
	*x = TauxAlert_AlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TauxAlert_AlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TauxAlert_AlertData) ProtoMessage() {}

func (x *TauxAlert_AlertData) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TauxAlert_AlertData.ProtoReflect.Descriptor instead.
func (*TauxAlert_AlertData) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5, 6}
}

func (m *TauxAlert_AlertData) GetPayload() isTauxAlert_AlertData_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TauxAlert_AlertData) GetA001() *TauxAlertA001_SwAppBoot {
	if x, ok := x.GetPayload().(*TauxAlert_AlertData_A001); ok {
		return x.A001
	}
	return nil
}

func (x *TauxAlert_AlertData) GetA002() *TauxAlertA002_DcacAlert {
	if x, ok := x.GetPayload().(*TauxAlert_AlertData_A002); ok {
		return x.A002
	}
	return nil
}

func (x *TauxAlert_AlertData) GetA003() *TauxAlertA003_NoPowerCapacity {
	if x, ok := x.GetPayload().(*TauxAlert_AlertData_A003); ok {
		return x.A003
	}
	return nil
}

func (x *TauxAlert_AlertData) GetA004() *TauxAlertA004_PowerCapacityDecrease {
	if x, ok := x.GetPayload().(*TauxAlert_AlertData_A004); ok {
		return x.A004
	}
	return nil
}

func (x *TauxAlert_AlertData) GetA005() *TauxAlertA005_PowerOverload {
	if x, ok := x.GetPayload().(*TauxAlert_AlertData_A005); ok {
		return x.A005
	}
	return nil
}

func (x *TauxAlert_AlertData) GetA006() *TauxAlertA006_PowertrayOverTemperature {
	if x, ok := x.GetPayload().(*TauxAlert_AlertData_A006); ok {
		return x.A006
	}
	return nil
}

type isTauxAlert_AlertData_Payload interface {
	isTauxAlert_AlertData_Payload()
}

type TauxAlert_AlertData_A001 struct {
	A001 *TauxAlertA001_SwAppBoot `protobuf:"bytes,1,opt,name=a001,proto3,oneof"`
}

type TauxAlert_AlertData_A002 struct {
	A002 *TauxAlertA002_DcacAlert `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type TauxAlert_AlertData_A003 struct {
	A003 *TauxAlertA003_NoPowerCapacity `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

type TauxAlert_AlertData_A004 struct {
	A004 *TauxAlertA004_PowerCapacityDecrease `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type TauxAlert_AlertData_A005 struct {
	A005 *TauxAlertA005_PowerOverload `protobuf:"bytes,5,opt,name=a005,proto3,oneof"`
}

type TauxAlert_AlertData_A006 struct {
	A006 *TauxAlertA006_PowertrayOverTemperature `protobuf:"bytes,6,opt,name=a006,proto3,oneof"`
}

func (*TauxAlert_AlertData_A001) isTauxAlert_AlertData_Payload() {}

func (*TauxAlert_AlertData_A002) isTauxAlert_AlertData_Payload() {}

func (*TauxAlert_AlertData_A003) isTauxAlert_AlertData_Payload() {}

func (*TauxAlert_AlertData_A004) isTauxAlert_AlertData_Payload() {}

func (*TauxAlert_AlertData_A005) isTauxAlert_AlertData_Payload() {}

func (*TauxAlert_AlertData_A006) isTauxAlert_AlertData_Payload() {}

var File_alerts_proto protoreflect.FileDescriptor

var file_alerts_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0d, 0x61,
	0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x22, 0xde, 0x5d, 0x0a, 0x09, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x2d, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53,
	0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd8, 0x01, 0x0a, 0x0f, 0x61, 0x30, 0x30,
	0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x49, 0x53, 0x52, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x49, 0x53, 0x52, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x25,
	0x0a, 0x0f, 0x66, 0x5f, 0x31, 0x6b, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x31, 0x6b, 0x48, 0x7a, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x66, 0x5f, 0x31, 0x30, 0x48, 0x7a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x66, 0x31, 0x30, 0x48, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x10,
	0x66, 0x5f, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x5f, 0x31, 0x6b, 0x48, 0x7a, 0x5f,
	0x70, 0x72, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x66, 0x31, 0x6b, 0x48, 0x7a, 0x50, 0x72, 0x69, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x61, 0x78, 0x1a, 0xdc, 0x03, 0x0a, 0x15, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a,
	0x18, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x31,
	0x6b, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x31, 0x6b, 0x48,
	0x7a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x35, 0x0a,
	0x17, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x31, 0x30, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x31, 0x30, 0x48, 0x7a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x46, 0x73, 0x5f,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x5f,
	0x43, 0x61, 0x6e, 0x54, 0x78, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e,
	0x12, 0x39, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x4f, 0x73, 0x49, 0x64, 0x6c, 0x65, 0x5f,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x73, 0x49, 0x64, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x54,
	0x61, 0x73, 0x6b, 0x5f, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x54,
	0x61, 0x73, 0x6b, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x31, 0x6b, 0x48,
	0x7a, 0x5f, 0x50, 0x72, 0x69, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x75, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x31,
	0x6b, 0x48, 0x7a, 0x50, 0x72, 0x69, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x75, 0x6e, 0x1a, 0xbf, 0x01, 0x0a, 0x0a, 0x61, 0x30, 0x30, 0x39, 0x5f, 0x50, 0x53, 0x32, 0x34,
	0x56, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x70, 0x73, 0x5f, 0x32, 0x34, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x50, 0x73, 0x32, 0x34,
	0x76, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x31,
	0x32, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61,
	0x69, 0x6c, 0x31, 0x32, 0x76, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x5f, 0x31, 0x32, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x49, 0x31, 0x32, 0x76, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x35, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x76, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76, 0x33, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c,
	0x33, 0x76, 0x33, 0x61, 0x1a, 0x1b, 0x0a, 0x19, 0x61, 0x30, 0x31, 0x30, 0x5f, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x1a, 0xba, 0x02, 0x0a, 0x16, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x77, 0x4f, 0x43, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x5f, 0x6f, 0x76, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x4f, 0x76, 0x72,
	0x50, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x5f,
	0x6f, 0x76, 0x72, 0x5f, 0x6e, 0x65, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x4f, 0x76, 0x72, 0x4e, 0x65, 0x67, 0x12, 0x27, 0x0a, 0x10,
	0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x5f, 0x6f, 0x76, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x4f,
	0x76, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x32, 0x5f, 0x6f, 0x76, 0x72, 0x5f, 0x6e, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x4f, 0x76, 0x72, 0x4e, 0x65, 0x67, 0x1a, 0xb7,
	0x02, 0x0a, 0x13, 0x61, 0x30, 0x31, 0x32, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x77, 0x4f, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x32, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31,
	0x5f, 0x6f, 0x76, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x4f, 0x76, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x5f, 0x6f, 0x76, 0x72, 0x5f, 0x6e, 0x65,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31,
	0x4f, 0x76, 0x72, 0x4e, 0x65, 0x67, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x32, 0x5f, 0x6f, 0x76, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x4f, 0x76, 0x72, 0x50, 0x6f, 0x73, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x5f, 0x6f, 0x76, 0x72, 0x5f,
	0x6e, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x32, 0x4f, 0x76, 0x72, 0x4e, 0x65, 0x67, 0x1a, 0xa6, 0x01, 0x0a, 0x09, 0x61, 0x30, 0x31,
	0x33, 0x5f, 0x53, 0x77, 0x4f, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x6f, 0x75,
	0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x0a, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x42, 0x75, 0x73, 0x55, 0x56,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x6f, 0x75, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x0a,
	0x61, 0x30, 0x31, 0x35, 0x5f, 0x42, 0x75, 0x73, 0x4f, 0x56, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76,
	0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x76, 0x49, 0x6f, 0x75, 0x74, 0x1a, 0xaa, 0x01, 0x0a, 0x0d, 0x61, 0x30, 0x31, 0x36, 0x5f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x56, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x6f,
	0x75, 0x74, 0x1a, 0xaa, 0x01, 0x0a, 0x0d, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x56, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x6f, 0x75, 0x74, 0x1a,
	0x92, 0x01, 0x0a, 0x16, 0x61, 0x30, 0x31, 0x38, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x5f, 0x6f, 0x76, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x4f,
	0x76, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x5f, 0x6f,
	0x76, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x32, 0x4f, 0x76, 0x72, 0x1a, 0x91, 0x01, 0x0a, 0x1b, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x8d, 0x01, 0x0a, 0x1d, 0x61, 0x30, 0x32,
	0x34, 0x5f, 0x69, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69,
	0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x69,
	0x62, 0x49, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x69, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x49, 0x6f,
	0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x1a, 0xc1, 0x01, 0x0a, 0x0c, 0x61, 0x30, 0x32,
	0x35, 0x5f, 0x52, 0x61, 0x69, 0x6c, 0x31, 0x32, 0x56, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x69,
	0x62, 0x5f, 0x70, 0x73, 0x5f, 0x32, 0x34, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x73, 0x74, 0x69, 0x62, 0x50, 0x73, 0x32, 0x34, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x69,
	0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x31, 0x32, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x31, 0x32, 0x76, 0x12, 0x25, 0x0a,
	0x0f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x5f, 0x31, 0x32, 0x76,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c,
	0x49, 0x31, 0x32, 0x76, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69,
	0x6c, 0x5f, 0x35, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x62,
	0x52, 0x61, 0x69, 0x6c, 0x35, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72,
	0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76, 0x33, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x33, 0x76, 0x33, 0x61, 0x1a, 0xc0, 0x01, 0x0a,
	0x0b, 0x61, 0x30, 0x32, 0x36, 0x5f, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x56, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x74, 0x69, 0x62, 0x5f, 0x70, 0x73, 0x5f, 0x32, 0x34, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x50, 0x73, 0x32, 0x34, 0x76, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x31, 0x32, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x31, 0x32, 0x76,
	0x12, 0x25, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x5f,
	0x31, 0x32, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x52,
	0x61, 0x69, 0x6c, 0x49, 0x31, 0x32, 0x76, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x5f,
	0x72, 0x61, 0x69, 0x6c, 0x5f, 0x35, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73,
	0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x69,
	0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76, 0x33, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x33, 0x76, 0x33, 0x61, 0x1a,
	0xc2, 0x01, 0x0a, 0x0d, 0x61, 0x30, 0x32, 0x37, 0x5f, 0x52, 0x61, 0x69, 0x6c, 0x33, 0x56, 0x33,
	0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x70, 0x73, 0x5f, 0x32, 0x34, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x50, 0x73, 0x32, 0x34,
	0x76, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x31,
	0x32, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61,
	0x69, 0x6c, 0x31, 0x32, 0x76, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x5f, 0x31, 0x32, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x49, 0x31, 0x32, 0x76, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x35, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x76, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76, 0x33, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x62, 0x52, 0x61, 0x69, 0x6c,
	0x33, 0x76, 0x33, 0x61, 0x1a, 0x5e, 0x0a, 0x1e, 0x61, 0x30, 0x32, 0x38, 0x5f, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x1a, 0x79, 0x0a, 0x1a, 0x61, 0x30, 0x32, 0x39, 0x5f, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x69, 0x62, 0x49, 0x6f, 0x75, 0x74, 0x1a,
	0x7a, 0x0a, 0x1b, 0x61, 0x30, 0x33, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x63, 0x69, 0x62, 0x49, 0x6f, 0x75, 0x74, 0x1a, 0x4f, 0x0a, 0x0b, 0x61,
	0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x56, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x4f, 0x0a, 0x0b,
	0x61, 0x30, 0x33, 0x32, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x56, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xad, 0x01,
	0x0a, 0x14, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x50, 0x6f, 0x67, 0x6f, 0x56, 0x49, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x67, 0x6f,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x70, 0x6f, 0x67, 0x6f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x69, 0x62, 0x5f, 0x69, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63,
	0x69, 0x62, 0x49, 0x6f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x67, 0x6f, 0x52, 0x1a, 0xd7, 0x01,
	0x0a, 0x0f, 0x61, 0x30, 0x33, 0x35, 0x5f, 0x43, 0x69, 0x62, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x73, 0x68, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0xf0, 0x02, 0x0a, 0x1d, 0x61, 0x30, 0x34, 0x35,
	0x5f, 0x43, 0x49, 0x42, 0x5f, 0x4e, 0x65, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6f, 0x67, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x70, 0x6f, 0x67, 0x6f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x39, 0x0a, 0x19, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x64, 0x0a, 0x14, 0x61, 0x30,
	0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x54, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x54,
	0x1a, 0x6f, 0x0a, 0x15, 0x61, 0x30, 0x33, 0x37, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x0f, 0x73, 0x74, 0x69,
	0x62, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x69, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x1a, 0xb7, 0x03, 0x0a, 0x19, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x46,
	0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x69, 0x62, 0x46, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8c, 0x02, 0x0a,
	0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x68, 0x77, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x64, 0x63, 0x64, 0x63,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x76, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x64, 0x63, 0x64, 0x63, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x63, 0x69, 0x62, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x76, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6f, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x6d, 0x69, 0x61, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x69, 0x61, 0x10, 0x0e, 0x1a, 0xd5, 0x04, 0x0a, 0x13,
	0x61, 0x30, 0x34, 0x31, 0x5f, 0x43, 0x49, 0x42, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x4f, 0x4e, 0x6f, 0x66, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x45, 0x46, 0x4f, 0x4e, 0x6f, 0x66, 0x66, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x63, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75, 0x78, 0x5f, 0x61, 0x64, 0x63, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x78, 0x41,
	0x64, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x65, 0x6c,
	0x6c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x65, 0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x61,
	0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x65, 0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x6d, 0x61,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x44, 0x6d, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x72, 0x65, 0x66, 0x32, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x72, 0x65, 0x66, 0x32, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x72, 0x65, 0x66, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x72, 0x65, 0x66, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x49, 0x72, 0x65, 0x66, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49,
	0x72, 0x65, 0x66, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x72,
	0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x49, 0x72, 0x65, 0x66, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x64, 0x69, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x64, 0x69, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x64, 0x69, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x74, 0x64, 0x69, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x61, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x02, 0x76, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x76, 0x64, 0x1a, 0x77, 0x0a, 0x1b, 0x61, 0x30, 0x34, 0x34, 0x5f, 0x43, 0x49, 0x42, 0x43,
	0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65,
	0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x0a, 0x22,
	0x61, 0x30, 0x34, 0x36, 0x5f, 0x43, 0x49, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x56, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x69, 0x62, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x76,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x63, 0x69, 0x62, 0x53, 0x74, 0x69, 0x62, 0x56, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x66, 0x66, 0x1a, 0x8d, 0x01, 0x0a, 0x19, 0x61, 0x30, 0x34, 0x37, 0x5f, 0x53,
	0x68, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53, 0x68, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x07,
	0x69, 0x5f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x69,
	0x43, 0x61, 0x6c, 0x41, 0x12, 0x16, 0x0a, 0x07, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x69, 0x43, 0x61, 0x6c, 0x42, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x69, 0x64, 0x5f, 0x6c, 0x73, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x69, 0x64, 0x4c, 0x73, 0x62, 0x1a, 0x80, 0x01, 0x0a, 0x24, 0x61, 0x30, 0x34, 0x38, 0x5f, 0x43,
	0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x18, 0x61, 0x30, 0x34,
	0x39, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x76, 0x44, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x76, 0x64, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x76, 0x64,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x68, 0x1a, 0x93, 0x01, 0x0a, 0x12, 0x61, 0x30,
	0x35, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x49, 0x41,
	0x12, 0x31, 0x0a, 0x15, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0xc8, 0x01, 0x0a, 0x21, 0x61, 0x30, 0x35, 0x31, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc5, 0x01, 0x0a, 0x1e, 0x61,
	0x30, 0x35, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x76,
	0x44, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75,
	0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xd6, 0x01, 0x0a, 0x1e, 0x61, 0x30, 0x35, 0x33, 0x5f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc9, 0x01, 0x0a, 0x22,
	0x61, 0x30, 0x35, 0x34, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x93, 0x14, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x12, 0x30, 0x0a, 0x04, 0x61,
	0x30, 0x30, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x24, 0x0a,
	0x04, 0x61, 0x30, 0x30, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58,
	0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x30, 0x35, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x36, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x30, 0x30,
	0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30,
	0x37, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x38, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x39, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x39, 0x12, 0x3a, 0x0a,
	0x04, 0x61, 0x30, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74,
	0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x30, 0x5f, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x30, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x31,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x31, 0x12,
	0x24, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x31, 0x32, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x33, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x33, 0x12, 0x24, 0x0a, 0x04, 0x61,
	0x30, 0x31, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58,
	0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31,
	0x34, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x35, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x36, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x36, 0x12, 0x24, 0x0a,
	0x04, 0x61, 0x30, 0x31, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58,
	0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x31, 0x37, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x38, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x31,
	0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x39, 0x12,
	0x3c, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x30, 0x12, 0x24, 0x0a,
	0x04, 0x61, 0x30, 0x32, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58,
	0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x32, 0x31, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x32,
	0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x33, 0x12,
	0x3e, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x34, 0x5f, 0x69,
	0x72, 0x65, 0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x34, 0x12,
	0x24, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x35, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x32, 0x35, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x36, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x36, 0x12, 0x24, 0x0a, 0x04, 0x61,
	0x30, 0x32, 0x37, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58,
	0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32,
	0x37, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x38, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x38,
	0x5f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x73, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x32, 0x38, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x39, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32,
	0x39, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x39, 0x12,
	0x3c, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x30, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x30, 0x5f, 0x43,
	0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x30, 0x12, 0x2c, 0x0a,
	0x04, 0x61, 0x30, 0x33, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74,
	0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c,
	0x6c, 0x4f, 0x56, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x31, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x30, 0x33, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x55,
	0x56, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x33,
	0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x33, 0x12,
	0x35, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x50,
	0x6f, 0x67, 0x6f, 0x56, 0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x33, 0x34, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x35, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x33, 0x35, 0x5f, 0x43, 0x69, 0x62, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x35, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x36,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x36, 0x12,
	0x36, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x37, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x37, 0x5f, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x37, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x38, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x33, 0x38, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x39, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x39, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x34,
	0x30, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x30, 0x12,
	0x34, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x31, 0x5f, 0x43,
	0x49, 0x42, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x34, 0x31, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x32, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x32, 0x12, 0x24, 0x0a, 0x04, 0x61,
	0x30, 0x34, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x58, 0x58, 0x58,
	0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34,
	0x33, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x34,
	0x5f, 0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x34, 0x12,
	0x3e, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x35, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x35, 0x5f, 0x43,
	0x49, 0x42, 0x5f, 0x4e, 0x65, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x35, 0x12,
	0x43, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x36, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x36, 0x5f, 0x43,
	0x49, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x56, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x66, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x34, 0x36, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x37, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x34, 0x37, 0x5f, 0x53, 0x68, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x37,
	0x12, 0x45, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x38, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x34, 0x38, 0x5f,
	0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x34, 0x38, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x30, 0x34, 0x39, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x34, 0x39, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x76, 0x44, 0x74, 0x4f,
	0x75, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x34, 0x39, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x30, 0x35, 0x30, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x35,
	0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x49, 0x41, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x35, 0x30, 0x12, 0x42, 0x0a, 0x04, 0x61, 0x30, 0x35, 0x31, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x35, 0x31, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x35, 0x31, 0x12, 0x3f, 0x0a, 0x04, 0x61,
	0x30, 0x35, 0x32, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x74, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x35, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x76, 0x44, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x35, 0x32, 0x12, 0x3f, 0x0a, 0x04,
	0x61, 0x30, 0x35, 0x33, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x74, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x35, 0x33, 0x5f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x35, 0x33, 0x12, 0x43, 0x0a,
	0x04, 0x61, 0x30, 0x35, 0x34, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x74,
	0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x35, 0x34, 0x5f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x35, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x93, 0x0d,
	0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x48,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x67, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x43,
	0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x43, 0x41, 0x4e, 0x42, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x72, 0x78, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x30, 0x39, 0x5f, 0x50, 0x53, 0x32, 0x34, 0x56, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x30, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0a, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x77, 0x4f, 0x43, 0x10, 0x0b,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x32, 0x5f, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x77, 0x4f, 0x43, 0x10, 0x0c, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x33, 0x5f, 0x53, 0x77, 0x4f, 0x43,
	0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x34, 0x5f,
	0x42, 0x75, 0x73, 0x55, 0x56, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x31, 0x35, 0x5f, 0x42, 0x75, 0x73, 0x4f, 0x56, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x36, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x56, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31,
	0x37, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x56, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x38, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x12, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x39, 0x5f, 0x53, 0x68, 0x75, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x13, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x31,
	0x5f, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x32, 0x32, 0x5f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x33, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x17, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x32, 0x34, 0x5f, 0x69, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x35, 0x5f, 0x52, 0x61,
	0x69, 0x6c, 0x31, 0x32, 0x56, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x32, 0x36, 0x5f, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x56, 0x10, 0x1a, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x37, 0x5f, 0x52, 0x61, 0x69, 0x6c, 0x33,
	0x56, 0x33, 0x61, 0x10, 0x1b, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x32, 0x38, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x1c, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x39, 0x5f, 0x43, 0x65, 0x6c, 0x6c,
	0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x30,
	0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x56, 0x10, 0x1f, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x43, 0x65, 0x6c,
	0x6c, 0x55, 0x56, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x33, 0x33, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x76, 0x44, 0x54, 0x10, 0x21, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x50, 0x6f, 0x67, 0x6f, 0x56,
	0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x35, 0x5f, 0x43, 0x69, 0x62, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x64, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48,
	0x69, 0x67, 0x68, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x33, 0x37, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x33, 0x39, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x27, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x30, 0x5f, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x10, 0x28, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x34, 0x31, 0x5f, 0x43, 0x49, 0x42, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x32,
	0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x2a, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x33, 0x5f, 0x43, 0x49, 0x42, 0x4e, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x34, 0x5f, 0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x2c,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x35, 0x5f, 0x43, 0x49,
	0x42, 0x5f, 0x4e, 0x65, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2d, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x34, 0x36, 0x5f, 0x43, 0x49, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x56,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x2e, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x34, 0x37, 0x5f, 0x53, 0x68, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x2f, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x34, 0x38, 0x5f, 0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x50, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x30, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x34, 0x39, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x76, 0x44, 0x74, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x10, 0x31, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x35, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x4d, 0x49, 0x41, 0x10, 0x32, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x35, 0x31, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x33, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x35,
	0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x76, 0x44, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x34, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x35, 0x33, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x35, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x35, 0x34, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x36, 0x22, 0x8e, 0x0f, 0x0a, 0x08, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x2c, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x46, 0x0a, 0x14, 0x61, 0x30, 0x30, 0x32, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x43, 0x52,
	0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x1a,
	0x14, 0x0a, 0x12, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x8b, 0x01, 0x0a, 0x10, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x46,
	0x61, 0x6e, 0x52, 0x70, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x61, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x6e, 0x5f, 0x72,
	0x70, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x6e, 0x52, 0x70, 0x6d,
	0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x5f, 0x70, 0x77, 0x6d, 0x5f, 0x64, 0x75, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61, 0x6e, 0x50, 0x77, 0x6d, 0x44, 0x75,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x61, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x1a, 0x7c, 0x0a, 0x12, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x46, 0x61, 0x6e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6e,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61,
	0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x61, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x5f, 0x62,
	0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x42, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xa8, 0x01, 0x0a, 0x15, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x46, 0x61, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x61, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x5f,
	0x72, 0x70, 0x6d, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x52, 0x70, 0x6d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x5f, 0x72, 0x70, 0x6d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e,
	0x52, 0x70, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61,
	0x6e, 0x5f, 0x70, 0x77, 0x6d, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x61, 0x6e, 0x50, 0x77, 0x6d, 0x44, 0x75, 0x74, 0x79, 0x1a, 0x81, 0x01, 0x0a,
	0x0f, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x49, 0x53, 0x52, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x49, 0x53, 0x52, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x66, 0x5f, 0x31, 0x6b, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x31, 0x6b,
	0x48, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0f, 0x66, 0x5f, 0x31,
	0x30, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x66, 0x31, 0x30, 0x48, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x1a, 0xa4, 0x03, 0x0a, 0x15, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x54, 0x61,
	0x73, 0x6b, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x75, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x31, 0x6b, 0x48, 0x7a,
	0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x31, 0x6b, 0x48, 0x7a, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x54, 0x61,
	0x73, 0x6b, 0x5f, 0x31, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x54, 0x61, 0x73, 0x6b,
	0x31, 0x48, 0x7a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12,
	0x35, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x31, 0x30, 0x48, 0x7a, 0x5f, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x31, 0x30, 0x48, 0x7a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x43,
	0x41, 0x4e, 0x74, 0x78, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x41,
	0x4e, 0x74, 0x78, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12,
	0x39, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x5f, 0x4f, 0x53, 0x49, 0x64, 0x6c, 0x65, 0x5f, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x53, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x54, 0x61,
	0x73, 0x6b, 0x5f, 0x4f, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x1a, 0x16, 0x0a, 0x14, 0x61, 0x30, 0x30, 0x39, 0x5f,
	0x46, 0x49, 0x42, 0x72, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x49, 0x41, 0x1a,
	0xbb, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a,
	0x04, 0x61, 0x30, 0x30, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x30, 0x32, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30,
	0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x46, 0x61, 0x6e, 0x52, 0x70, 0x6d, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x30,
	0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x46, 0x61, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x35, 0x12, 0x35, 0x0a,
	0x04, 0x61, 0x30, 0x30, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x46, 0x61, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x30, 0x36, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x37, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30,
	0x30, 0x37, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x30, 0x37, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x38, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x30, 0x38, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x38, 0x12, 0x34, 0x0a, 0x04,
	0x61, 0x30, 0x30, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x39, 0x5f, 0x46, 0x49, 0x42, 0x72, 0x78,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x49, 0x41, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x30, 0x39, 0x42, 0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x94, 0x02,
	0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x42,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x46, 0x61, 0x6e, 0x52, 0x70, 0x6d, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x35, 0x5f,
	0x46, 0x61, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x05, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x46, 0x61, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x30, 0x38, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x75, 0x6e, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x39, 0x5f, 0x46, 0x49, 0x42, 0x72, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d,
	0x49, 0x41, 0x10, 0x09, 0x22, 0xf1, 0x37, 0x0a, 0x08, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x0a, 0x0e, 0x61, 0x30, 0x30, 0x31,
	0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x1a, 0x46, 0x0a, 0x14, 0x61, 0x30,
	0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70,
	0x70, 0x43, 0x52, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x70, 0x70, 0x43,
	0x52, 0x43, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x11, 0x0a, 0x0f, 0x61, 0x30, 0x30, 0x34,
	0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x30, 0x5f, 0x4d, 0x49, 0x41, 0x1a, 0x11, 0x0a, 0x0f, 0x61,
	0x30, 0x30, 0x35, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x31, 0x5f, 0x4d, 0x49, 0x41, 0x1a, 0x11,
	0x0a, 0x0f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x32, 0x5f, 0x4d, 0x49,
	0x41, 0x1a, 0x11, 0x0a, 0x0f, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x33,
	0x5f, 0x4d, 0x49, 0x41, 0x1a, 0x0e, 0x0a, 0x0c, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x46, 0x49, 0x42,
	0x5f, 0x4d, 0x49, 0x41, 0x1a, 0xd3, 0x01, 0x0a, 0x15, 0x61, 0x30, 0x30, 0x39, 0x5f, 0x69, 0x73,
	0x6f, 0x44, 0x69, 0x61, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x32,
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x56, 0x42, 0x75, 0x73, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x56, 0x42, 0x75, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x47,
	0x6e, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x47, 0x6e, 0x64, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4e,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x6f, 0x0a, 0x13, 0x61, 0x30,
	0x31, 0x30, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x73,
	0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x2a, 0x0a, 0x10, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x73, 0x6f, 0x52, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x1a, 0x7a, 0x0a, 0x1e, 0x61,
	0x30, 0x31, 0x31, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69,
	0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x1a, 0x1b, 0x0a, 0x19, 0x61, 0x30, 0x31, 0x32, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x1a, 0xbf, 0x02, 0x0a, 0x17, 0x61, 0x30, 0x31, 0x33, 0x5f, 0x61, 0x70,
	0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x62, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x66, 0x69, 0x62, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x30,
	0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x30,
	0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x31, 0x41, 0x70, 0x70, 0x47,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x31, 0x41, 0x70, 0x70, 0x47,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x32, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x73, 0x74, 0x69, 0x62, 0x30, 0x32, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74,
	0x69, 0x62, 0x30, 0x33, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74,
	0x69, 0x62, 0x30, 0x33, 0x41, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x92, 0x01, 0x0a, 0x18, 0x61, 0x30, 0x31, 0x34, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x15, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x66, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x1a, 0xf5, 0x01, 0x0a, 0x1b,
	0x61, 0x30, 0x31, 0x35, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x10, 0x66,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x15, 0x66, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x13, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x66,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x69, 0x62,
	0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x1a, 0x5f, 0x0a, 0x11, 0x61, 0x30, 0x31,
	0x37, 0x5f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x4a,
	0x0a, 0x15, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdd, 0x01, 0x0a, 0x1f, 0x61,
	0x30, 0x31, 0x38, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4a,
	0x0a, 0x15, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x73, 0x74,
	0x69, 0x62, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x69, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x64, 0x63, 0x64, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74,
	0x69, 0x62, 0x44, 0x43, 0x44, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x69,
	0x62, 0x44, 0x63, 0x64, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa2, 0x03, 0x0a, 0x1b, 0x61,
	0x30, 0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f,
	0x73, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x16, 0x66, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x66, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x5f, 0x73, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x2e, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x12, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x0c, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x13, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x74, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77,
	0x68, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x1a,
	0x3a, 0x0a, 0x1a, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x30, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x3a, 0x0a, 0x1a, 0x61,
	0x30, 0x32, 0x31, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x1b, 0x0a, 0x19, 0x61, 0x30, 0x32, 0x32, 0x5f,
	0x67, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x1a, 0x2f, 0x0a, 0x13, 0x61, 0x30, 0x32, 0x33, 0x5f, 0x62, 0x75, 0x73,
	0x48, 0x56, 0x5f, 0x75, 0x76, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x2f, 0x0a, 0x13, 0x61, 0x30, 0x32, 0x34, 0x5f, 0x62, 0x75,
	0x73, 0x48, 0x56, 0x5f, 0x6f, 0x76, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xcd, 0x02, 0x0a, 0x1e, 0x61, 0x30, 0x32, 0x35, 0x5f,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x30, 0x0a, 0x14, 0x61, 0x30, 0x32, 0x37, 0x5f, 0x32,
	0x34, 0x56, 0x42, 0x75, 0x73, 0x5f, 0x55, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x30, 0x0a, 0x14, 0x61, 0x30, 0x32, 0x38,
	0x5f, 0x32, 0x34, 0x56, 0x42, 0x75, 0x73, 0x5f, 0x4f, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x22, 0x61,
	0x30, 0x32, 0x39, 0x5f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x4e, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x4e, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x0a,
	0x10, 0x61, 0x30, 0x33, 0x30, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x64, 0x1a, 0x30, 0x0a, 0x14, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x46, 0x61, 0x6e, 0x50, 0x77, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x1a, 0x31, 0x0a, 0x15, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x53, 0x74, 0x69, 0x62,
	0x50, 0x77, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x3d, 0x0a, 0x17, 0x61, 0x30, 0x33, 0x33, 0x5f, 0x46,
	0x61, 0x6e, 0x48, 0x77, 0x50, 0x77, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x61, 0x64, 0x1a, 0x5f, 0x0a, 0x21, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f,
	0x69, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x69, 0x62, 0x5f, 0x6d, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74,
	0x69, 0x62, 0x4d, 0x69, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x62, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x69, 0x62, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x17, 0x61, 0x30, 0x33, 0x35, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x75, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x69,
	0x6f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x70,
	0x69, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x1a, 0xf3, 0x02, 0x0a, 0x17, 0x61, 0x30, 0x33, 0x36, 0x5f,
	0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x49, 0x0a, 0x22, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x73, 0x74,
	0x69, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x70, 0x6f, 0x67, 0x6f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x53, 0x74, 0x69, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a,
	0x22, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x6f, 0x67, 0x6f, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x22, 0x70, 0x6f, 0x67, 0x6f,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x70, 0x6f, 0x67, 0x6f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x53, 0x74, 0x69, 0x62, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x22, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x70, 0x6f, 0x67, 0x6f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x67, 0x6f,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x14, 0x0a, 0x12,
	0x61, 0x30, 0x33, 0x37, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0xec, 0x0f, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x31, 0x5f, 0x53,
	0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x31,
	0x12, 0x34, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x30, 0x32, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30,
	0x30, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x30, 0x5f,
	0x4d, 0x49, 0x41, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x2f, 0x0a, 0x04, 0x61,
	0x30, 0x30, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x31,
	0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x35, 0x12, 0x2f, 0x0a, 0x04,
	0x61, 0x30, 0x30, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78, 0x72,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30,
	0x32, 0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x36, 0x12, 0x2f, 0x0a,
	0x04, 0x61, 0x30, 0x30, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x78,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x37, 0x5f, 0x53, 0x54, 0x49, 0x42,
	0x30, 0x33, 0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x37, 0x12, 0x2c,
	0x0a, 0x04, 0x61, 0x30, 0x30, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46,
	0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x46, 0x49, 0x42,
	0x5f, 0x4d, 0x49, 0x41, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x38, 0x12, 0x35, 0x0a, 0x04,
	0x61, 0x30, 0x30, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x78, 0x72,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x39, 0x5f, 0x69, 0x73, 0x6f, 0x44, 0x69,
	0x61, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x30, 0x39, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31,
	0x30, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x30, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x31, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x31, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x31, 0x32, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31,
	0x33, 0x5f, 0x61, 0x70, 0x70, 0x47, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x33, 0x12, 0x38, 0x0a, 0x04,
	0x61, 0x30, 0x31, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x46, 0x78, 0x72,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x31, 0x34, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x35, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x31, 0x35, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x30, 0x31, 0x35, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31,
	0x36, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x36, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x30, 0x31, 0x37, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x37, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x30,
	0x31, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x38, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x38, 0x12, 0x3b, 0x0a, 0x04, 0x61,
	0x30, 0x31, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x78, 0x72, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x73, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x31, 0x39, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x30,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x30, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x32, 0x30, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x31, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30,
	0x32, 0x31, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x31,
	0x12, 0x39, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x32, 0x5f, 0x67,
	0x69, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x32, 0x12, 0x33, 0x0a, 0x04, 0x61,
	0x30, 0x32, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x78, 0x72, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x33, 0x5f, 0x62, 0x75, 0x73, 0x48, 0x56, 0x5f,
	0x75, 0x76, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x33,
	0x12, 0x33, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x34, 0x5f, 0x62,
	0x75, 0x73, 0x48, 0x56, 0x5f, 0x6f, 0x76, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x32, 0x34, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x35, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x32, 0x35, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x32, 0x35, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x37, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x32, 0x37, 0x5f, 0x32, 0x34, 0x56, 0x42, 0x75, 0x73, 0x5f, 0x55, 0x56, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32, 0x37, 0x12, 0x34, 0x0a, 0x04, 0x61,
	0x30, 0x32, 0x38, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x78, 0x72, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x38, 0x5f, 0x32, 0x34, 0x56, 0x42, 0x75, 0x73,
	0x5f, 0x4f, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x32,
	0x38, 0x12, 0x42, 0x0a, 0x04, 0x61, 0x30, 0x32, 0x39, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x32, 0x39, 0x5f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x65, 0x6c, 0x6c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x32, 0x39, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x30, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x33, 0x30, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x30, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x31, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x46, 0x61, 0x6e, 0x50, 0x77, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x31, 0x12, 0x35, 0x0a,
	0x04, 0x61, 0x30, 0x33, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x46, 0x78,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x53, 0x74, 0x69, 0x62,
	0x50, 0x77, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x30, 0x33, 0x32, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x33, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30,
	0x33, 0x33, 0x5f, 0x46, 0x61, 0x6e, 0x48, 0x77, 0x50, 0x77, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x33, 0x12, 0x41, 0x0a,
	0x04, 0x61, 0x30, 0x33, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x46, 0x78,
	0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f, 0x69, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x34,
	0x12, 0x37, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x35, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x35, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x35, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x30, 0x33,
	0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30,
	0x33, 0x36, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x33, 0x37, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x37,
	0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x33, 0x37, 0x42, 0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xa4, 0x09, 0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x58, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f,
	0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x30,
	0x5f, 0x4d, 0x49, 0x41, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30,
	0x30, 0x35, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x31, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42,
	0x30, 0x32, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x58, 0x52, 0x5f,
	0x61, 0x30, 0x30, 0x37, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x30, 0x33, 0x5f, 0x4d, 0x49, 0x41, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x46, 0x49,
	0x42, 0x5f, 0x4d, 0x49, 0x41, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x58, 0x52, 0x5f, 0x61,
	0x30, 0x30, 0x39, 0x5f, 0x69, 0x73, 0x6f, 0x44, 0x69, 0x61, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30,
	0x31, 0x30, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x31, 0x5f,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x46,
	0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0c, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x33, 0x5f, 0x61, 0x70, 0x70, 0x47, 0x69,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0d, 0x12,
	0x20, 0x0a, 0x1c, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x35, 0x5f, 0x66, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30,
	0x31, 0x36, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x73, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64,
	0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x74,
	0x72, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x11, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x31, 0x38, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30,
	0x31, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x73,
	0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x46,
	0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x30, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x30, 0x10, 0x14, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x31, 0x5f, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x31, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x32, 0x5f,
	0x67, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30,
	0x32, 0x33, 0x5f, 0x48, 0x56, 0x42, 0x75, 0x73, 0x5f, 0x55, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x34, 0x5f,
	0x48, 0x56, 0x42, 0x75, 0x73, 0x5f, 0x4f, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x18,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x35, 0x5f, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x58, 0x52, 0x5f,
	0x61, 0x30, 0x32, 0x36, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x1a, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x37, 0x5f, 0x32, 0x34, 0x56, 0x42,
	0x75, 0x73, 0x5f, 0x55, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x1b, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x38, 0x5f, 0x32, 0x34, 0x56, 0x42, 0x75, 0x73,
	0x5f, 0x4f, 0x56, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x1c, 0x12, 0x2a, 0x0a, 0x26, 0x46,
	0x58, 0x52, 0x5f, 0x61, 0x30, 0x32, 0x39, 0x5f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x58, 0x52, 0x5f, 0x61,
	0x30, 0x33, 0x30, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10,
	0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x46, 0x61,
	0x6e, 0x50, 0x77, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x1f, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x33, 0x32, 0x5f, 0x53, 0x74, 0x69, 0x62,
	0x50, 0x77, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x20, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x33, 0x33, 0x5f, 0x46, 0x61, 0x6e, 0x48, 0x77,
	0x50, 0x77, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x21, 0x12,
	0x29, 0x0a, 0x25, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f, 0x69, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x22, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x58,
	0x52, 0x5f, 0x61, 0x30, 0x33, 0x35, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x23, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x58, 0x52, 0x5f, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x70, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x24, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x33, 0x37, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x25, 0x22, 0x7b, 0x0a, 0x11, 0x44, 0x63, 0x61, 0x63,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x33, 0x22, 0xb8, 0x0b, 0x0a, 0x09, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x0a, 0x0e,
	0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x1a, 0xa9,
	0x02, 0x0a, 0x0e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x44, 0x63, 0x61, 0x63, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x63, 0x61, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x63, 0x61, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x63, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x61,
	0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x44, 0x63, 0x61,
	0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x45, 0x63, 0x75, 0x52, 0x0a, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x64, 0x45, 0x63, 0x75, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x22, 0x5d, 0x0a, 0x03, 0x45,
	0x63, 0x75, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x43, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x45, 0x43, 0x55, 0x5f, 0x55, 0x4e, 0x4b, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x43, 0x41,
	0x43, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x45, 0x43, 0x55, 0x5f, 0x50, 0x4f, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x43, 0x41, 0x43, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x45, 0x43, 0x55, 0x5f, 0x50, 0x49, 0x4e, 0x56, 0x10, 0x02, 0x1a, 0x16, 0x0a, 0x14, 0x61, 0x30,
	0x30, 0x33, 0x5f, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x1a, 0x76, 0x0a, 0x1a, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57, 0x1a, 0x69, 0x0a, 0x12, 0x61, 0x30,
	0x30, 0x35, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x57, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x57, 0x1a, 0xde, 0x01, 0x0a, 0x1d, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x63, 0x61, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x63, 0x61, 0x63, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x50, 0x49, 0x4e, 0x56, 0x5f, 0x48,
	0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x50, 0x49, 0x4e, 0x56, 0x48, 0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x50, 0x4f, 0x44, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x48,
	0x65, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x50, 0x4f, 0x44, 0x44, 0x43, 0x44, 0x43, 0x48, 0x65, 0x61, 0x74, 0x73, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x1a, 0xe1, 0x02, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x30, 0x30, 0x31, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x30, 0x32, 0x5f, 0x44, 0x63, 0x61, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x30, 0x32, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x2e, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x12, 0x3b, 0x0a,
	0x04, 0x61, 0x30, 0x30, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x61,
	0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x30,
	0x30, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x35, 0x12,
	0x3e, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x36, 0x42,
	0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x07, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x61, 0x30,
	0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x44, 0x63, 0x61, 0x63,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x55, 0x58, 0x5f,
	0x61, 0x30, 0x30, 0x33, 0x5f, 0x4e, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x61,
	0x30, 0x30, 0x34, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x55, 0x58, 0x5f, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x41, 0x55, 0x58,
	0x5f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x72, 0x61, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x06,
	0x22, 0xc4, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a,
	0x09, 0x66, 0x78, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x69, 0x62, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x74, 0x61, 0x75, 0x78, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x61, 0x75, 0x78, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x45,
	0x63, 0x75, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x34, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x5e, 0x0a,
	0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x0d,
	0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_alerts_proto_rawDescOnce sync.Once
	file_alerts_proto_rawDescData = file_alerts_proto_rawDesc
)

func file_alerts_proto_rawDescGZIP() []byte {
	file_alerts_proto_rawDescOnce.Do(func() {
		file_alerts_proto_rawDescData = protoimpl.X.CompressGZIP(file_alerts_proto_rawDescData)
	})
	return file_alerts_proto_rawDescData
}

var file_alerts_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_alerts_proto_msgTypes = make([]protoimpl.MessageInfo, 102)
var file_alerts_proto_goTypes = []interface{}{
	(StibAlert_AlertId)(0),                                // 0: StibAlert.AlertId
	(StibAlertA038_FormationCheckFailed_AlertReason)(0),   // 1: StibAlert.a038_FormationCheckFailed.AlertReason
	(FibAlert_AlertId)(0),                                 // 2: FibAlert.AlertId
	(FxrAlert_AlertId)(0),                                 // 3: FxrAlert.AlertId
	(FxrAlertA019FixturePosSmFaultedFaultReason)(0),       // 4: FxrAlert.a019_fixture_pos_sm_faulted.fault_reason
	(TauxAlert_AlertId)(0),                                // 5: TauxAlert.AlertId
	(TauxAlertA002_DcacAlert_Ecu)(0),                      // 6: TauxAlert.a002_DcacAlert.Ecu
	(*AXXX_Reserved)(nil),                                 // 7: aXXX_Reserved
	(*StibAlert)(nil),                                     // 8: StibAlert
	(*FibAlert)(nil),                                      // 9: FibAlert
	(*FxrAlert)(nil),                                      // 10: FxrAlert
	(*DcacAlertMatrices)(nil),                             // 11: DcacAlertMatrices
	(*TauxAlert)(nil),                                     // 12: TauxAlert
	(*AlertLog)(nil),                                      // 13: AlertLog
	(*AlertMatrix)(nil),                                   // 14: AlertMatrix
	(*Alerts)(nil),                                        // 15: Alerts
	(*StibAlertA004_CpuOverRun)(nil),                      // 16: StibAlert.a004_CpuOverRun
	(*StibAlertA007_TaskStackOverrun)(nil),                // 17: StibAlert.a007_TaskStackOverrun
	(*StibAlertA009_PS24V)(nil),                           // 18: StibAlert.a009_PS24V
	(*StibAlertA010_EnumerationWriteFail)(nil),            // 19: StibAlert.a010_EnumerationWriteFail
	(*StibAlertA011_CurrentSensorHwOC)(nil),               // 20: StibAlert.a011_CurrentSensorHwOC
	(*StibAlertA012_ComparatorHwOC)(nil),                  // 21: StibAlert.a012_ComparatorHwOC
	(*StibAlertA013_SwOC)(nil),                            // 22: StibAlert.a013_SwOC
	(*StibAlertA014_BusUV)(nil),                           // 23: StibAlert.a014_BusUV
	(*StibAlertA015_BusOV)(nil),                           // 24: StibAlert.a015_BusOV
	(*StibAlertA016_StringOV)(nil),                        // 25: StibAlert.a016_StringOV
	(*StibAlertA017_StringUV)(nil),                        // 26: StibAlert.a017_StringUV
	(*StibAlertA018_SwitchTempTooHigh)(nil),               // 27: StibAlert.a018_SwitchTempTooHigh
	(*StibAlertA020_VoltageMatchingTimeout)(nil),          // 28: StibAlert.a020_VoltageMatchingTimeout
	(*StibAlertA024IrefCorrectionIrrational)(nil),         // 29: StibAlert.a024_irefCorrectionIrrational
	(*StibAlertA025_Rail12V)(nil),                         // 30: StibAlert.a025_Rail12V
	(*StibAlertA026_Rail5V)(nil),                          // 31: StibAlert.a026_Rail5V
	(*StibAlertA027_Rail3V3A)(nil),                        // 32: StibAlert.a027_Rail3V3a
	(*StibAlertA028_AppliedCurrentIsSaturated)(nil),       // 33: StibAlert.a028_AppliedCurrentIsSaturated
	(*StibAlertA029_CellSafetyCheckFailed)(nil),           // 34: StibAlert.a029_CellSafetyCheckFailed
	(*StibAlertA030_CellQualityCheckFailed)(nil),          // 35: StibAlert.a030_CellQualityCheckFailed
	(*StibAlertA031_CellOV)(nil),                          // 36: StibAlert.a031_CellOV
	(*StibAlertA032_CellUV)(nil),                          // 37: StibAlert.a032_CellUV
	(*StibAlertA034_PogoVIrrational)(nil),                 // 38: StibAlert.a034_PogoVIrrational
	(*StibAlertA035_CibFaulted)(nil),                      // 39: StibAlert.a035_CibFaulted
	(*StibAlertA045_CIB_NegVoltageProtection)(nil),        // 40: StibAlert.a045_CIB_NegVoltageProtection
	(*StibAlertA036_CellTempTooHigh)(nil),                 // 41: StibAlert.a036_CellTempTooHigh
	(*StibAlertA037_FormationTimeout)(nil),                // 42: StibAlert.a037_FormationTimeout
	(*StibAlertA038_FormationCheckFailed)(nil),            // 43: StibAlert.a038_FormationCheckFailed
	(*StibAlertA041_CIBDataInvalid)(nil),                  // 44: StibAlert.a041_CIBDataInvalid
	(*StibAlertA044_CIBCellSwitchWriteFail)(nil),          // 45: StibAlert.a044_CIBCellSwitchWriteFail
	(*StibAlertA046_CIB_STIB_VStringDiffCheckFail)(nil),   // 46: StibAlert.a046_CIB_STIB_VStringDiffCheckFail
	(*StibAlertA047_ShuntCalibrationFail)(nil),            // 47: StibAlert.a047_ShuntCalibrationFail
	(*StibAlertA048_CIBCellSwitchWriteFailPermanent)(nil), // 48: StibAlert.a048_CIBCellSwitchWriteFailPermanent
	(*StibAlertA049_CellDvDtOutOfBounds)(nil),             // 49: StibAlert.a049_CellDvDtOutOfBounds
	(*StibAlertA050_CellDetectMIA)(nil),                   // 50: StibAlert.a050_CellDetectMIA
	(*StibAlertA051_ParamLimitVoltageCheckFailed)(nil),    // 51: StibAlert.a051_ParamLimitVoltageCheckFailed
	(*StibAlertA052_ParamLimitDvDtCheckFailed)(nil),       // 52: StibAlert.a052_ParamLimitDvDtCheckFailed
	(*StibAlertA053_ParamLimitTempCheckFailed)(nil),       // 53: StibAlert.a053_ParamLimitTempCheckFailed
	(*StibAlertA054_ParamLimitCapacityCheckFailed)(nil),   // 54: StibAlert.a054_ParamLimitCapacityCheckFailed
	(*StibAlert_AlertData)(nil),                           // 55: StibAlert.AlertData
	(*FibAlertA002WatchdogExpired)(nil),                   // 56: FibAlert.a002_watchdogExpired
	(*FibAlertA003InternalFault)(nil),                     // 57: FibAlert.a003_internalFault
	(*FibAlertA004_FanRpmFault)(nil),                      // 58: FibAlert.a004_FanRpmFault
	(*FibAlertA005_FanTotalFault)(nil),                    // 59: FibAlert.a005_FanTotalFault
	(*FibAlertA006_FanRationalFault)(nil),                 // 60: FibAlert.a006_FanRationalFault
	(*FibAlertA007_CpuOverRun)(nil),                       // 61: FibAlert.a007_CpuOverRun
	(*FibAlertA008_TaskStackOverrun)(nil),                 // 62: FibAlert.a008_TaskStackOverrun
	(*FibAlertA009_FIBrxCommandMIA)(nil),                  // 63: FibAlert.a009_FIBrxCommandMIA
	(*FibAlert_AlertData)(nil),                            // 64: FibAlert.AlertData
	(*FxrAlertA001_SwAppBoot)(nil),                        // 65: FxrAlert.a001_SwAppBoot
	(*FxrAlertA002WatchdogExpired)(nil),                   // 66: FxrAlert.a002_watchdogExpired
	(*FxrAlertA003InternalFault)(nil),                     // 67: FxrAlert.a003_internalFault
	(*FxrAlertA004_STIB00_MIA)(nil),                       // 68: FxrAlert.a004_STIB00_MIA
	(*FxrAlertA005_STIB01_MIA)(nil),                       // 69: FxrAlert.a005_STIB01_MIA
	(*FxrAlertA006_STIB02_MIA)(nil),                       // 70: FxrAlert.a006_STIB02_MIA
	(*FxrAlertA007_STIB03_MIA)(nil),                       // 71: FxrAlert.a007_STIB03_MIA
	(*FxrAlertA008_FIB_MIA)(nil),                          // 72: FxrAlert.a008_FIB_MIA
	(*FxrAlertA009IsoDiagCheckFail)(nil),                  // 73: FxrAlert.a009_isoDiagCheckFail
	(*FxrAlertA010IsolationFault)(nil),                    // 74: FxrAlert.a010_isolationFault
	(*FxrAlertA011IsolationDegradationFault)(nil),         // 75: FxrAlert.a011_isolationDegradationFault
	(*FxrAlertA012EnumerationWriteFail)(nil),              // 76: FxrAlert.a012_enumerationWriteFail
	(*FxrAlertA013AppGitHashMismatch)(nil),                // 77: FxrAlert.a013_appGitHashMismatch
	(*FxrAlertA014StateMachineFault)(nil),                 // 78: FxrAlert.a014_state_machine_fault
	(*FxrAlertA015FixturePositionFault)(nil),              // 79: FxrAlert.a015_fixture_position_fault
	(*FxrAlertA016StibsFaulted)(nil),                      // 80: FxrAlert.a016_stibs_faulted
	(*FxrAlertA017TrayMissing)(nil),                       // 81: FxrAlert.a017_tray_missing
	(*FxrAlertA018FixtureControlSmTimeout)(nil),           // 82: FxrAlert.a018_fixture_control_sm_timeout
	(*FxrAlertA019FixturePosSmFaulted)(nil),               // 83: FxrAlert.a019_fixture_pos_sm_faulted
	(*FxrAlertA020ThermalEventLevel_0)(nil),               // 84: FxrAlert.a020_thermal_event_level_0
	(*FxrAlertA021ThermalEventLevel_1)(nil),               // 85: FxrAlert.a021_thermal_event_level_1
	(*FxrAlertA022GitMismatchTimeout)(nil),                // 86: FxrAlert.a022_git_mismatch_timeout
	(*FxrAlertA023BusHVUvFault)(nil),                      // 87: FxrAlert.a023_busHV_uv_fault
	(*FxrAlertA024BusHVOvFault)(nil),                      // 88: FxrAlert.a024_busHV_ov_fault
	(*FxrAlertA025_EquipmentNeedsMaintenance)(nil),        // 89: FxrAlert.a025_EquipmentNeedsMaintenance
	(*FxrAlertA027_24VBus_UVFault)(nil),                   // 90: FxrAlert.a027_24VBus_UV_fault
	(*FxrAlertA028_24VBus_OVFault)(nil),                   // 91: FxrAlert.a028_24VBus_OV_fault
	(*FxrAlertA029_RecipeMaskMissingCelldetected)(nil),    // 92: FxrAlert.a029_RecipeMaskMissingCelldetected
	(*FxrAlertA030FibFaulted)(nil),                        // 93: FxrAlert.a030_fib_faulted
	(*FxrAlertA031_FanPwrCheckFail)(nil),                  // 94: FxrAlert.a031_FanPwrCheckFail
	(*FxrAlertA032_StibPwrCheckFail)(nil),                 // 95: FxrAlert.a032_StibPwrCheckFail
	(*FxrAlertA033_FanHwPwrSupplyFail)(nil),               // 96: FxrAlert.a033_FanHwPwrSupplyFail
	(*FxrAlertA034TempSensorCommsIrrational)(nil),         // 97: FxrAlert.a034_temp_sensor_comms_irrational
	(*FxrAlertA035EnumerationChange)(nil),                 // 98: FxrAlert.a035_enumeration_change
	(*FxrAlertA036PogoMonitorFault)(nil),                  // 99: FxrAlert.a036_pogo_monitor_fault
	(*FxrAlertA037FaultRequest)(nil),                      // 100: FxrAlert.a037_fault_request
	(*FxrAlert_AlertData)(nil),                            // 101: FxrAlert.AlertData
	(*TauxAlertA001_SwAppBoot)(nil),                       // 102: TauxAlert.a001_SwAppBoot
	(*TauxAlertA002_DcacAlert)(nil),                       // 103: TauxAlert.a002_DcacAlert
	(*TauxAlertA003_NoPowerCapacity)(nil),                 // 104: TauxAlert.a003_NoPowerCapacity
	(*TauxAlertA004_PowerCapacityDecrease)(nil),           // 105: TauxAlert.a004_PowerCapacityDecrease
	(*TauxAlertA005_PowerOverload)(nil),                   // 106: TauxAlert.a005_PowerOverload
	(*TauxAlertA006_PowertrayOverTemperature)(nil),        // 107: TauxAlert.a006_PowertrayOverTemperature
	(*TauxAlert_AlertData)(nil),                           // 108: TauxAlert.AlertData
	(StibFormState)(0),                                    // 109: StibFormState
	(ShuntCalStatus)(0),                                   // 110: ShuntCalStatus
	(ParamLimitActive)(0),                                 // 111: ParamLimitActive
	(CellStatus)(0),                                       // 112: CellStatus
	(FixtureControlSmState)(0),                            // 113: FixtureControlSmState
	(FixturePosition)(0),                                  // 114: FixturePosition
	(FixturePositionSmState)(0),                           // 115: FixturePositionSmState
	(StibDCDCState)(0),                                    // 116: StibDCDCState
	(MaintenanceReason)(0),                                // 117: MaintenanceReason
}
var file_alerts_proto_depIdxs = []int32{
	0,   // 0: StibAlert.alert_id:type_name -> StibAlert.AlertId
	55,  // 1: StibAlert.data:type_name -> StibAlert.AlertData
	2,   // 2: FibAlert.alert_id:type_name -> FibAlert.AlertId
	64,  // 3: FibAlert.data:type_name -> FibAlert.AlertData
	3,   // 4: FxrAlert.alert_id:type_name -> FxrAlert.AlertId
	101, // 5: FxrAlert.data:type_name -> FxrAlert.AlertData
	5,   // 6: TauxAlert.alert_id:type_name -> TauxAlert.AlertId
	108, // 7: TauxAlert.data:type_name -> TauxAlert.AlertData
	10,  // 8: AlertLog.fxr_alert:type_name -> FxrAlert
	9,   // 9: AlertLog.fib_alert:type_name -> FibAlert
	8,   // 10: AlertLog.stib_alert:type_name -> StibAlert
	12,  // 11: AlertLog.taux_alert:type_name -> TauxAlert
	13,  // 12: Alerts.log:type_name -> AlertLog
	14,  // 13: Alerts.matrix:type_name -> AlertMatrix
	109, // 14: StibAlert.a037_FormationTimeout.stib_form_state:type_name -> StibFormState
	109, // 15: StibAlert.a038_FormationCheckFailed.stib_form_state:type_name -> StibFormState
	1,   // 16: StibAlert.a038_FormationCheckFailed.alert_reason:type_name -> StibAlert.a038_FormationCheckFailed.AlertReason
	110, // 17: StibAlert.a047_ShuntCalibrationFail.status:type_name -> ShuntCalStatus
	111, // 18: StibAlert.a051_ParamLimitVoltageCheckFailed.limit_active:type_name -> ParamLimitActive
	112, // 19: StibAlert.a051_ParamLimitVoltageCheckFailed.status:type_name -> CellStatus
	111, // 20: StibAlert.a052_ParamLimitDvDtCheckFailed.limit_active:type_name -> ParamLimitActive
	112, // 21: StibAlert.a052_ParamLimitDvDtCheckFailed.status:type_name -> CellStatus
	111, // 22: StibAlert.a053_ParamLimitTempCheckFailed.limit_active:type_name -> ParamLimitActive
	112, // 23: StibAlert.a053_ParamLimitTempCheckFailed.status:type_name -> CellStatus
	111, // 24: StibAlert.a054_ParamLimitCapacityCheckFailed.limit_active:type_name -> ParamLimitActive
	112, // 25: StibAlert.a054_ParamLimitCapacityCheckFailed.status:type_name -> CellStatus
	7,   // 26: StibAlert.AlertData.a003:type_name -> aXXX_Reserved
	16,  // 27: StibAlert.AlertData.a004:type_name -> StibAlert.a004_CpuOverRun
	7,   // 28: StibAlert.AlertData.a005:type_name -> aXXX_Reserved
	7,   // 29: StibAlert.AlertData.a006:type_name -> aXXX_Reserved
	17,  // 30: StibAlert.AlertData.a007:type_name -> StibAlert.a007_TaskStackOverrun
	7,   // 31: StibAlert.AlertData.a008:type_name -> aXXX_Reserved
	7,   // 32: StibAlert.AlertData.a009:type_name -> aXXX_Reserved
	19,  // 33: StibAlert.AlertData.a010:type_name -> StibAlert.a010_EnumerationWriteFail
	7,   // 34: StibAlert.AlertData.a011:type_name -> aXXX_Reserved
	7,   // 35: StibAlert.AlertData.a012:type_name -> aXXX_Reserved
	7,   // 36: StibAlert.AlertData.a013:type_name -> aXXX_Reserved
	7,   // 37: StibAlert.AlertData.a014:type_name -> aXXX_Reserved
	7,   // 38: StibAlert.AlertData.a015:type_name -> aXXX_Reserved
	7,   // 39: StibAlert.AlertData.a016:type_name -> aXXX_Reserved
	7,   // 40: StibAlert.AlertData.a017:type_name -> aXXX_Reserved
	7,   // 41: StibAlert.AlertData.a018:type_name -> aXXX_Reserved
	7,   // 42: StibAlert.AlertData.a019:type_name -> aXXX_Reserved
	28,  // 43: StibAlert.AlertData.a020:type_name -> StibAlert.a020_VoltageMatchingTimeout
	7,   // 44: StibAlert.AlertData.a021:type_name -> aXXX_Reserved
	7,   // 45: StibAlert.AlertData.a022:type_name -> aXXX_Reserved
	7,   // 46: StibAlert.AlertData.a023:type_name -> aXXX_Reserved
	29,  // 47: StibAlert.AlertData.a024:type_name -> StibAlert.a024_irefCorrectionIrrational
	7,   // 48: StibAlert.AlertData.a025:type_name -> aXXX_Reserved
	7,   // 49: StibAlert.AlertData.a026:type_name -> aXXX_Reserved
	7,   // 50: StibAlert.AlertData.a027:type_name -> aXXX_Reserved
	33,  // 51: StibAlert.AlertData.a028:type_name -> StibAlert.a028_AppliedCurrentIsSaturated
	34,  // 52: StibAlert.AlertData.a029:type_name -> StibAlert.a029_CellSafetyCheckFailed
	35,  // 53: StibAlert.AlertData.a030:type_name -> StibAlert.a030_CellQualityCheckFailed
	36,  // 54: StibAlert.AlertData.a031:type_name -> StibAlert.a031_CellOV
	37,  // 55: StibAlert.AlertData.a032:type_name -> StibAlert.a032_CellUV
	7,   // 56: StibAlert.AlertData.a033:type_name -> aXXX_Reserved
	38,  // 57: StibAlert.AlertData.a034:type_name -> StibAlert.a034_PogoVIrrational
	39,  // 58: StibAlert.AlertData.a035:type_name -> StibAlert.a035_CibFaulted
	41,  // 59: StibAlert.AlertData.a036:type_name -> StibAlert.a036_CellTempTooHigh
	42,  // 60: StibAlert.AlertData.a037:type_name -> StibAlert.a037_FormationTimeout
	43,  // 61: StibAlert.AlertData.a038:type_name -> StibAlert.a038_FormationCheckFailed
	7,   // 62: StibAlert.AlertData.a039:type_name -> aXXX_Reserved
	7,   // 63: StibAlert.AlertData.a040:type_name -> aXXX_Reserved
	44,  // 64: StibAlert.AlertData.a041:type_name -> StibAlert.a041_CIBDataInvalid
	7,   // 65: StibAlert.AlertData.a042:type_name -> aXXX_Reserved
	7,   // 66: StibAlert.AlertData.a043:type_name -> aXXX_Reserved
	45,  // 67: StibAlert.AlertData.a044:type_name -> StibAlert.a044_CIBCellSwitchWriteFail
	40,  // 68: StibAlert.AlertData.a045:type_name -> StibAlert.a045_CIB_NegVoltageProtection
	46,  // 69: StibAlert.AlertData.a046:type_name -> StibAlert.a046_CIB_STIB_VStringDiffCheckFail
	47,  // 70: StibAlert.AlertData.a047:type_name -> StibAlert.a047_ShuntCalibrationFail
	48,  // 71: StibAlert.AlertData.a048:type_name -> StibAlert.a048_CIBCellSwitchWriteFailPermanent
	49,  // 72: StibAlert.AlertData.a049:type_name -> StibAlert.a049_CellDvDtOutOfBounds
	50,  // 73: StibAlert.AlertData.a050:type_name -> StibAlert.a050_CellDetectMIA
	51,  // 74: StibAlert.AlertData.a051:type_name -> StibAlert.a051_ParamLimitVoltageCheckFailed
	52,  // 75: StibAlert.AlertData.a052:type_name -> StibAlert.a052_ParamLimitDvDtCheckFailed
	53,  // 76: StibAlert.AlertData.a053:type_name -> StibAlert.a053_ParamLimitTempCheckFailed
	54,  // 77: StibAlert.AlertData.a054:type_name -> StibAlert.a054_ParamLimitCapacityCheckFailed
	56,  // 78: FibAlert.AlertData.a002:type_name -> FibAlert.a002_watchdogExpired
	57,  // 79: FibAlert.AlertData.a003:type_name -> FibAlert.a003_internalFault
	58,  // 80: FibAlert.AlertData.a004:type_name -> FibAlert.a004_FanRpmFault
	59,  // 81: FibAlert.AlertData.a005:type_name -> FibAlert.a005_FanTotalFault
	60,  // 82: FibAlert.AlertData.a006:type_name -> FibAlert.a006_FanRationalFault
	61,  // 83: FibAlert.AlertData.a007:type_name -> FibAlert.a007_CpuOverRun
	62,  // 84: FibAlert.AlertData.a008:type_name -> FibAlert.a008_TaskStackOverrun
	63,  // 85: FibAlert.AlertData.a009:type_name -> FibAlert.a009_FIBrxCommandMIA
	113, // 86: FxrAlert.a014_state_machine_fault.fixture_control_state:type_name -> FixtureControlSmState
	114, // 87: FxrAlert.a015_fixture_position_fault.fixture_position:type_name -> FixturePosition
	113, // 88: FxrAlert.a015_fixture_position_fault.fixture_control_state:type_name -> FixtureControlSmState
	115, // 89: FxrAlert.a015_fixture_position_fault.fixture_position_state:type_name -> FixturePositionSmState
	113, // 90: FxrAlert.a017_tray_missing.fixture_control_state:type_name -> FixtureControlSmState
	113, // 91: FxrAlert.a018_fixture_control_sm_timeout.fixture_control_state:type_name -> FixtureControlSmState
	109, // 92: FxrAlert.a018_fixture_control_sm_timeout.stib_form_state:type_name -> StibFormState
	116, // 93: FxrAlert.a018_fixture_control_sm_timeout.stib_dcdc_state:type_name -> StibDCDCState
	115, // 94: FxrAlert.a019_fixture_pos_sm_faulted.fixture_position_state:type_name -> FixturePositionSmState
	114, // 95: FxrAlert.a019_fixture_pos_sm_faulted.fixture_position:type_name -> FixturePosition
	4,   // 96: FxrAlert.a019_fixture_pos_sm_faulted.fixture_fault_reason:type_name -> FxrAlert.a019_fixture_pos_sm_faulted.fault_reason
	117, // 97: FxrAlert.a025_EquipmentNeedsMaintenance.maintenance_reason:type_name -> MaintenanceReason
	65,  // 98: FxrAlert.AlertData.a001:type_name -> FxrAlert.a001_SwAppBoot
	66,  // 99: FxrAlert.AlertData.a002:type_name -> FxrAlert.a002_watchdogExpired
	67,  // 100: FxrAlert.AlertData.a003:type_name -> FxrAlert.a003_internalFault
	68,  // 101: FxrAlert.AlertData.a004:type_name -> FxrAlert.a004_STIB00_MIA
	69,  // 102: FxrAlert.AlertData.a005:type_name -> FxrAlert.a005_STIB01_MIA
	70,  // 103: FxrAlert.AlertData.a006:type_name -> FxrAlert.a006_STIB02_MIA
	71,  // 104: FxrAlert.AlertData.a007:type_name -> FxrAlert.a007_STIB03_MIA
	72,  // 105: FxrAlert.AlertData.a008:type_name -> FxrAlert.a008_FIB_MIA
	73,  // 106: FxrAlert.AlertData.a009:type_name -> FxrAlert.a009_isoDiagCheckFail
	74,  // 107: FxrAlert.AlertData.a010:type_name -> FxrAlert.a010_isolationFault
	75,  // 108: FxrAlert.AlertData.a011:type_name -> FxrAlert.a011_isolationDegradationFault
	76,  // 109: FxrAlert.AlertData.a012:type_name -> FxrAlert.a012_enumerationWriteFail
	77,  // 110: FxrAlert.AlertData.a013:type_name -> FxrAlert.a013_appGitHashMismatch
	78,  // 111: FxrAlert.AlertData.a014:type_name -> FxrAlert.a014_state_machine_fault
	79,  // 112: FxrAlert.AlertData.a015:type_name -> FxrAlert.a015_fixture_position_fault
	80,  // 113: FxrAlert.AlertData.a016:type_name -> FxrAlert.a016_stibs_faulted
	81,  // 114: FxrAlert.AlertData.a017:type_name -> FxrAlert.a017_tray_missing
	82,  // 115: FxrAlert.AlertData.a018:type_name -> FxrAlert.a018_fixture_control_sm_timeout
	83,  // 116: FxrAlert.AlertData.a019:type_name -> FxrAlert.a019_fixture_pos_sm_faulted
	84,  // 117: FxrAlert.AlertData.a020:type_name -> FxrAlert.a020_thermal_event_level_0
	85,  // 118: FxrAlert.AlertData.a021:type_name -> FxrAlert.a021_thermal_event_level_1
	86,  // 119: FxrAlert.AlertData.a022:type_name -> FxrAlert.a022_git_mismatch_timeout
	87,  // 120: FxrAlert.AlertData.a023:type_name -> FxrAlert.a023_busHV_uv_fault
	88,  // 121: FxrAlert.AlertData.a024:type_name -> FxrAlert.a024_busHV_ov_fault
	89,  // 122: FxrAlert.AlertData.a025:type_name -> FxrAlert.a025_EquipmentNeedsMaintenance
	90,  // 123: FxrAlert.AlertData.a027:type_name -> FxrAlert.a027_24VBus_UV_fault
	91,  // 124: FxrAlert.AlertData.a028:type_name -> FxrAlert.a028_24VBus_OV_fault
	92,  // 125: FxrAlert.AlertData.a029:type_name -> FxrAlert.a029_RecipeMaskMissingCelldetected
	93,  // 126: FxrAlert.AlertData.a030:type_name -> FxrAlert.a030_fib_faulted
	94,  // 127: FxrAlert.AlertData.a031:type_name -> FxrAlert.a031_FanPwrCheckFail
	95,  // 128: FxrAlert.AlertData.a032:type_name -> FxrAlert.a032_StibPwrCheckFail
	96,  // 129: FxrAlert.AlertData.a033:type_name -> FxrAlert.a033_FanHwPwrSupplyFail
	97,  // 130: FxrAlert.AlertData.a034:type_name -> FxrAlert.a034_temp_sensor_comms_irrational
	98,  // 131: FxrAlert.AlertData.a035:type_name -> FxrAlert.a035_enumeration_change
	99,  // 132: FxrAlert.AlertData.a036:type_name -> FxrAlert.a036_pogo_monitor_fault
	100, // 133: FxrAlert.AlertData.a037:type_name -> FxrAlert.a037_fault_request
	6,   // 134: TauxAlert.a002_DcacAlert.faulted_ecu:type_name -> TauxAlert.a002_DcacAlert.Ecu
	102, // 135: TauxAlert.AlertData.a001:type_name -> TauxAlert.a001_SwAppBoot
	103, // 136: TauxAlert.AlertData.a002:type_name -> TauxAlert.a002_DcacAlert
	104, // 137: TauxAlert.AlertData.a003:type_name -> TauxAlert.a003_NoPowerCapacity
	105, // 138: TauxAlert.AlertData.a004:type_name -> TauxAlert.a004_PowerCapacityDecrease
	106, // 139: TauxAlert.AlertData.a005:type_name -> TauxAlert.a005_PowerOverload
	107, // 140: TauxAlert.AlertData.a006:type_name -> TauxAlert.a006_PowertrayOverTemperature
	141, // [141:141] is the sub-list for method output_type
	141, // [141:141] is the sub-list for method input_type
	141, // [141:141] is the sub-list for extension type_name
	141, // [141:141] is the sub-list for extension extendee
	0,   // [0:141] is the sub-list for field type_name
}

func init() { file_alerts_proto_init() }
func file_alerts_proto_init() {
	if File_alerts_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_alerts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AXXX_Reserved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DcacAlertMatrices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA004_CpuOverRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA007_TaskStackOverrun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA009_PS24V); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA010_EnumerationWriteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA011_CurrentSensorHwOC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA012_ComparatorHwOC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA013_SwOC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA014_BusUV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA015_BusOV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA016_StringOV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA017_StringUV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA018_SwitchTempTooHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA020_VoltageMatchingTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA024IrefCorrectionIrrational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA025_Rail12V); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA026_Rail5V); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA027_Rail3V3A); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA028_AppliedCurrentIsSaturated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA029_CellSafetyCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA030_CellQualityCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA031_CellOV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA032_CellUV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA034_PogoVIrrational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA035_CibFaulted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA045_CIB_NegVoltageProtection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA036_CellTempTooHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA037_FormationTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA038_FormationCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA041_CIBDataInvalid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA044_CIBCellSwitchWriteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA046_CIB_STIB_VStringDiffCheckFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA047_ShuntCalibrationFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA048_CIBCellSwitchWriteFailPermanent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA049_CellDvDtOutOfBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA050_CellDetectMIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA051_ParamLimitVoltageCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA052_ParamLimitDvDtCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA053_ParamLimitTempCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA054_ParamLimitCapacityCheckFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlert_AlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA002WatchdogExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA003InternalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA004_FanRpmFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA005_FanTotalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA006_FanRationalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA007_CpuOverRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA008_TaskStackOverrun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA009_FIBrxCommandMIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlert_AlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA001_SwAppBoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA002WatchdogExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA003InternalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA004_STIB00_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA005_STIB01_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA006_STIB02_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA007_STIB03_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA008_FIB_MIA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA009IsoDiagCheckFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA010IsolationFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA011IsolationDegradationFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA012EnumerationWriteFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA013AppGitHashMismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA014StateMachineFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA015FixturePositionFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA016StibsFaulted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA017TrayMissing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA018FixtureControlSmTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA019FixturePosSmFaulted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA020ThermalEventLevel_0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA021ThermalEventLevel_1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA022GitMismatchTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA023BusHVUvFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA024BusHVOvFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA025_EquipmentNeedsMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA027_24VBus_UVFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA028_24VBus_OVFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA029_RecipeMaskMissingCelldetected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA030FibFaulted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA031_FanPwrCheckFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA032_StibPwrCheckFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA033_FanHwPwrSupplyFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA034TempSensorCommsIrrational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA035EnumerationChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA036PogoMonitorFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA037FaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlert_AlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlertA001_SwAppBoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlertA002_DcacAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlertA003_NoPowerCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlertA004_PowerCapacityDecrease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlertA005_PowerOverload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlertA006_PowertrayOverTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TauxAlert_AlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_alerts_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AlertLog_FxrAlert)(nil),
		(*AlertLog_FibAlert)(nil),
		(*AlertLog_StibAlert)(nil),
		(*AlertLog_TauxAlert)(nil),
	}
	file_alerts_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Alerts_Log)(nil),
		(*Alerts_Matrix)(nil),
	}
	file_alerts_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*StibAlert_AlertData_A003)(nil),
		(*StibAlert_AlertData_A004)(nil),
		(*StibAlert_AlertData_A005)(nil),
		(*StibAlert_AlertData_A006)(nil),
		(*StibAlert_AlertData_A007)(nil),
		(*StibAlert_AlertData_A008)(nil),
		(*StibAlert_AlertData_A009)(nil),
		(*StibAlert_AlertData_A010)(nil),
		(*StibAlert_AlertData_A011)(nil),
		(*StibAlert_AlertData_A012)(nil),
		(*StibAlert_AlertData_A013)(nil),
		(*StibAlert_AlertData_A014)(nil),
		(*StibAlert_AlertData_A015)(nil),
		(*StibAlert_AlertData_A016)(nil),
		(*StibAlert_AlertData_A017)(nil),
		(*StibAlert_AlertData_A018)(nil),
		(*StibAlert_AlertData_A019)(nil),
		(*StibAlert_AlertData_A020)(nil),
		(*StibAlert_AlertData_A021)(nil),
		(*StibAlert_AlertData_A022)(nil),
		(*StibAlert_AlertData_A023)(nil),
		(*StibAlert_AlertData_A024)(nil),
		(*StibAlert_AlertData_A025)(nil),
		(*StibAlert_AlertData_A026)(nil),
		(*StibAlert_AlertData_A027)(nil),
		(*StibAlert_AlertData_A028)(nil),
		(*StibAlert_AlertData_A029)(nil),
		(*StibAlert_AlertData_A030)(nil),
		(*StibAlert_AlertData_A031)(nil),
		(*StibAlert_AlertData_A032)(nil),
		(*StibAlert_AlertData_A033)(nil),
		(*StibAlert_AlertData_A034)(nil),
		(*StibAlert_AlertData_A035)(nil),
		(*StibAlert_AlertData_A036)(nil),
		(*StibAlert_AlertData_A037)(nil),
		(*StibAlert_AlertData_A038)(nil),
		(*StibAlert_AlertData_A039)(nil),
		(*StibAlert_AlertData_A040)(nil),
		(*StibAlert_AlertData_A041)(nil),
		(*StibAlert_AlertData_A042)(nil),
		(*StibAlert_AlertData_A043)(nil),
		(*StibAlert_AlertData_A044)(nil),
		(*StibAlert_AlertData_A045)(nil),
		(*StibAlert_AlertData_A046)(nil),
		(*StibAlert_AlertData_A047)(nil),
		(*StibAlert_AlertData_A048)(nil),
		(*StibAlert_AlertData_A049)(nil),
		(*StibAlert_AlertData_A050)(nil),
		(*StibAlert_AlertData_A051)(nil),
		(*StibAlert_AlertData_A052)(nil),
		(*StibAlert_AlertData_A053)(nil),
		(*StibAlert_AlertData_A054)(nil),
	}
	file_alerts_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*FibAlert_AlertData_A002)(nil),
		(*FibAlert_AlertData_A003)(nil),
		(*FibAlert_AlertData_A004)(nil),
		(*FibAlert_AlertData_A005)(nil),
		(*FibAlert_AlertData_A006)(nil),
		(*FibAlert_AlertData_A007)(nil),
		(*FibAlert_AlertData_A008)(nil),
		(*FibAlert_AlertData_A009)(nil),
	}
	file_alerts_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*FxrAlert_AlertData_A001)(nil),
		(*FxrAlert_AlertData_A002)(nil),
		(*FxrAlert_AlertData_A003)(nil),
		(*FxrAlert_AlertData_A004)(nil),
		(*FxrAlert_AlertData_A005)(nil),
		(*FxrAlert_AlertData_A006)(nil),
		(*FxrAlert_AlertData_A007)(nil),
		(*FxrAlert_AlertData_A008)(nil),
		(*FxrAlert_AlertData_A009)(nil),
		(*FxrAlert_AlertData_A010)(nil),
		(*FxrAlert_AlertData_A011)(nil),
		(*FxrAlert_AlertData_A012)(nil),
		(*FxrAlert_AlertData_A013)(nil),
		(*FxrAlert_AlertData_A014)(nil),
		(*FxrAlert_AlertData_A015)(nil),
		(*FxrAlert_AlertData_A016)(nil),
		(*FxrAlert_AlertData_A017)(nil),
		(*FxrAlert_AlertData_A018)(nil),
		(*FxrAlert_AlertData_A019)(nil),
		(*FxrAlert_AlertData_A020)(nil),
		(*FxrAlert_AlertData_A021)(nil),
		(*FxrAlert_AlertData_A022)(nil),
		(*FxrAlert_AlertData_A023)(nil),
		(*FxrAlert_AlertData_A024)(nil),
		(*FxrAlert_AlertData_A025)(nil),
		(*FxrAlert_AlertData_A027)(nil),
		(*FxrAlert_AlertData_A028)(nil),
		(*FxrAlert_AlertData_A029)(nil),
		(*FxrAlert_AlertData_A030)(nil),
		(*FxrAlert_AlertData_A031)(nil),
		(*FxrAlert_AlertData_A032)(nil),
		(*FxrAlert_AlertData_A033)(nil),
		(*FxrAlert_AlertData_A034)(nil),
		(*FxrAlert_AlertData_A035)(nil),
		(*FxrAlert_AlertData_A036)(nil),
		(*FxrAlert_AlertData_A037)(nil),
	}
	file_alerts_proto_msgTypes[101].OneofWrappers = []interface{}{
		(*TauxAlert_AlertData_A001)(nil),
		(*TauxAlert_AlertData_A002)(nil),
		(*TauxAlert_AlertData_A003)(nil),
		(*TauxAlert_AlertData_A004)(nil),
		(*TauxAlert_AlertData_A005)(nil),
		(*TauxAlert_AlertData_A006)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alerts_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   102,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alerts_proto_goTypes,
		DependencyIndexes: file_alerts_proto_depIdxs,
		EnumInfos:         file_alerts_proto_enumTypes,
		MessageInfos:      file_alerts_proto_msgTypes,
	}.Build()
	File_alerts_proto = out.File
	file_alerts_proto_rawDesc = nil
	file_alerts_proto_goTypes = nil
	file_alerts_proto_depIdxs = nil
}
