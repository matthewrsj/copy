// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: alerts.proto

package tower

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StibAlert_AlertId int32

const (
	StibAlert_STIB_NONE                           StibAlert_AlertId = 0
	StibAlert_STIB_a001_SwAppBoot                 StibAlert_AlertId = 1
	StibAlert_STIB_a002_HalError                  StibAlert_AlertId = 2
	StibAlert_STIB_a003_WatchDog                  StibAlert_AlertId = 3
	StibAlert_STIB_a004_CpuOverRun                StibAlert_AlertId = 4
	StibAlert_STIB_a005_CANBusReset               StibAlert_AlertId = 5
	StibAlert_STIB_a006_STIBrx_MIA                StibAlert_AlertId = 6
	StibAlert_STIB_a007_unused                    StibAlert_AlertId = 7
	StibAlert_STIB_a008_unused                    StibAlert_AlertId = 8
	StibAlert_STIB_a009_unused                    StibAlert_AlertId = 9
	StibAlert_STIB_a010_unused                    StibAlert_AlertId = 10
	StibAlert_STIB_a011_AllegroHwOC               StibAlert_AlertId = 11
	StibAlert_STIB_a012_ComparatorHwOC            StibAlert_AlertId = 12
	StibAlert_STIB_a013_SwOC                      StibAlert_AlertId = 13
	StibAlert_STIB_a014_BusU                      StibAlert_AlertId = 14
	StibAlert_STIB_a015_BusOV                     StibAlert_AlertId = 15
	StibAlert_STIB_a016_StringOV                  StibAlert_AlertId = 16
	StibAlert_STIB_a017_StringUV                  StibAlert_AlertId = 17
	StibAlert_STIB_a018_SwitchTempTooHigh         StibAlert_AlertId = 18
	StibAlert_STIB_a019_ShuntTempTooHigh          StibAlert_AlertId = 19
	StibAlert_STIB_a020_VoltageMatchingTimeout    StibAlert_AlertId = 20
	StibAlert_STIB_a021_LossOfCurrentControl      StibAlert_AlertId = 21
	StibAlert_STIB_a022_SensorOffsetTooHigh       StibAlert_AlertId = 22
	StibAlert_STIB_a023_EnableLineLost            StibAlert_AlertId = 23
	StibAlert_STIB_a024_irefCorrectionIrrational  StibAlert_AlertId = 24
	StibAlert_STIB_a025_unused                    StibAlert_AlertId = 25
	StibAlert_STIB_a026_unused                    StibAlert_AlertId = 26
	StibAlert_STIB_a027_unused                    StibAlert_AlertId = 27
	StibAlert_STIB_a028_AppliedCurrentIsSaturated StibAlert_AlertId = 28
	StibAlert_STIB_a029_CellSafetyCheckFailed     StibAlert_AlertId = 29
	StibAlert_STIB_a030_CellQualityCheckFailed    StibAlert_AlertId = 30
	StibAlert_STIB_a031_CellOV                    StibAlert_AlertId = 31
	StibAlert_STIB_a032_CellUV                    StibAlert_AlertId = 32
	StibAlert_STIB_a033_CellDvDT                  StibAlert_AlertId = 33
	StibAlert_STIB_a034_PogoVIrrational           StibAlert_AlertId = 34
	StibAlert_STIB_a035_CibFaulted                StibAlert_AlertId = 35
	StibAlert_STIB_a036_CellTempTooHigh           StibAlert_AlertId = 36
	StibAlert_STIB_a037_FormationTimeout          StibAlert_AlertId = 37
	StibAlert_STIB_a038_FormationCheckFailed      StibAlert_AlertId = 38
	StibAlert_STIB_a039_unused                    StibAlert_AlertId = 39
	StibAlert_STIB_a040_unused                    StibAlert_AlertId = 40
	StibAlert_STIB_a041_CIBDataInvalid_1          StibAlert_AlertId = 41
	StibAlert_STIB_a042_CIBDataInvalid_2          StibAlert_AlertId = 42
	StibAlert_STIB_a043_CIBNotConnected           StibAlert_AlertId = 43
	StibAlert_STIB_a044_CIBCellSwitchWriteFail    StibAlert_AlertId = 44
)

// Enum value maps for StibAlert_AlertId.
var (
	StibAlert_AlertId_name = map[int32]string{
		0:  "STIB_NONE",
		1:  "STIB_a001_SwAppBoot",
		2:  "STIB_a002_HalError",
		3:  "STIB_a003_WatchDog",
		4:  "STIB_a004_CpuOverRun",
		5:  "STIB_a005_CANBusReset",
		6:  "STIB_a006_STIBrx_MIA",
		7:  "STIB_a007_unused",
		8:  "STIB_a008_unused",
		9:  "STIB_a009_unused",
		10: "STIB_a010_unused",
		11: "STIB_a011_AllegroHwOC",
		12: "STIB_a012_ComparatorHwOC",
		13: "STIB_a013_SwOC",
		14: "STIB_a014_BusU",
		15: "STIB_a015_BusOV",
		16: "STIB_a016_StringOV",
		17: "STIB_a017_StringUV",
		18: "STIB_a018_SwitchTempTooHigh",
		19: "STIB_a019_ShuntTempTooHigh",
		20: "STIB_a020_VoltageMatchingTimeout",
		21: "STIB_a021_LossOfCurrentControl",
		22: "STIB_a022_SensorOffsetTooHigh",
		23: "STIB_a023_EnableLineLost",
		24: "STIB_a024_irefCorrectionIrrational",
		25: "STIB_a025_unused",
		26: "STIB_a026_unused",
		27: "STIB_a027_unused",
		28: "STIB_a028_AppliedCurrentIsSaturated",
		29: "STIB_a029_CellSafetyCheckFailed",
		30: "STIB_a030_CellQualityCheckFailed",
		31: "STIB_a031_CellOV",
		32: "STIB_a032_CellUV",
		33: "STIB_a033_CellDvDT",
		34: "STIB_a034_PogoVIrrational",
		35: "STIB_a035_CibFaulted",
		36: "STIB_a036_CellTempTooHigh",
		37: "STIB_a037_FormationTimeout",
		38: "STIB_a038_FormationCheckFailed",
		39: "STIB_a039_unused",
		40: "STIB_a040_unused",
		41: "STIB_a041_CIBDataInvalid_1",
		42: "STIB_a042_CIBDataInvalid_2",
		43: "STIB_a043_CIBNotConnected",
		44: "STIB_a044_CIBCellSwitchWriteFail",
	}
	StibAlert_AlertId_value = map[string]int32{
		"STIB_NONE":                           0,
		"STIB_a001_SwAppBoot":                 1,
		"STIB_a002_HalError":                  2,
		"STIB_a003_WatchDog":                  3,
		"STIB_a004_CpuOverRun":                4,
		"STIB_a005_CANBusReset":               5,
		"STIB_a006_STIBrx_MIA":                6,
		"STIB_a007_unused":                    7,
		"STIB_a008_unused":                    8,
		"STIB_a009_unused":                    9,
		"STIB_a010_unused":                    10,
		"STIB_a011_AllegroHwOC":               11,
		"STIB_a012_ComparatorHwOC":            12,
		"STIB_a013_SwOC":                      13,
		"STIB_a014_BusU":                      14,
		"STIB_a015_BusOV":                     15,
		"STIB_a016_StringOV":                  16,
		"STIB_a017_StringUV":                  17,
		"STIB_a018_SwitchTempTooHigh":         18,
		"STIB_a019_ShuntTempTooHigh":          19,
		"STIB_a020_VoltageMatchingTimeout":    20,
		"STIB_a021_LossOfCurrentControl":      21,
		"STIB_a022_SensorOffsetTooHigh":       22,
		"STIB_a023_EnableLineLost":            23,
		"STIB_a024_irefCorrectionIrrational":  24,
		"STIB_a025_unused":                    25,
		"STIB_a026_unused":                    26,
		"STIB_a027_unused":                    27,
		"STIB_a028_AppliedCurrentIsSaturated": 28,
		"STIB_a029_CellSafetyCheckFailed":     29,
		"STIB_a030_CellQualityCheckFailed":    30,
		"STIB_a031_CellOV":                    31,
		"STIB_a032_CellUV":                    32,
		"STIB_a033_CellDvDT":                  33,
		"STIB_a034_PogoVIrrational":           34,
		"STIB_a035_CibFaulted":                35,
		"STIB_a036_CellTempTooHigh":           36,
		"STIB_a037_FormationTimeout":          37,
		"STIB_a038_FormationCheckFailed":      38,
		"STIB_a039_unused":                    39,
		"STIB_a040_unused":                    40,
		"STIB_a041_CIBDataInvalid_1":          41,
		"STIB_a042_CIBDataInvalid_2":          42,
		"STIB_a043_CIBNotConnected":           43,
		"STIB_a044_CIBCellSwitchWriteFail":    44,
	}
)

func (x StibAlert_AlertId) Enum() *StibAlert_AlertId {
	p := new(StibAlert_AlertId)
	*p = x
	return p
}

func (x StibAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[0].Descriptor()
}

func (StibAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[0]
}

func (x StibAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibAlert_AlertId.Descriptor instead.
func (StibAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 0}
}

type FibAlert_AlertId int32

const (
	FibAlert_FIB_NONE                 FibAlert_AlertId = 0
	FibAlert_FIB_a001_SwAppBoot       FibAlert_AlertId = 1
	FibAlert_FIB_a002_watchdogExpired FibAlert_AlertId = 2
	FibAlert_FIB_a003_internalFault   FibAlert_AlertId = 3
)

// Enum value maps for FibAlert_AlertId.
var (
	FibAlert_AlertId_name = map[int32]string{
		0: "FIB_NONE",
		1: "FIB_a001_SwAppBoot",
		2: "FIB_a002_watchdogExpired",
		3: "FIB_a003_internalFault",
	}
	FibAlert_AlertId_value = map[string]int32{
		"FIB_NONE":                 0,
		"FIB_a001_SwAppBoot":       1,
		"FIB_a002_watchdogExpired": 2,
		"FIB_a003_internalFault":   3,
	}
)

func (x FibAlert_AlertId) Enum() *FibAlert_AlertId {
	p := new(FibAlert_AlertId)
	*p = x
	return p
}

func (x FibAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FibAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[1].Descriptor()
}

func (FibAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[1]
}

func (x FibAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FibAlert_AlertId.Descriptor instead.
func (FibAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 0}
}

type FxrAlert_AlertId int32

const (
	FxrAlert_FXR_NONE                 FxrAlert_AlertId = 0
	FxrAlert_FXR_a001_SwAppBoot       FxrAlert_AlertId = 1
	FxrAlert_FXR_a002_watchdogExpired FxrAlert_AlertId = 2
	FxrAlert_FXR_a003_internalFault   FxrAlert_AlertId = 3
)

// Enum value maps for FxrAlert_AlertId.
var (
	FxrAlert_AlertId_name = map[int32]string{
		0: "FXR_NONE",
		1: "FXR_a001_SwAppBoot",
		2: "FXR_a002_watchdogExpired",
		3: "FXR_a003_internalFault",
	}
	FxrAlert_AlertId_value = map[string]int32{
		"FXR_NONE":                 0,
		"FXR_a001_SwAppBoot":       1,
		"FXR_a002_watchdogExpired": 2,
		"FXR_a003_internalFault":   3,
	}
)

func (x FxrAlert_AlertId) Enum() *FxrAlert_AlertId {
	p := new(FxrAlert_AlertId)
	*p = x
	return p
}

func (x FxrAlert_AlertId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FxrAlert_AlertId) Descriptor() protoreflect.EnumDescriptor {
	return file_alerts_proto_enumTypes[2].Descriptor()
}

func (FxrAlert_AlertId) Type() protoreflect.EnumType {
	return &file_alerts_proto_enumTypes[2]
}

func (x FxrAlert_AlertId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FxrAlert_AlertId.Descriptor instead.
func (FxrAlert_AlertId) EnumDescriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 0}
}

type StibAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId   StibAlert_AlertId `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=StibAlert_AlertId" json:"alert_id,omitempty"`
	StibIndex uint32            `protobuf:"varint,2,opt,name=stib_index,json=stibIndex,proto3" json:"stib_index,omitempty"`
	// Types that are assignable to AlertData:
	//	*StibAlert_A004
	//	*StibAlert_A031
	AlertData isStibAlert_AlertData `protobuf_oneof:"AlertData"`
}

func (x *StibAlert) Reset() {
	*x = StibAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlert) ProtoMessage() {}

func (x *StibAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlert.ProtoReflect.Descriptor instead.
func (*StibAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0}
}

func (x *StibAlert) GetAlertId() StibAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return StibAlert_STIB_NONE
}

func (x *StibAlert) GetStibIndex() uint32 {
	if x != nil {
		return x.StibIndex
	}
	return 0
}

func (m *StibAlert) GetAlertData() isStibAlert_AlertData {
	if m != nil {
		return m.AlertData
	}
	return nil
}

func (x *StibAlert) GetA004() *StibAlertA004_CpuOverRun {
	if x, ok := x.GetAlertData().(*StibAlert_A004); ok {
		return x.A004
	}
	return nil
}

func (x *StibAlert) GetA031() *StibAlertA031_CellOV {
	if x, ok := x.GetAlertData().(*StibAlert_A031); ok {
		return x.A031
	}
	return nil
}

type isStibAlert_AlertData interface {
	isStibAlert_AlertData()
}

type StibAlert_A004 struct {
	A004 *StibAlertA004_CpuOverRun `protobuf:"bytes,4,opt,name=a004,proto3,oneof"`
}

type StibAlert_A031 struct {
	A031 *StibAlertA031_CellOV `protobuf:"bytes,31,opt,name=a031,proto3,oneof"`
}

func (*StibAlert_A004) isStibAlert_AlertData() {}

func (*StibAlert_A031) isStibAlert_AlertData() {}

type FibAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId FibAlert_AlertId `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=FibAlert_AlertId" json:"alert_id,omitempty"`
	// Types that are assignable to AlertData:
	//	*FibAlert_A002
	//	*FibAlert_A003
	AlertData isFibAlert_AlertData `protobuf_oneof:"AlertData"`
}

func (x *FibAlert) Reset() {
	*x = FibAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlert) ProtoMessage() {}

func (x *FibAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlert.ProtoReflect.Descriptor instead.
func (*FibAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1}
}

func (x *FibAlert) GetAlertId() FibAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return FibAlert_FIB_NONE
}

func (m *FibAlert) GetAlertData() isFibAlert_AlertData {
	if m != nil {
		return m.AlertData
	}
	return nil
}

func (x *FibAlert) GetA002() *FibAlertA002WatchdogExpired {
	if x, ok := x.GetAlertData().(*FibAlert_A002); ok {
		return x.A002
	}
	return nil
}

func (x *FibAlert) GetA003() *FibAlertA003InternalFault {
	if x, ok := x.GetAlertData().(*FibAlert_A003); ok {
		return x.A003
	}
	return nil
}

type isFibAlert_AlertData interface {
	isFibAlert_AlertData()
}

type FibAlert_A002 struct {
	A002 *FibAlertA002WatchdogExpired `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type FibAlert_A003 struct {
	A003 *FibAlertA003InternalFault `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

func (*FibAlert_A002) isFibAlert_AlertData() {}

func (*FibAlert_A003) isFibAlert_AlertData() {}

type FxrAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertId FxrAlert_AlertId `protobuf:"varint,1,opt,name=alert_id,json=alertId,proto3,enum=FxrAlert_AlertId" json:"alert_id,omitempty"`
	// Types that are assignable to AlertData:
	//	*FxrAlert_A002
	//	*FxrAlert_A003
	AlertData isFxrAlert_AlertData `protobuf_oneof:"AlertData"`
}

func (x *FxrAlert) Reset() {
	*x = FxrAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlert) ProtoMessage() {}

func (x *FxrAlert) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlert.ProtoReflect.Descriptor instead.
func (*FxrAlert) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2}
}

func (x *FxrAlert) GetAlertId() FxrAlert_AlertId {
	if x != nil {
		return x.AlertId
	}
	return FxrAlert_FXR_NONE
}

func (m *FxrAlert) GetAlertData() isFxrAlert_AlertData {
	if m != nil {
		return m.AlertData
	}
	return nil
}

func (x *FxrAlert) GetA002() *FxrAlertA002WatchdogExpired {
	if x, ok := x.GetAlertData().(*FxrAlert_A002); ok {
		return x.A002
	}
	return nil
}

func (x *FxrAlert) GetA003() *FxrAlertA003InternalFault {
	if x, ok := x.GetAlertData().(*FxrAlert_A003); ok {
		return x.A003
	}
	return nil
}

type isFxrAlert_AlertData interface {
	isFxrAlert_AlertData()
}

type FxrAlert_A002 struct {
	A002 *FxrAlertA002WatchdogExpired `protobuf:"bytes,2,opt,name=a002,proto3,oneof"`
}

type FxrAlert_A003 struct {
	A003 *FxrAlertA003InternalFault `protobuf:"bytes,3,opt,name=a003,proto3,oneof"`
}

func (*FxrAlert_A002) isFxrAlert_AlertData() {}

func (*FxrAlert_A003) isFxrAlert_AlertData() {}

type AlertLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EcuAlert:
	//	*AlertLog_FxrAlert
	//	*AlertLog_FibAlert
	//	*AlertLog_StibAlert
	EcuAlert isAlertLog_EcuAlert `protobuf_oneof:"EcuAlert"`
}

func (x *AlertLog) Reset() {
	*x = AlertLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertLog) ProtoMessage() {}

func (x *AlertLog) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertLog.ProtoReflect.Descriptor instead.
func (*AlertLog) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{3}
}

func (m *AlertLog) GetEcuAlert() isAlertLog_EcuAlert {
	if m != nil {
		return m.EcuAlert
	}
	return nil
}

func (x *AlertLog) GetFxrAlert() *FxrAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_FxrAlert); ok {
		return x.FxrAlert
	}
	return nil
}

func (x *AlertLog) GetFibAlert() *FibAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_FibAlert); ok {
		return x.FibAlert
	}
	return nil
}

func (x *AlertLog) GetStibAlert() *StibAlert {
	if x, ok := x.GetEcuAlert().(*AlertLog_StibAlert); ok {
		return x.StibAlert
	}
	return nil
}

type isAlertLog_EcuAlert interface {
	isAlertLog_EcuAlert()
}

type AlertLog_FxrAlert struct {
	FxrAlert *FxrAlert `protobuf:"bytes,1,opt,name=fxr_alert,json=fxrAlert,proto3,oneof"`
}

type AlertLog_FibAlert struct {
	FibAlert *FibAlert `protobuf:"bytes,2,opt,name=fib_alert,json=fibAlert,proto3,oneof"`
}

type AlertLog_StibAlert struct {
	StibAlert *StibAlert `protobuf:"bytes,3,opt,name=stib_alert,json=stibAlert,proto3,oneof"`
}

func (*AlertLog_FxrAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_FibAlert) isAlertLog_EcuAlert() {}

func (*AlertLog_StibAlert) isAlertLog_EcuAlert() {}

type AlertMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertMatrices []uint32 `protobuf:"varint,1,rep,packed,name=alert_matrices,json=alertMatrices,proto3" json:"alert_matrices,omitempty"`
}

func (x *AlertMatrix) Reset() {
	*x = AlertMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertMatrix) ProtoMessage() {}

func (x *AlertMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertMatrix.ProtoReflect.Descriptor instead.
func (*AlertMatrix) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{4}
}

func (x *AlertMatrix) GetAlertMatrices() []uint32 {
	if x != nil {
		return x.AlertMatrices
	}
	return nil
}

type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AlertDetail:
	//	*Alerts_Log
	//	*Alerts_Matrix
	AlertDetail isAlerts_AlertDetail `protobuf_oneof:"AlertDetail"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{5}
}

func (m *Alerts) GetAlertDetail() isAlerts_AlertDetail {
	if m != nil {
		return m.AlertDetail
	}
	return nil
}

func (x *Alerts) GetLog() *AlertLog {
	if x, ok := x.GetAlertDetail().(*Alerts_Log); ok {
		return x.Log
	}
	return nil
}

func (x *Alerts) GetMatrix() *AlertMatrix {
	if x, ok := x.GetAlertDetail().(*Alerts_Matrix); ok {
		return x.Matrix
	}
	return nil
}

type isAlerts_AlertDetail interface {
	isAlerts_AlertDetail()
}

type Alerts_Log struct {
	Log *AlertLog `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type Alerts_Matrix struct {
	Matrix *AlertMatrix `protobuf:"bytes,2,opt,name=matrix,proto3,oneof"`
}

func (*Alerts_Log) isAlerts_AlertDetail() {}

func (*Alerts_Matrix) isAlerts_AlertDetail() {}

type StibAlertA004_CpuOverRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ISRTimeMax     float32 `protobuf:"fixed32,1,opt,name=ISR_time_max,json=ISRTimeMax,proto3" json:"ISR_time_max,omitempty"`            // us
	F_1KHzTimeMax  float32 `protobuf:"fixed32,2,opt,name=f_1kHz_time_max,json=f1kHzTimeMax,proto3" json:"f_1kHz_time_max,omitempty"`    // us
	F_100HzTimeMax float32 `protobuf:"fixed32,3,opt,name=f_100Hz_time_max,json=f100HzTimeMax,proto3" json:"f_100Hz_time_max,omitempty"` // us
}

func (x *StibAlertA004_CpuOverRun) Reset() {
	*x = StibAlertA004_CpuOverRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA004_CpuOverRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA004_CpuOverRun) ProtoMessage() {}

func (x *StibAlertA004_CpuOverRun) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA004_CpuOverRun.ProtoReflect.Descriptor instead.
func (*StibAlertA004_CpuOverRun) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StibAlertA004_CpuOverRun) GetISRTimeMax() float32 {
	if x != nil {
		return x.ISRTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_1KHzTimeMax() float32 {
	if x != nil {
		return x.F_1KHzTimeMax
	}
	return 0
}

func (x *StibAlertA004_CpuOverRun) GetF_100HzTimeMax() float32 {
	if x != nil {
		return x.F_100HzTimeMax
	}
	return 0
}

type StibAlertA031_CellOV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellIndex   uint32  `protobuf:"varint,1,opt,name=cell_index,json=cellIndex,proto3" json:"cell_index,omitempty"`
	CellVoltage float32 `protobuf:"fixed32,2,opt,name=cell_voltage,json=cellVoltage,proto3" json:"cell_voltage,omitempty"` // V
}

func (x *StibAlertA031_CellOV) Reset() {
	*x = StibAlertA031_CellOV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibAlertA031_CellOV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibAlertA031_CellOV) ProtoMessage() {}

func (x *StibAlertA031_CellOV) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibAlertA031_CellOV.ProtoReflect.Descriptor instead.
func (*StibAlertA031_CellOV) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{0, 1}
}

func (x *StibAlertA031_CellOV) GetCellIndex() uint32 {
	if x != nil {
		return x.CellIndex
	}
	return 0
}

func (x *StibAlertA031_CellOV) GetCellVoltage() float32 {
	if x != nil {
		return x.CellVoltage
	}
	return 0
}

type FibAlertA002WatchdogExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId float32 `protobuf:"fixed32,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // us
	AppCRC float32 `protobuf:"fixed32,2,opt,name=AppCRC,proto3" json:"AppCRC,omitempty"` // us
}

func (x *FibAlertA002WatchdogExpired) Reset() {
	*x = FibAlertA002WatchdogExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA002WatchdogExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA002WatchdogExpired) ProtoMessage() {}

func (x *FibAlertA002WatchdogExpired) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA002WatchdogExpired.ProtoReflect.Descriptor instead.
func (*FibAlertA002WatchdogExpired) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FibAlertA002WatchdogExpired) GetTaskId() float32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FibAlertA002WatchdogExpired) GetAppCRC() float32 {
	if x != nil {
		return x.AppCRC
	}
	return 0
}

type FibAlertA003InternalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FibAlertA003InternalFault) Reset() {
	*x = FibAlertA003InternalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibAlertA003InternalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibAlertA003InternalFault) ProtoMessage() {}

func (x *FibAlertA003InternalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibAlertA003InternalFault.ProtoReflect.Descriptor instead.
func (*FibAlertA003InternalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{1, 1}
}

type FxrAlertA002WatchdogExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId float32 `protobuf:"fixed32,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // us
	AppCRC float32 `protobuf:"fixed32,2,opt,name=AppCRC,proto3" json:"AppCRC,omitempty"` // us
}

func (x *FxrAlertA002WatchdogExpired) Reset() {
	*x = FxrAlertA002WatchdogExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA002WatchdogExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA002WatchdogExpired) ProtoMessage() {}

func (x *FxrAlertA002WatchdogExpired) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA002WatchdogExpired.ProtoReflect.Descriptor instead.
func (*FxrAlertA002WatchdogExpired) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FxrAlertA002WatchdogExpired) GetTaskId() float32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FxrAlertA002WatchdogExpired) GetAppCRC() float32 {
	if x != nil {
		return x.AppCRC
	}
	return 0
}

type FxrAlertA003InternalFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FxrAlertA003InternalFault) Reset() {
	*x = FxrAlertA003InternalFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alerts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrAlertA003InternalFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrAlertA003InternalFault) ProtoMessage() {}

func (x *FxrAlertA003InternalFault) ProtoReflect() protoreflect.Message {
	mi := &file_alerts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrAlertA003InternalFault.ProtoReflect.Descriptor instead.
func (*FxrAlertA003InternalFault) Descriptor() ([]byte, []int) {
	return file_alerts_proto_rawDescGZIP(), []int{2, 1}
}

var File_alerts_proto protoreflect.FileDescriptor

var file_alerts_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89,
	0x0d, 0x0a, 0x09, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x08,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x69, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x30,
	0x30, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x04,
	0x61, 0x30, 0x33, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x69,
	0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c,
	0x4f, 0x56, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x33, 0x31, 0x1a, 0x83, 0x01, 0x0a, 0x0f, 0x61,
	0x30, 0x30, 0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x12, 0x20,
	0x0a, 0x0c, 0x49, 0x53, 0x52, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x49, 0x53, 0x52, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x25, 0x0a, 0x0f, 0x66, 0x5f, 0x31, 0x6b, 0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x31, 0x6b, 0x48, 0x7a,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x10, 0x66, 0x5f, 0x31, 0x30, 0x30,
	0x48, 0x7a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x66, 0x31, 0x30, 0x30, 0x48, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78,
	0x1a, 0x4f, 0x0a, 0x0b, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x56, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x22, 0xe9, 0x09, 0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42,
	0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x32, 0x5f, 0x48, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x6f, 0x67, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x34, 0x5f, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x35, 0x5f, 0x43, 0x41, 0x4e,
	0x42, 0x75, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x36, 0x5f, 0x53, 0x54, 0x49, 0x42, 0x72, 0x78, 0x5f, 0x4d,
	0x49, 0x41, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30,
	0x37, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x38, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x39, 0x5f, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x31, 0x30, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x31, 0x5f, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x72,
	0x6f, 0x48, 0x77, 0x4f, 0x43, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x31, 0x32, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x77, 0x4f, 0x43, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x31, 0x33, 0x5f, 0x53, 0x77, 0x4f, 0x43, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x31, 0x34, 0x5f, 0x42, 0x75, 0x73, 0x55, 0x10, 0x0e, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x35, 0x5f, 0x42, 0x75, 0x73, 0x4f, 0x56,
	0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x36, 0x5f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x56, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x37, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x56,
	0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x38, 0x5f,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x31, 0x39,
	0x5f, 0x53, 0x68, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x30,
	0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x32, 0x31, 0x5f, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x15, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x32, 0x5f, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x16,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x33, 0x5f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x17, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x34, 0x5f, 0x69, 0x72, 0x65, 0x66,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x32, 0x35, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x36, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x37, 0x5f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x32, 0x38, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x32, 0x39, 0x5f, 0x43,
	0x65, 0x6c, 0x6c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61,
	0x30, 0x33, 0x30, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x31, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x56,
	0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x32, 0x5f,
	0x43, 0x65, 0x6c, 0x6c, 0x55, 0x56, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x33, 0x33, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x76, 0x44, 0x54, 0x10, 0x21,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x34, 0x5f, 0x50, 0x6f,
	0x67, 0x6f, 0x56, 0x49, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x22, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x35, 0x5f, 0x43, 0x69, 0x62,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x61, 0x30, 0x33, 0x36, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x54,
	0x6f, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x33, 0x37, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x33, 0x38, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x33, 0x39, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x34, 0x30, 0x5f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x34, 0x31, 0x5f, 0x43, 0x49, 0x42, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x31, 0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x34, 0x32, 0x5f, 0x43, 0x49, 0x42, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x32, 0x10, 0x2a, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x61, 0x30, 0x34, 0x33, 0x5f, 0x43, 0x49, 0x42, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x61, 0x30, 0x34, 0x34, 0x5f, 0x43, 0x49, 0x42, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x2c, 0x42, 0x0b, 0x0a,
	0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x02, 0x0a, 0x08, 0x46,
	0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x62, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61,
	0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x32, 0x12, 0x32, 0x0a, 0x04, 0x61,
	0x30, 0x30, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x62, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x1a,
	0x46, 0x0a, 0x14, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x30, 0x33, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a,
	0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x42, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30,
	0x30, 0x31, 0x5f, 0x53, 0x77, 0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x49, 0x42, 0x5f, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x02, 0x0a, 0x08, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x61, 0x30, 0x30, 0x32, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x30, 0x30, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e,
	0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61, 0x30, 0x30, 0x33, 0x1a, 0x46, 0x0a, 0x14, 0x61, 0x30,
	0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70,
	0x70, 0x43, 0x52, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x70, 0x70, 0x43,
	0x52, 0x43, 0x1a, 0x14, 0x0a, 0x12, 0x61, 0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x58, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x58, 0x52, 0x5f, 0x61, 0x30, 0x30, 0x31, 0x5f, 0x53, 0x77,
	0x41, 0x70, 0x70, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x58, 0x52,
	0x5f, 0x61, 0x30, 0x30, 0x32, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x58, 0x52, 0x5f, 0x61,
	0x30, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x97, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a,
	0x09, 0x66, 0x78, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x46, 0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x78, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x69, 0x62, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x62,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x69, 0x62, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x45, 0x63, 0x75, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x34, 0x0a, 0x0b, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x5e, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c,
	0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x07, 0x5a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_alerts_proto_rawDescOnce sync.Once
	file_alerts_proto_rawDescData = file_alerts_proto_rawDesc
)

func file_alerts_proto_rawDescGZIP() []byte {
	file_alerts_proto_rawDescOnce.Do(func() {
		file_alerts_proto_rawDescData = protoimpl.X.CompressGZIP(file_alerts_proto_rawDescData)
	})
	return file_alerts_proto_rawDescData
}

var file_alerts_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_alerts_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_alerts_proto_goTypes = []interface{}{
	(StibAlert_AlertId)(0),              // 0: StibAlert.AlertId
	(FibAlert_AlertId)(0),               // 1: FibAlert.AlertId
	(FxrAlert_AlertId)(0),               // 2: FxrAlert.AlertId
	(*StibAlert)(nil),                   // 3: StibAlert
	(*FibAlert)(nil),                    // 4: FibAlert
	(*FxrAlert)(nil),                    // 5: FxrAlert
	(*AlertLog)(nil),                    // 6: AlertLog
	(*AlertMatrix)(nil),                 // 7: AlertMatrix
	(*Alerts)(nil),                      // 8: Alerts
	(*StibAlertA004_CpuOverRun)(nil),    // 9: StibAlert.a004_CpuOverRun
	(*StibAlertA031_CellOV)(nil),        // 10: StibAlert.a031_CellOV
	(*FibAlertA002WatchdogExpired)(nil), // 11: FibAlert.a002_watchdogExpired
	(*FibAlertA003InternalFault)(nil),   // 12: FibAlert.a003_internalFault
	(*FxrAlertA002WatchdogExpired)(nil), // 13: FxrAlert.a002_watchdogExpired
	(*FxrAlertA003InternalFault)(nil),   // 14: FxrAlert.a003_internalFault
}
var file_alerts_proto_depIdxs = []int32{
	0,  // 0: StibAlert.alert_id:type_name -> StibAlert.AlertId
	9,  // 1: StibAlert.a004:type_name -> StibAlert.a004_CpuOverRun
	10, // 2: StibAlert.a031:type_name -> StibAlert.a031_CellOV
	1,  // 3: FibAlert.alert_id:type_name -> FibAlert.AlertId
	11, // 4: FibAlert.a002:type_name -> FibAlert.a002_watchdogExpired
	12, // 5: FibAlert.a003:type_name -> FibAlert.a003_internalFault
	2,  // 6: FxrAlert.alert_id:type_name -> FxrAlert.AlertId
	13, // 7: FxrAlert.a002:type_name -> FxrAlert.a002_watchdogExpired
	14, // 8: FxrAlert.a003:type_name -> FxrAlert.a003_internalFault
	5,  // 9: AlertLog.fxr_alert:type_name -> FxrAlert
	4,  // 10: AlertLog.fib_alert:type_name -> FibAlert
	3,  // 11: AlertLog.stib_alert:type_name -> StibAlert
	6,  // 12: Alerts.log:type_name -> AlertLog
	7,  // 13: Alerts.matrix:type_name -> AlertMatrix
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_alerts_proto_init() }
func file_alerts_proto_init() {
	if File_alerts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_alerts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA004_CpuOverRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibAlertA031_CellOV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA002WatchdogExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibAlertA003InternalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA002WatchdogExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alerts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrAlertA003InternalFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_alerts_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StibAlert_A004)(nil),
		(*StibAlert_A031)(nil),
	}
	file_alerts_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FibAlert_A002)(nil),
		(*FibAlert_A003)(nil),
	}
	file_alerts_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FxrAlert_A002)(nil),
		(*FxrAlert_A003)(nil),
	}
	file_alerts_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AlertLog_FxrAlert)(nil),
		(*AlertLog_FibAlert)(nil),
		(*AlertLog_StibAlert)(nil),
	}
	file_alerts_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Alerts_Log)(nil),
		(*Alerts_Matrix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alerts_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alerts_proto_goTypes,
		DependencyIndexes: file_alerts_proto_depIdxs,
		EnumInfos:         file_alerts_proto_enumTypes,
		MessageInfos:      file_alerts_proto_msgTypes,
	}.Build()
	File_alerts_proto = out.File
	file_alerts_proto_rawDesc = nil
	file_alerts_proto_goTypes = nil
	file_alerts_proto_depIdxs = nil
}
