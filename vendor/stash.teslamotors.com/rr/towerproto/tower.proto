syntax            = "proto3";
option go_package = "tower";

// https://confluence.teslamotors.com/x/fFElIg

// split messages into two main messages
// - tower controller to fixture
// - fixture to tower controller

// tower controller to fixture

// - recipe
// - request type (start / stop / update bitmask)
// - cell bitmask

// fixture to tower controller messages broken up into two types

// - operational information
// -- fixture status (available / in process / done / faulted)
// -- fixture power draw
// -- cell state and measurements

// - diagnostic information
// -- PCBA / ambient temperature sensors
// -- tied to controllers in each fixture

import "alerts.proto";

message Genealogy {
  string board_pn      = 1;
  string board_sn      = 2;
  string package_pn    = 3;
  string package_sn    = 4;
  string subpackage_pn = 5;
  string subpackage_sn = 6;
  uint64 pcba_id       = 7;
  uint64 usage_id      = 8;
  uint64 assembly_id   = 9;
  uint64 app_githash   = 10;
}

enum IsoState {
  ISO_STATE_UNKNOWN_UNSPECIFIED = 0;
  ISO_STATE_INIT                = 1;
  ISO_STATE_CLOSE_SW            = 2;
  ISO_STATE_OPEN_SW             = 3;
  ISO_STATE_COMPUTE             = 4;
}

enum IsoError {
  ISO_ERROR_UNKNOWN_UNSPECIFIED            = 0;
  ISO_ERROR_BUS_OUT_OF_SPEC                = 1;
  ISO_ERROR_CHASSIS_TO_BUS_SHORTED         = 2;
  ISO_ERROR_CHASSIS_TO_GND_SHORTED         = 3;
  ISO_ERROR_CHASSIS_NOT_CONNECTED          = 4;
  ISO_ERROR_RESISTANCE_DEGRADATION_WARNING = 5;
  ISO_ERROR_RESISTANCE_TOO_LOW_FAULT       = 6;
  ISO_ERROR_RESISTANCE_NOT_AVAILABLE       = 7;
}

message FxrSensors {
  float v_bus_hv                  = 1;  // 80V bus
  float v_bus_24                  = 3;  // 24V bus voltage
  bool  position_switch_closed    = 4;  // switch indicating fixture is raised (closed)
  bool  position_switch_open      = 5;  // switch indicating fixture is lowered (open)
  float micro_temp                = 6;  // microcontroller internal temperature sensor (DegC)
  float v_rail_5v                 = 7;  // regulated 5v voltage sense (V)
  float v_rail_3v3                = 8;  // regulated 3.3v voltage sense (V)
  bool  power_supply_fault        = 9;  // 80V to 24V power supply fault
  bool  stib_fib_efuse_fault      = 10; // 24V logic power to STIBs/FIB overcurrent
  bool  fan_efuse_fault           = 11; // overcurrent from 24V fan output
  float i_fan_24                  = 12; // fan current draw (A)
  float i_stib_fib_24             = 13; // 24V logic current draw (A)
  float v_solenoid_24             = 14; // solenoid drive output voltage sense (V)
  bool  enumeration_uart_loopback = 15; // enumeration RX/TX pins detected as loopback
  bool  enumeration_uart_received = 16; // enumeration received via UART
  bool  enumeration_gpio_valid    = 17; // enumeration set via GPIO PCBA
}

message FxrInternal {
  float stack_usage_system = 7;
  float stack_usage_1khz   = 8;
  float stack_usage_10hz   = 9;
  float stack_usage_uds    = 10;
  float stack_usage_nvram  = 11;
}

message FxrOutputs {
  bool stib_enable_line     = 1;
  bool fixture_close_enable = 2;
  bool stib_fib_power_on    = 3;
  bool fan_power_on         = 4;
}

message Isolation {
  IsoState iso_state           = 1; // isolation statemachine
  float    iso_vchassis_sw_off = 2; // chassis voltage when top balancer off
  float    iso_vchassis_sw_on  = 3; // chassis voltage when top balancer on
  float    iso_vbus_sw_off     = 4; // Bus voltage when top balancer off
  float    iso_vbus_sw_on      = 5; // Bus voltage when top balancer on
  float    iso_resistance_high = 6; // isolation Resistance between VBus and chassis
  float    iso_resistance_low  = 7; // isolation Resistance between chassis and Vbus return
  IsoError iso_error           = 8; // Isolation faults
}

message Fxr {
  FxrSensors  sensors        = 1;
  FxrInternal internal       = 2;
  FxrOutputs  outputs        = 3;
  Genealogy   genealogy      = 4;
  AlertMatrix alert_matrices = 5;
  Isolation   isolation      = 6;
}

message FibSensors {
  float i_bus_24     = 1;
  float v_bus_24     = 2;
  float p_bus_24     = 3;
  float pcb_temp     = 4;
  float v_rail_5v    = 5;
  float v_rail_3v3   = 6;
  float micro_temp   = 7;
  bool  tray_present = 8;
}

message FibInternal {
  float cpu_time_isr       = 1;
  float cpu_time_isr_max   = 2;
  float cpu_time_1khz      = 3;
  float cpu_time_1khz_max  = 4;
  float cpu_time_10hz      = 5;
  float cpu_time_10khz_max = 6;
  float stack_usage_system = 7; // %
  float stack_usage_1khz   = 8;
  float stack_usage_10hz   = 9;
  float stack_usage_uds    = 10;
  float stack_usage_nvram  = 11;
}

enum FanStatus {
  FAN_STATUS_UNKNOWN_UNSPECIFIED = 0;
  FAN_STATUS_ON                  = 1;
  FAN_STATUS_OFF                 = 2;
  FAN_STATUS_FAULTED             = 3;
}

message FanMeasurements {
  float speed               = 1;
  float speed_request       = 2;
  float duty                = 3;
  bool  duty_control_active = 4;
}

message Fan {
  FanStatus       status       = 1;
  FanMeasurements measurements = 2;
}

message Fib {
  FibSensors   sensors        = 1;
  FibInternal  internal       = 2;
  Genealogy    genealogy      = 3;
  repeated Fan fans           = 4; // always 9 fans
  AlertMatrix  alert_matrices = 5;
}

enum StibDCDCState {
  STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED = 0;
  STIB_DCDC_STATE_WAIT                     = 1;
  STIB_DCDC_STATE_STANDBY                  = 2;
  STIB_DCDC_STATE_OPEN_LOOP                = 3;
  STIB_DCDC_STATE_VOLTAGE_MATCHING         = 4;
  STIB_DCDC_STATE_CLOSED_LOOP              = 5;
  STIB_DCDC_STATE_PRECHARGE                = 6;
  STIB_DCDC_STATE_AUTO_ZERO                = 7;
  STIB_DCDC_STATE_FAULT                    = 8;
  STIB_DCDC_INTERNAL_SLOSH                 = 9;
}

enum StibFormState {
  STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED = 0;
  STIB_FORM_STATE_IDLE                     = 1;
  STIB_FORM_STATE_VMATCH                   = 2;
  STIB_FORM_STATE_CC                       = 3;
  STIB_FORM_STATE_CV                       = 4;
  STIB_FORM_STATE_DCR_PULSE                = 5;
  STIB_FORM_STATE_FINISHED                 = 6;
  STIB_FORM_STATE_DIRECT_CONTROL           = 7;
  STIB_FORM_STATE_DELAY                    = 8;
  STIB_FORM_STATE_CELL_SW                  = 9;
  STIB_FORM_STATE_FAULT                    = 10;
}

message StibSensors {
  float bus_voltage       = 1;
  float string_voltage    = 2;
  float string_current    = 3;
  float temperature_sense = 4;
  float pcb_temp          = 6;
}

message StibStatistics {
  float lifetime_ah = 1;
  float lifetime_wh = 2;
}

message StibInternal {
  StibDCDCState dcdc_state = 1;
  StibFormState form_state = 2;
}

message Stib {
  StibSensors    sensors        = 1;
  StibStatistics statistics     = 2;
  Genealogy      genealogy      = 3;
  StibInternal   internal       = 4;
  AlertMatrix    alert_matrices = 5;
}

enum CellStatus {
  CELL_STATUS_NONE_UNSPECIFIED    = 0;
  CELL_STATUS_IDLE                = 1;
  CELL_STATUS_IN_PROCESS          = 2;
  CELL_STATUS_COMPLETE            = 3;
  CELL_STATUS_FAILED              = 4;
  CELL_STATUS_FAILED_SAFETY_LIMIT = 5;
}

message CellMeasurement {
  float current              = 1;
  float voltage              = 2;
  float charge_ah            = 3;
  float energy_wh            = 4;
  float temperature_estimate = 5;
  float pogo_resistance      = 6;
}

message Cell {
  CellStatus      cellstatus      = 1;
  CellMeasurement cellmeasurement = 2;
}

enum FixtureStatus {
  FIXTURE_STATUS_UNKNOWN_UNSPECIFIED = 0;
  FIXTURE_STATUS_INIT                = 1; // Fixture is not ready for a tray yet
  FIXTURE_STATUS_IDLE                = 2; // Fixture is ready for a tray
  FIXTURE_STATUS_READY               = 3; // Fixture has a tray and is ready to receive a recipe
  FIXTURE_STATUS_ACTIVE              = 4; // Fixture is running a formation cycle on the tray
  FIXTURE_STATUS_FAULTED             = 5; // Fixture is faulted
  FIXTURE_STATUS_COMPLETE            = 6; // Fixture is done with the formation cycle, tray is still present
  FIXTURE_STATUS_UPDATING            = 7; // Fixture is updating firmware - not used
}

enum FixturePosition {
  FIXTURE_POSITION_UNKNOWN_UNSPECIFIED = 0;
  FIXTURE_POSITION_CLOSED              = 1;
  FIXTURE_POSITION_OPEN                = 2;
  FIXTURE_POSITION_INTERMEDIATE        = 3;
  FIXTURE_POSITION_INVALID             = 4;
}

enum EquipmentStatus {
  EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED = 0;
  EQUIPMENT_STATUS_NEEDS_COMMISSIONING = 1; // initial value or when commanded to recommission
  EQUIPMENT_STATUS_NEEDS_MAINTENANCE   = 2; // When self test fails or when set by TC
  EQUIPMENT_STATUS_NEEDS_APPROVAL      = 3; // When self test cycle has run , waiting for approval from operator
  EQUIPMENT_STATUS_IN_OPERATION        = 4; // When operator approves self test cycle, ready for production
}

message FixtureOperational {
  FixtureStatus   status           = 1;
  FixturePosition position         = 2;
  repeated Cell   cells            = 3;
  uint32          step_executing   = 4; // 1 based current process step index
  EquipmentStatus equipment_status = 5;
  bool            tray_present     = 6; // tray is present (independent of fixture status)
}

message FixtureDiagnostic {
  Fxr           fxr                            = 1;
  Fib           fib                            = 2;
  repeated Stib stibs                          = 3; // 4 stibs
  uint32        isotp_rx_complete_msg_received = 5;
}

message FixtureToTower {
  oneof content {
    FixtureOperational op        = 1;
    FixtureDiagnostic  diag      = 2;
    AlertLog           alert_log = 7;
  }
  string traybarcode    = 3;
  string fixturebarcode = 4;
  string process_step   = 5;
  int64  transaction_id = 6;
}

message RecipeStep {
  enum FormMode {
    FORM_MODE_UNKNOWN_UNSPECIFIED = 0;
    FORM_MODE_CC                  = 1;
    FORM_MODE_CV                  = 2;
    FORM_MODE_DELAY               = 3;
    FORM_MODE_CP                  = 4;
    FORM_MODE_DCR_PULSE           = 5;
  }
  enum EndingStyle {
    ENDING_STYLE_UNKNOWN_UNSPECIFIED = 0;
    ENDING_STYLE_CELL_BYPASS_ENABLE  = 1;
    ENDING_STYLE_CELL_BYPASS_DISABLE = 2;
    ENDING_STYLE_CUTOFF_BY_AH        = 3;
  }
  FormMode    mode               = 1;
  float       charge_current     = 2;
  float       max_current        = 3;
  float       cutoff_voltage     = 4;
  float       cutoff_current     = 5;
  float       cutoff_dv          = 6;
  float       step_timeout       = 7;
  float       charge_power       = 8;
  float       cutoff_ah          = 9;
  EndingStyle ending_style       = 10;
  float       v_cell_min_quality = 11;
  float       v_cell_max_quality = 12;
}

enum FormRequest {
  FORM_REQUEST_UNKNOWN_UNSPECIFIED = 0;
  FORM_REQUEST_STOP                = 1;
  FORM_REQUEST_START               = 2;
  FORM_REQUEST_UPDATE_CELLS        = 3;
  FORM_REQUEST_FAULT_RESET         = 4;
}

message Recipe {
  repeated RecipeStep steps       = 1;
  repeated uint32     cell_masks  = 2;
  FormRequest         formrequest = 3;
}

message SystemInfo {
  string traybarcode    = 1;
  string fixturebarcode = 2;
  string process_step   = 3;
}

enum EquipmentRequest {
  EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED = 0;
  EQUIPMENT_REQUEST_SELF_TEST_APPROVED  = 1; // operator has reviewed self test data, put fixture into production
  EQUIPMENT_REQUEST_MAINTENANCE         = 2; // put fixture in maintenance mode
  EQUIPMENT_REQUEST_RECOMMISSIONING     = 3; // reset fixture hardware status to require commissioning
}

message TowerToFixture {
  Recipe           recipe            = 1;
  SystemInfo       sysinfo           = 2;
  int64            transaction_id    = 3;
  EquipmentRequest equipment_request = 4;
}
