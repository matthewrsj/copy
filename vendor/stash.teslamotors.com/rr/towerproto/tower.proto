syntax            = "proto3";
option go_package = ".;tower";

// https://confluence.teslamotors.com/x/fFElIg

// split messages into two main messages
// - tower controller to fixture
// - fixture to tower controller

// tower controller to fixture

// - recipe
// - request type (start / stop / update bitmask)
// - cell bitmask

// fixture to tower controller messages broken up into two types

// - operational information
// -- fixture status (available / in process / done / faulted)
// -- fixture power draw
// -- cell state and measurements

// - diagnostic information
// -- PCBA / ambient temperature sensors
// -- tied to controllers in each fixture

import "alerts.proto";
import "enums.proto";

message Genealogy {
  string board_pn      = 1;
  string board_sn      = 2;
  string package_pn    = 3;
  string package_sn    = 4;
  string subpackage_pn = 5;
  string subpackage_sn = 6;
  uint64 pcba_id       = 7;
  uint64 usage_id      = 8;
  uint64 assembly_id   = 9;
  uint64 app_githash   = 10;
}

message FxrSensors {
  float v_bus_hv                  = 1;  // 80V bus
  float v_bus_24                  = 3;  // 24V bus voltage
  bool  position_switch_closed    = 4;  // switch indicating fixture is raised (closed)
  bool  position_switch_open      = 5;  // switch indicating fixture is lowered (open)
  float micro_temp                = 6;  // microcontroller internal temperature sensor (DegC)
  float v_rail_5v                 = 7;  // regulated 5v voltage sense (V)
  float v_rail_3v3                = 8;  // regulated 3.3v voltage sense (V)
  bool  power_supply_fault        = 9;  // 80V to 24V power supply fault
  bool  stib_fib_efuse_fault      = 10; // 24V logic power to STIBs/FIB overcurrent
  bool  fan_efuse_fault           = 11; // overcurrent from 24V fan output
  float i_fan_24                  = 12; // fan current draw (A)
  float i_stib_fib_24             = 13; // 24V logic current draw (A)
  float v_solenoid_24             = 14; // solenoid drive output voltage sense (V)
  bool  enumeration_uart_loopback = 15; // enumeration RX/TX pins detected as loopback
  bool  enumeration_uart_received = 16; // enumeration received via UART
  bool  enumeration_gpio_valid    = 17; // enumeration set via GPIO PCBA
}

message FxrInternal {
  float  stack_usage_system = 7;
  float  stack_usage_1khz   = 8;
  float  stack_usage_10hz   = 9;
  float  stack_usage_uds    = 10;
  float  stack_usage_nvram  = 11;
  uint32 uptime_s           = 12; // uptime in seconds
}

message FxrOutputs {
  bool stib_enable_line     = 1;
  bool fixture_close_enable = 2;
  bool stib_fib_power_on    = 3;
  bool fan_power_on         = 4;
}

message FxrIsolation {
  IsoState iso_state           = 1; // isolation statemachine
  float    iso_vchassis_sw_off = 2; // chassis voltage when top balancer off
  float    iso_vchassis_sw_on  = 3; // chassis voltage when top balancer on
  float    iso_vbus_sw_off     = 4; // Bus voltage when top balancer off
  float    iso_vbus_sw_on      = 5; // Bus voltage when top balancer on
  float    iso_resistance_high = 6; // isolation Resistance between VBus and chassis
  float    iso_resistance_low  = 7; // isolation Resistance between chassis and Vbus return
  IsoError iso_error           = 8; // Isolation faults
}

message Position {
  float                  fixture_closing_time = 1;
  float                  fixture_opening_time = 2;
  FixturePositionSmState state                = 3;
}

message Filesystem {
  sint32 last_error_code = 1; // either 0 for OK or negative number, see lfs_error
}

message Fxr {
  FxrSensors            sensors        = 1;
  FxrInternal           internal       = 2;
  FxrOutputs            outputs        = 3;
  Genealogy             genealogy      = 4;
  AlertMatrix           alert_matrices = 5;
  FxrIsolation          isolation      = 6;
  Filesystem            filesystem     = 7;
  Position              position       = 8;
  FixtureControlSmState state          = 9;
}

message FibSensors {
  float i_bus_24     = 1;
  float v_bus_24     = 2;
  float p_bus_24     = 3;
  float pcb_temp     = 4;
  float v_rail_5v    = 5;
  float v_rail_3v3   = 6;
  float micro_temp   = 7;
  bool  tray_present = 8;
}

message FibInternal {
  float cpu_time_isr       = 1;
  float cpu_time_isr_max   = 2;
  float cpu_time_1khz      = 3;
  float cpu_time_1khz_max  = 4;
  float cpu_time_10hz      = 5;
  float cpu_time_10khz_max = 6;
  float stack_usage_system = 7; // %
  float stack_usage_1khz   = 8;
  float stack_usage_10hz   = 9;
  float stack_usage_uds    = 10;
  float stack_usage_nvram  = 11;
  int32 uptime_s           = 12; // uptime in seconds
}

message FanMeasurements {
  float speed               = 1;
  float speed_request       = 2;
  float duty                = 3;
  bool  duty_control_active = 4;
}

message Fan {
  FanStatus       status       = 1;
  FanMeasurements measurements = 2;
}

message Fib {
  FibSensors   sensors        = 1;
  FibInternal  internal       = 2;
  Genealogy    genealogy      = 3;
  repeated Fan fans           = 4; // always 9 fans
  AlertMatrix  alert_matrices = 5;
}

message StibSensors {
  float bus_voltage           = 1;
  float string_voltage        = 2;
  float string_current        = 3;
  float phase_1_temp          = 4;
  float phase_2_temp          = 5;
  float shunt_temp            = 6;
  float pcb_temp              = 7;
  float phase_1_current       = 8;
  float phase_2_current       = 9;
  float shunt_current         = 10;
  float v_bus_24              = 11;
  bool  cib_online            = 12;
  float cib_stib_vstring_diff = 13;
}

message CibSensors {
  float  string_current = 1;
  float  die_temp       = 2;
  float  v_ref_2        = 3; // Vref2 3V internal reference voltage in LION chip
  float  v_rail_5v      = 4;
  string serial         = 5; // 6-byte serial converted to ascii
}

message StibOutputs {
  float phase_1_duty = 1;
  float phase_2_duty = 2;
}

message StibStatistics {
  float lifetime_ah = 1;
  float lifetime_wh = 2;
}

message StibInternal {
  StibDCDCState dcdc_state         = 1;
  StibFormState form_state         = 2;
  StibDCDCState dcdc_state_req     = 3;
  int32         uptime_s           = 4; // uptime in seconds
  CibCalStatus  calibration_status = 5; // calibration status of each cib
}

message Stib {
  StibSensors    sensors        = 1;
  StibStatistics statistics     = 2;
  Genealogy      genealogy      = 3;
  StibInternal   internal       = 4;
  AlertMatrix    alert_matrices = 5;
  CibSensors     cib_sensors    = 6;
  StibOutputs    outputs        = 7;
}

message CellMeasurement {
  float current              = 1;
  float voltage              = 2;
  float charge_ah            = 3;
  float energy_wh            = 4;
  float temperature_estimate = 5;
  float pogo_resistance      = 6;
  float step_time_counter_s  = 7;
}

message Cell {
  CellStatus       status        = 1;
  CellMeasurement  measurement   = 2;
  string           serial        = 3;
  string           position      = 4;
  CellDetectStatus detect_status = 5; // cells positions detected by cib
}

message FixtureOperational {
  FixtureStatus       status                = 1;
  FixturePosition     position              = 2;
  repeated Cell       cells                 = 3;
  uint32              step_executing        = 4; // 1 based current process step index
  EquipmentStatus     equipment_status      = 5;
  bool                tray_present          = 6; // tray is present (independent of fixture status)
  FireAlarmStatus     fire_alarm_status     = 7;
  IsolationTestStatus isolation_test_status = 8;
  uint32              runtime_s             = 9;  // how long current recipe has been running in seconds
  bool                calibration_ok        = 10; // CIB calibrations are correctly loaded
  TrayOrientation     orientation           = 11;
}

message CellDiag { float sense_loop_resistance = 1; }

message FixtureDiagnostic {
  Fxr               fxr                            = 1;
  Fib               fib                            = 2;
  repeated Stib     stibs                          = 3; // 4 stibs
  uint32            isotp_rx_complete_msg_received = 5;
  repeated CellDiag cells                          = 6; // 64 cells
}

message FixtureToTower {
  oneof content {
    FixtureOperational op        = 1;
    FixtureDiagnostic  diag      = 2;
    AlertLog           alert_log = 7;
  }
  Info     info     = 8;
  Versions versions = 9;
}

message RecipeStep {
  enum FormMode {
    FORM_MODE_UNKNOWN_UNSPECIFIED = 0;
    FORM_MODE_CC                  = 1;
    FORM_MODE_CV                  = 2;
    FORM_MODE_DELAY               = 3;
    FORM_MODE_CP                  = 4;
    FORM_MODE_DCR_PULSE           = 5;
  }
  enum EndingStyle {
    ENDING_STYLE_UNKNOWN_UNSPECIFIED = 0;
    ENDING_STYLE_CELL_BYPASS_ENABLE  = 1;
    ENDING_STYLE_CELL_BYPASS_DISABLE = 2;
    ENDING_STYLE_CUTOFF_BY_AH        = 3;
  }
  FormMode    mode               = 1;
  float       charge_current     = 2;
  float       max_current        = 3;
  float       cutoff_voltage     = 4;
  float       cutoff_current     = 5;
  float       cutoff_dv          = 6;
  float       step_timeout       = 7;
  float       charge_power       = 8;
  float       cutoff_ah          = 9;
  EndingStyle ending_style       = 10;
  float       v_cell_min_quality = 11;
  float       v_cell_max_quality = 12;
}

message Recipe {
  repeated RecipeStep steps         = 1;
  repeated uint32     cell_masks    = 2;
  FormRequest         form_request  = 3;
  repeated uint32     step_ordering = 4;
}

message Info {
  string          tray_barcode     = 1;
  string          fixture_location = 2;
  string          recipe_name      = 3;
  uint32          recipe_version   = 4;
  string          transaction_id   = 5; // KSUID, K-Sortable Unique IDentifier
  TrayOrientation orientation      = 6;
}

message Versions {
  string software_version = 1;
  uint32 protocol_version = 2;
}

message DRLogTriggers { uint32 stib_mask = 1; }

message TowerToFixture {
  Recipe               recipe                 = 1;
  Info                 info                   = 2;
  EquipmentRequest     equipment_request      = 4;
  IsolationTestRequest isolation_test_request = 5;
  Versions             versions               = 6;
  FixtureOperational   op                     = 7;
  DRLogTriggers        drlog_triggers         = 8;
}

message TauxOperational {
  TauxStatus        status             = 1;
  EnumerationStatus enumeration_status = 2;
  int32             power_capacity_w   = 3;
  int32             power_in_use_w     = 4;
  int32             power_available_w  = 5;
}

message Taux {
  Genealogy   genealogy          = 1;
  AlertMatrix alert_matrices     = 2;
  uint32      powertrays_present = 3;
}

message Dcac {
  uint32 dcac_id                       = 1;
  bool   grid_compliant                = 2;
  bool   form_active                   = 3;
  float  ac_power_kw                   = 4; // PINV_Pout
  uint64 subpackage_sn_1_7             = 5;
  uint64 subpackage_sn_8_14            = 6;
  uint64 app_githash                   = 7;
  float  bus_lv                        = 8;  // POD_Vbatt
  float  bus_hv                        = 9;  // PINV_Vdc
  float  pinv_heatsink_temp            = 10; // PINV_HeatsinkTemp
  bool   is_pod_persistant_fault       = 11; // POD_PersistentlyFaulted
  bool   is_pod_permanent_fault        = 12; // POD_PersistentlyFaulted
  float  lifetime_energy_discharged_wh = 13; // PINV_LifetimeEnergyDischarged
  float  lifetime_energy_charged_wh    = 14; // PINV_LifetimeEnergyCharged
  float  v_thd                         = 15; // PINV_v_thd
  float  grid_resistance               = 16; // PINV_gridResistance
  float  cbc_events                    = 17; // PINV_cbcEvents
  bool   hw_enable_line                = 18; // PINV_HardwareEnableLine
}

message Powertray {
  uint32        powertray_index = 1;
  bool          enumeration_ok  = 2;
  bool          precharge_ready = 3;
  bool          form_active     = 4;
  float         ac_power_kw     = 5;
  float         bus_lv          = 7;
  repeated Dcac dcacs           = 10;
}

message TauxDiagnostic {
  Taux               taux                           = 1;
  repeated Powertray powertrays                     = 2; // 8 PTs
  uint32             isotp_rx_complete_msg_received = 4;
}

message TauxToTower {
  oneof content {
    TauxOperational op   = 1;
    TauxDiagnostic  diag = 2;
  }
  Versions versions = 5;
}

message FxrToStib { repeated Cell cells = 1; }