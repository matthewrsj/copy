// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: tower.proto

package tower

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IsoState int32

const (
	IsoState_ISO_STATE_UNKNOWN_UNSPECIFIED IsoState = 0
	IsoState_ISO_STATE_INIT                IsoState = 1
	IsoState_ISO_STATE_CLOSE_SW            IsoState = 2
	IsoState_ISO_STATE_OPEN_SW             IsoState = 3
	IsoState_ISO_STATE_COMPUTE             IsoState = 4
)

// Enum value maps for IsoState.
var (
	IsoState_name = map[int32]string{
		0: "ISO_STATE_UNKNOWN_UNSPECIFIED",
		1: "ISO_STATE_INIT",
		2: "ISO_STATE_CLOSE_SW",
		3: "ISO_STATE_OPEN_SW",
		4: "ISO_STATE_COMPUTE",
	}
	IsoState_value = map[string]int32{
		"ISO_STATE_UNKNOWN_UNSPECIFIED": 0,
		"ISO_STATE_INIT":                1,
		"ISO_STATE_CLOSE_SW":            2,
		"ISO_STATE_OPEN_SW":             3,
		"ISO_STATE_COMPUTE":             4,
	}
)

func (x IsoState) Enum() *IsoState {
	p := new(IsoState)
	*p = x
	return p
}

func (x IsoState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoState) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[0].Descriptor()
}

func (IsoState) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[0]
}

func (x IsoState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoState.Descriptor instead.
func (IsoState) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{0}
}

type IsoError int32

const (
	IsoError_ISO_ERROR_UNKNOWN_UNSPECIFIED            IsoError = 0
	IsoError_ISO_ERROR_BUS_OUT_OF_SPEC                IsoError = 1
	IsoError_ISO_ERROR_CHASSIS_TO_BUS_SHORTED         IsoError = 2
	IsoError_ISO_ERROR_CHASSIS_TO_GND_SHORTED         IsoError = 3
	IsoError_ISO_ERROR_CHASSIS_NOT_CONNECTED          IsoError = 4
	IsoError_ISO_ERROR_RESISTANCE_DEGRADATION_WARNING IsoError = 5
	IsoError_ISO_ERROR_RESISTANCE_TOO_LOW_FAULT       IsoError = 6
	IsoError_ISO_ERROR_RESISTANCE_NOT_AVAILABLE       IsoError = 7
)

// Enum value maps for IsoError.
var (
	IsoError_name = map[int32]string{
		0: "ISO_ERROR_UNKNOWN_UNSPECIFIED",
		1: "ISO_ERROR_BUS_OUT_OF_SPEC",
		2: "ISO_ERROR_CHASSIS_TO_BUS_SHORTED",
		3: "ISO_ERROR_CHASSIS_TO_GND_SHORTED",
		4: "ISO_ERROR_CHASSIS_NOT_CONNECTED",
		5: "ISO_ERROR_RESISTANCE_DEGRADATION_WARNING",
		6: "ISO_ERROR_RESISTANCE_TOO_LOW_FAULT",
		7: "ISO_ERROR_RESISTANCE_NOT_AVAILABLE",
	}
	IsoError_value = map[string]int32{
		"ISO_ERROR_UNKNOWN_UNSPECIFIED":            0,
		"ISO_ERROR_BUS_OUT_OF_SPEC":                1,
		"ISO_ERROR_CHASSIS_TO_BUS_SHORTED":         2,
		"ISO_ERROR_CHASSIS_TO_GND_SHORTED":         3,
		"ISO_ERROR_CHASSIS_NOT_CONNECTED":          4,
		"ISO_ERROR_RESISTANCE_DEGRADATION_WARNING": 5,
		"ISO_ERROR_RESISTANCE_TOO_LOW_FAULT":       6,
		"ISO_ERROR_RESISTANCE_NOT_AVAILABLE":       7,
	}
)

func (x IsoError) Enum() *IsoError {
	p := new(IsoError)
	*p = x
	return p
}

func (x IsoError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoError) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[1].Descriptor()
}

func (IsoError) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[1]
}

func (x IsoError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoError.Descriptor instead.
func (IsoError) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{1}
}

type FanStatus int32

const (
	FanStatus_FAN_STATUS_UNKNOWN_UNSPECIFIED FanStatus = 0
	FanStatus_FAN_STATUS_ON                  FanStatus = 1
	FanStatus_FAN_STATUS_OFF                 FanStatus = 2
	FanStatus_FAN_STATUS_FAULTED             FanStatus = 3
)

// Enum value maps for FanStatus.
var (
	FanStatus_name = map[int32]string{
		0: "FAN_STATUS_UNKNOWN_UNSPECIFIED",
		1: "FAN_STATUS_ON",
		2: "FAN_STATUS_OFF",
		3: "FAN_STATUS_FAULTED",
	}
	FanStatus_value = map[string]int32{
		"FAN_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"FAN_STATUS_ON":                  1,
		"FAN_STATUS_OFF":                 2,
		"FAN_STATUS_FAULTED":             3,
	}
)

func (x FanStatus) Enum() *FanStatus {
	p := new(FanStatus)
	*p = x
	return p
}

func (x FanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[2].Descriptor()
}

func (FanStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[2]
}

func (x FanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanStatus.Descriptor instead.
func (FanStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{2}
}

type StibDCDCState int32

const (
	StibDCDCState_STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED StibDCDCState = 0
	StibDCDCState_STIB_DCDC_STATE_WAIT                     StibDCDCState = 1
	StibDCDCState_STIB_DCDC_STATE_STANDBY                  StibDCDCState = 2
	StibDCDCState_STIB_DCDC_STATE_OPEN_LOOP                StibDCDCState = 3
	StibDCDCState_STIB_DCDC_STATE_VOLTAGE_MATCHING         StibDCDCState = 4
	StibDCDCState_STIB_DCDC_STATE_CLOSED_LOOP              StibDCDCState = 5
	StibDCDCState_STIB_DCDC_STATE_PRECHARGE                StibDCDCState = 6
	StibDCDCState_STIB_DCDC_STATE_AUTO_ZERO                StibDCDCState = 7
	StibDCDCState_STIB_DCDC_STATE_FAULT                    StibDCDCState = 8
	StibDCDCState_STIB_DCDC_INTERNAL_SLOSH                 StibDCDCState = 9
)

// Enum value maps for StibDCDCState.
var (
	StibDCDCState_name = map[int32]string{
		0: "STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED",
		1: "STIB_DCDC_STATE_WAIT",
		2: "STIB_DCDC_STATE_STANDBY",
		3: "STIB_DCDC_STATE_OPEN_LOOP",
		4: "STIB_DCDC_STATE_VOLTAGE_MATCHING",
		5: "STIB_DCDC_STATE_CLOSED_LOOP",
		6: "STIB_DCDC_STATE_PRECHARGE",
		7: "STIB_DCDC_STATE_AUTO_ZERO",
		8: "STIB_DCDC_STATE_FAULT",
		9: "STIB_DCDC_INTERNAL_SLOSH",
	}
	StibDCDCState_value = map[string]int32{
		"STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED": 0,
		"STIB_DCDC_STATE_WAIT":                     1,
		"STIB_DCDC_STATE_STANDBY":                  2,
		"STIB_DCDC_STATE_OPEN_LOOP":                3,
		"STIB_DCDC_STATE_VOLTAGE_MATCHING":         4,
		"STIB_DCDC_STATE_CLOSED_LOOP":              5,
		"STIB_DCDC_STATE_PRECHARGE":                6,
		"STIB_DCDC_STATE_AUTO_ZERO":                7,
		"STIB_DCDC_STATE_FAULT":                    8,
		"STIB_DCDC_INTERNAL_SLOSH":                 9,
	}
)

func (x StibDCDCState) Enum() *StibDCDCState {
	p := new(StibDCDCState)
	*p = x
	return p
}

func (x StibDCDCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibDCDCState) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[3].Descriptor()
}

func (StibDCDCState) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[3]
}

func (x StibDCDCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibDCDCState.Descriptor instead.
func (StibDCDCState) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{3}
}

type StibFormState int32

const (
	StibFormState_STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED StibFormState = 0
	StibFormState_STIB_FORM_STATE_IDLE                     StibFormState = 1
	StibFormState_STIB_FORM_STATE_VMATCH                   StibFormState = 2
	StibFormState_STIB_FORM_STATE_CC                       StibFormState = 3
	StibFormState_STIB_FORM_STATE_CV                       StibFormState = 4
	StibFormState_STIB_FORM_STATE_CP                       StibFormState = 5
	StibFormState_STIB_FORM_STATE_DCR_PULSE                StibFormState = 6
	StibFormState_STIB_FORM_STATE_FINISHED                 StibFormState = 7
	StibFormState_STIB_FORM_STATE_DIRECT_CONTROL           StibFormState = 8
	StibFormState_STIB_FORM_STATE_DELAY                    StibFormState = 9
	StibFormState_STIB_FORM_STATE_CELL_SW                  StibFormState = 10
	StibFormState_STIB_FORM_STATE_FAULT                    StibFormState = 11
)

// Enum value maps for StibFormState.
var (
	StibFormState_name = map[int32]string{
		0:  "STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED",
		1:  "STIB_FORM_STATE_IDLE",
		2:  "STIB_FORM_STATE_VMATCH",
		3:  "STIB_FORM_STATE_CC",
		4:  "STIB_FORM_STATE_CV",
		5:  "STIB_FORM_STATE_CP",
		6:  "STIB_FORM_STATE_DCR_PULSE",
		7:  "STIB_FORM_STATE_FINISHED",
		8:  "STIB_FORM_STATE_DIRECT_CONTROL",
		9:  "STIB_FORM_STATE_DELAY",
		10: "STIB_FORM_STATE_CELL_SW",
		11: "STIB_FORM_STATE_FAULT",
	}
	StibFormState_value = map[string]int32{
		"STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED": 0,
		"STIB_FORM_STATE_IDLE":                     1,
		"STIB_FORM_STATE_VMATCH":                   2,
		"STIB_FORM_STATE_CC":                       3,
		"STIB_FORM_STATE_CV":                       4,
		"STIB_FORM_STATE_CP":                       5,
		"STIB_FORM_STATE_DCR_PULSE":                6,
		"STIB_FORM_STATE_FINISHED":                 7,
		"STIB_FORM_STATE_DIRECT_CONTROL":           8,
		"STIB_FORM_STATE_DELAY":                    9,
		"STIB_FORM_STATE_CELL_SW":                  10,
		"STIB_FORM_STATE_FAULT":                    11,
	}
)

func (x StibFormState) Enum() *StibFormState {
	p := new(StibFormState)
	*p = x
	return p
}

func (x StibFormState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibFormState) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[4].Descriptor()
}

func (StibFormState) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[4]
}

func (x StibFormState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibFormState.Descriptor instead.
func (StibFormState) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{4}
}

type CellStatus int32

const (
	CellStatus_CELL_STATUS_NONE_UNSPECIFIED    CellStatus = 0
	CellStatus_CELL_STATUS_IDLE                CellStatus = 1
	CellStatus_CELL_STATUS_IN_PROCESS          CellStatus = 2
	CellStatus_CELL_STATUS_COMPLETE            CellStatus = 3
	CellStatus_CELL_STATUS_FAILED              CellStatus = 4
	CellStatus_CELL_STATUS_FAILED_SAFETY_LIMIT CellStatus = 5
)

// Enum value maps for CellStatus.
var (
	CellStatus_name = map[int32]string{
		0: "CELL_STATUS_NONE_UNSPECIFIED",
		1: "CELL_STATUS_IDLE",
		2: "CELL_STATUS_IN_PROCESS",
		3: "CELL_STATUS_COMPLETE",
		4: "CELL_STATUS_FAILED",
		5: "CELL_STATUS_FAILED_SAFETY_LIMIT",
	}
	CellStatus_value = map[string]int32{
		"CELL_STATUS_NONE_UNSPECIFIED":    0,
		"CELL_STATUS_IDLE":                1,
		"CELL_STATUS_IN_PROCESS":          2,
		"CELL_STATUS_COMPLETE":            3,
		"CELL_STATUS_FAILED":              4,
		"CELL_STATUS_FAILED_SAFETY_LIMIT": 5,
	}
)

func (x CellStatus) Enum() *CellStatus {
	p := new(CellStatus)
	*p = x
	return p
}

func (x CellStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[5].Descriptor()
}

func (CellStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[5]
}

func (x CellStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellStatus.Descriptor instead.
func (CellStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{5}
}

type FixtureStatus int32

const (
	FixtureStatus_FIXTURE_STATUS_UNKNOWN_UNSPECIFIED FixtureStatus = 0
	FixtureStatus_FIXTURE_STATUS_INIT                FixtureStatus = 1 // Fixture is not ready for a tray yet
	FixtureStatus_FIXTURE_STATUS_IDLE                FixtureStatus = 2 // Fixture is ready for a tray
	FixtureStatus_FIXTURE_STATUS_READY               FixtureStatus = 3 // Fixture has a tray and is ready to receive a recipe
	FixtureStatus_FIXTURE_STATUS_ACTIVE              FixtureStatus = 4 // Fixture is running a formation cycle on the tray
	FixtureStatus_FIXTURE_STATUS_FAULTED             FixtureStatus = 5 // Fixture is faulted
	FixtureStatus_FIXTURE_STATUS_COMPLETE            FixtureStatus = 6 // Fixture is done with the formation cycle, tray is still present
	FixtureStatus_FIXTURE_STATUS_UPDATING            FixtureStatus = 7 // Fixture is updating firmware - not used
)

// Enum value maps for FixtureStatus.
var (
	FixtureStatus_name = map[int32]string{
		0: "FIXTURE_STATUS_UNKNOWN_UNSPECIFIED",
		1: "FIXTURE_STATUS_INIT",
		2: "FIXTURE_STATUS_IDLE",
		3: "FIXTURE_STATUS_READY",
		4: "FIXTURE_STATUS_ACTIVE",
		5: "FIXTURE_STATUS_FAULTED",
		6: "FIXTURE_STATUS_COMPLETE",
		7: "FIXTURE_STATUS_UPDATING",
	}
	FixtureStatus_value = map[string]int32{
		"FIXTURE_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"FIXTURE_STATUS_INIT":                1,
		"FIXTURE_STATUS_IDLE":                2,
		"FIXTURE_STATUS_READY":               3,
		"FIXTURE_STATUS_ACTIVE":              4,
		"FIXTURE_STATUS_FAULTED":             5,
		"FIXTURE_STATUS_COMPLETE":            6,
		"FIXTURE_STATUS_UPDATING":            7,
	}
)

func (x FixtureStatus) Enum() *FixtureStatus {
	p := new(FixtureStatus)
	*p = x
	return p
}

func (x FixtureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixtureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[6].Descriptor()
}

func (FixtureStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[6]
}

func (x FixtureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixtureStatus.Descriptor instead.
func (FixtureStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{6}
}

type FixturePosition int32

const (
	FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED FixturePosition = 0
	FixturePosition_FIXTURE_POSITION_CLOSED              FixturePosition = 1
	FixturePosition_FIXTURE_POSITION_OPEN                FixturePosition = 2
	FixturePosition_FIXTURE_POSITION_INTERMEDIATE        FixturePosition = 3
	FixturePosition_FIXTURE_POSITION_INVALID             FixturePosition = 4
)

// Enum value maps for FixturePosition.
var (
	FixturePosition_name = map[int32]string{
		0: "FIXTURE_POSITION_UNKNOWN_UNSPECIFIED",
		1: "FIXTURE_POSITION_CLOSED",
		2: "FIXTURE_POSITION_OPEN",
		3: "FIXTURE_POSITION_INTERMEDIATE",
		4: "FIXTURE_POSITION_INVALID",
	}
	FixturePosition_value = map[string]int32{
		"FIXTURE_POSITION_UNKNOWN_UNSPECIFIED": 0,
		"FIXTURE_POSITION_CLOSED":              1,
		"FIXTURE_POSITION_OPEN":                2,
		"FIXTURE_POSITION_INTERMEDIATE":        3,
		"FIXTURE_POSITION_INVALID":             4,
	}
)

func (x FixturePosition) Enum() *FixturePosition {
	p := new(FixturePosition)
	*p = x
	return p
}

func (x FixturePosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixturePosition) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[7].Descriptor()
}

func (FixturePosition) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[7]
}

func (x FixturePosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixturePosition.Descriptor instead.
func (FixturePosition) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{7}
}

type EquipmentStatus int32

const (
	EquipmentStatus_EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED EquipmentStatus = 0
	EquipmentStatus_EQUIPMENT_STATUS_NEEDS_COMMISSIONING EquipmentStatus = 1 // initial value or when commanded to recommission
	EquipmentStatus_EQUIPMENT_STATUS_NEEDS_MAINTENANCE   EquipmentStatus = 2 // When self test fails or when set by TC
	EquipmentStatus_EQUIPMENT_STATUS_NEEDS_APPROVAL      EquipmentStatus = 3 // When self test cycle has run , waiting for approval from operator
	EquipmentStatus_EQUIPMENT_STATUS_IN_OPERATION        EquipmentStatus = 4 // When operator approves self test cycle, ready for production
)

// Enum value maps for EquipmentStatus.
var (
	EquipmentStatus_name = map[int32]string{
		0: "EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED",
		1: "EQUIPMENT_STATUS_NEEDS_COMMISSIONING",
		2: "EQUIPMENT_STATUS_NEEDS_MAINTENANCE",
		3: "EQUIPMENT_STATUS_NEEDS_APPROVAL",
		4: "EQUIPMENT_STATUS_IN_OPERATION",
	}
	EquipmentStatus_value = map[string]int32{
		"EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"EQUIPMENT_STATUS_NEEDS_COMMISSIONING": 1,
		"EQUIPMENT_STATUS_NEEDS_MAINTENANCE":   2,
		"EQUIPMENT_STATUS_NEEDS_APPROVAL":      3,
		"EQUIPMENT_STATUS_IN_OPERATION":        4,
	}
)

func (x EquipmentStatus) Enum() *EquipmentStatus {
	p := new(EquipmentStatus)
	*p = x
	return p
}

func (x EquipmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[8].Descriptor()
}

func (EquipmentStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[8]
}

func (x EquipmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentStatus.Descriptor instead.
func (EquipmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{8}
}

type FireAlarmStatus int32

const (
	FireAlarmStatus_FIRE_ALARM_UNKNOWN_UNSPECIFIED FireAlarmStatus = 0 // No heat spots detected by the fixture
	FireAlarmStatus_FIRE_ALARM_LEVEL_0             FireAlarmStatus = 1 // Two or more sensors detecting higher temperatures
	FireAlarmStatus_FIRE_ALARM_LEVEL_1             FireAlarmStatus = 2 // Two or more sensors detecting very high temperatures
)

// Enum value maps for FireAlarmStatus.
var (
	FireAlarmStatus_name = map[int32]string{
		0: "FIRE_ALARM_UNKNOWN_UNSPECIFIED",
		1: "FIRE_ALARM_LEVEL_0",
		2: "FIRE_ALARM_LEVEL_1",
	}
	FireAlarmStatus_value = map[string]int32{
		"FIRE_ALARM_UNKNOWN_UNSPECIFIED": 0,
		"FIRE_ALARM_LEVEL_0":             1,
		"FIRE_ALARM_LEVEL_1":             2,
	}
)

func (x FireAlarmStatus) Enum() *FireAlarmStatus {
	p := new(FireAlarmStatus)
	*p = x
	return p
}

func (x FireAlarmStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FireAlarmStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[9].Descriptor()
}

func (FireAlarmStatus) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[9]
}

func (x FireAlarmStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FireAlarmStatus.Descriptor instead.
func (FireAlarmStatus) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{9}
}

type FormRequest int32

const (
	FormRequest_FORM_REQUEST_UNKNOWN_UNSPECIFIED FormRequest = 0
	FormRequest_FORM_REQUEST_STOP                FormRequest = 1
	FormRequest_FORM_REQUEST_START               FormRequest = 2
	FormRequest_FORM_REQUEST_UPDATE_CELLS        FormRequest = 3
	FormRequest_FORM_REQUEST_FAULT_RESET         FormRequest = 4
	FormRequest_FORM_REQUEST_PAUSE               FormRequest = 5
	FormRequest_FORM_REQUEST_RESUME              FormRequest = 6
)

// Enum value maps for FormRequest.
var (
	FormRequest_name = map[int32]string{
		0: "FORM_REQUEST_UNKNOWN_UNSPECIFIED",
		1: "FORM_REQUEST_STOP",
		2: "FORM_REQUEST_START",
		3: "FORM_REQUEST_UPDATE_CELLS",
		4: "FORM_REQUEST_FAULT_RESET",
		5: "FORM_REQUEST_PAUSE",
		6: "FORM_REQUEST_RESUME",
	}
	FormRequest_value = map[string]int32{
		"FORM_REQUEST_UNKNOWN_UNSPECIFIED": 0,
		"FORM_REQUEST_STOP":                1,
		"FORM_REQUEST_START":               2,
		"FORM_REQUEST_UPDATE_CELLS":        3,
		"FORM_REQUEST_FAULT_RESET":         4,
		"FORM_REQUEST_PAUSE":               5,
		"FORM_REQUEST_RESUME":              6,
	}
)

func (x FormRequest) Enum() *FormRequest {
	p := new(FormRequest)
	*p = x
	return p
}

func (x FormRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[10].Descriptor()
}

func (FormRequest) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[10]
}

func (x FormRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormRequest.Descriptor instead.
func (FormRequest) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{10}
}

type EquipmentRequest int32

const (
	EquipmentRequest_EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED EquipmentRequest = 0
	EquipmentRequest_EQUIPMENT_REQUEST_SELF_TEST_APPROVED  EquipmentRequest = 1 // operator has reviewed self test data, put fixture into production
	EquipmentRequest_EQUIPMENT_REQUEST_MAINTENANCE         EquipmentRequest = 2 // put fixture in maintenance mode
	EquipmentRequest_EQUIPMENT_REQUEST_RECOMMISSIONING     EquipmentRequest = 3 // reset fixture hardware status to require commissioning
)

// Enum value maps for EquipmentRequest.
var (
	EquipmentRequest_name = map[int32]string{
		0: "EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED",
		1: "EQUIPMENT_REQUEST_SELF_TEST_APPROVED",
		2: "EQUIPMENT_REQUEST_MAINTENANCE",
		3: "EQUIPMENT_REQUEST_RECOMMISSIONING",
	}
	EquipmentRequest_value = map[string]int32{
		"EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED": 0,
		"EQUIPMENT_REQUEST_SELF_TEST_APPROVED":  1,
		"EQUIPMENT_REQUEST_MAINTENANCE":         2,
		"EQUIPMENT_REQUEST_RECOMMISSIONING":     3,
	}
)

func (x EquipmentRequest) Enum() *EquipmentRequest {
	p := new(EquipmentRequest)
	*p = x
	return p
}

func (x EquipmentRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[11].Descriptor()
}

func (EquipmentRequest) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[11]
}

func (x EquipmentRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentRequest.Descriptor instead.
func (EquipmentRequest) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{11}
}

type RecipeStep_FormMode int32

const (
	RecipeStep_FORM_MODE_UNKNOWN_UNSPECIFIED RecipeStep_FormMode = 0
	RecipeStep_FORM_MODE_CC                  RecipeStep_FormMode = 1
	RecipeStep_FORM_MODE_CV                  RecipeStep_FormMode = 2
	RecipeStep_FORM_MODE_DELAY               RecipeStep_FormMode = 3
	RecipeStep_FORM_MODE_CP                  RecipeStep_FormMode = 4
	RecipeStep_FORM_MODE_DCR_PULSE           RecipeStep_FormMode = 5
)

// Enum value maps for RecipeStep_FormMode.
var (
	RecipeStep_FormMode_name = map[int32]string{
		0: "FORM_MODE_UNKNOWN_UNSPECIFIED",
		1: "FORM_MODE_CC",
		2: "FORM_MODE_CV",
		3: "FORM_MODE_DELAY",
		4: "FORM_MODE_CP",
		5: "FORM_MODE_DCR_PULSE",
	}
	RecipeStep_FormMode_value = map[string]int32{
		"FORM_MODE_UNKNOWN_UNSPECIFIED": 0,
		"FORM_MODE_CC":                  1,
		"FORM_MODE_CV":                  2,
		"FORM_MODE_DELAY":               3,
		"FORM_MODE_CP":                  4,
		"FORM_MODE_DCR_PULSE":           5,
	}
)

func (x RecipeStep_FormMode) Enum() *RecipeStep_FormMode {
	p := new(RecipeStep_FormMode)
	*p = x
	return p
}

func (x RecipeStep_FormMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeStep_FormMode) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[12].Descriptor()
}

func (RecipeStep_FormMode) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[12]
}

func (x RecipeStep_FormMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeStep_FormMode.Descriptor instead.
func (RecipeStep_FormMode) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{24, 0}
}

type RecipeStep_EndingStyle int32

const (
	RecipeStep_ENDING_STYLE_UNKNOWN_UNSPECIFIED RecipeStep_EndingStyle = 0
	RecipeStep_ENDING_STYLE_CELL_BYPASS_ENABLE  RecipeStep_EndingStyle = 1
	RecipeStep_ENDING_STYLE_CELL_BYPASS_DISABLE RecipeStep_EndingStyle = 2
	RecipeStep_ENDING_STYLE_CUTOFF_BY_AH        RecipeStep_EndingStyle = 3
)

// Enum value maps for RecipeStep_EndingStyle.
var (
	RecipeStep_EndingStyle_name = map[int32]string{
		0: "ENDING_STYLE_UNKNOWN_UNSPECIFIED",
		1: "ENDING_STYLE_CELL_BYPASS_ENABLE",
		2: "ENDING_STYLE_CELL_BYPASS_DISABLE",
		3: "ENDING_STYLE_CUTOFF_BY_AH",
	}
	RecipeStep_EndingStyle_value = map[string]int32{
		"ENDING_STYLE_UNKNOWN_UNSPECIFIED": 0,
		"ENDING_STYLE_CELL_BYPASS_ENABLE":  1,
		"ENDING_STYLE_CELL_BYPASS_DISABLE": 2,
		"ENDING_STYLE_CUTOFF_BY_AH":        3,
	}
)

func (x RecipeStep_EndingStyle) Enum() *RecipeStep_EndingStyle {
	p := new(RecipeStep_EndingStyle)
	*p = x
	return p
}

func (x RecipeStep_EndingStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeStep_EndingStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_tower_proto_enumTypes[13].Descriptor()
}

func (RecipeStep_EndingStyle) Type() protoreflect.EnumType {
	return &file_tower_proto_enumTypes[13]
}

func (x RecipeStep_EndingStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeStep_EndingStyle.Descriptor instead.
func (RecipeStep_EndingStyle) EnumDescriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{24, 1}
}

type Genealogy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardPn      string `protobuf:"bytes,1,opt,name=board_pn,json=boardPn,proto3" json:"board_pn,omitempty"`
	BoardSn      string `protobuf:"bytes,2,opt,name=board_sn,json=boardSn,proto3" json:"board_sn,omitempty"`
	PackagePn    string `protobuf:"bytes,3,opt,name=package_pn,json=packagePn,proto3" json:"package_pn,omitempty"`
	PackageSn    string `protobuf:"bytes,4,opt,name=package_sn,json=packageSn,proto3" json:"package_sn,omitempty"`
	SubpackagePn string `protobuf:"bytes,5,opt,name=subpackage_pn,json=subpackagePn,proto3" json:"subpackage_pn,omitempty"`
	SubpackageSn string `protobuf:"bytes,6,opt,name=subpackage_sn,json=subpackageSn,proto3" json:"subpackage_sn,omitempty"`
	PcbaId       uint64 `protobuf:"varint,7,opt,name=pcba_id,json=pcbaId,proto3" json:"pcba_id,omitempty"`
	UsageId      uint64 `protobuf:"varint,8,opt,name=usage_id,json=usageId,proto3" json:"usage_id,omitempty"`
	AssemblyId   uint64 `protobuf:"varint,9,opt,name=assembly_id,json=assemblyId,proto3" json:"assembly_id,omitempty"`
	AppGithash   uint64 `protobuf:"varint,10,opt,name=app_githash,json=appGithash,proto3" json:"app_githash,omitempty"`
}

func (x *Genealogy) Reset() {
	*x = Genealogy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genealogy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genealogy) ProtoMessage() {}

func (x *Genealogy) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genealogy.ProtoReflect.Descriptor instead.
func (*Genealogy) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{0}
}

func (x *Genealogy) GetBoardPn() string {
	if x != nil {
		return x.BoardPn
	}
	return ""
}

func (x *Genealogy) GetBoardSn() string {
	if x != nil {
		return x.BoardSn
	}
	return ""
}

func (x *Genealogy) GetPackagePn() string {
	if x != nil {
		return x.PackagePn
	}
	return ""
}

func (x *Genealogy) GetPackageSn() string {
	if x != nil {
		return x.PackageSn
	}
	return ""
}

func (x *Genealogy) GetSubpackagePn() string {
	if x != nil {
		return x.SubpackagePn
	}
	return ""
}

func (x *Genealogy) GetSubpackageSn() string {
	if x != nil {
		return x.SubpackageSn
	}
	return ""
}

func (x *Genealogy) GetPcbaId() uint64 {
	if x != nil {
		return x.PcbaId
	}
	return 0
}

func (x *Genealogy) GetUsageId() uint64 {
	if x != nil {
		return x.UsageId
	}
	return 0
}

func (x *Genealogy) GetAssemblyId() uint64 {
	if x != nil {
		return x.AssemblyId
	}
	return 0
}

func (x *Genealogy) GetAppGithash() uint64 {
	if x != nil {
		return x.AppGithash
	}
	return 0
}

type FxrSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VBusHv                  float32 `protobuf:"fixed32,1,opt,name=v_bus_hv,json=vBusHv,proto3" json:"v_bus_hv,omitempty"`                                                    // 80V bus
	VBus_24                 float32 `protobuf:"fixed32,3,opt,name=v_bus_24,json=vBus24,proto3" json:"v_bus_24,omitempty"`                                                    // 24V bus voltage
	PositionSwitchClosed    bool    `protobuf:"varint,4,opt,name=position_switch_closed,json=positionSwitchClosed,proto3" json:"position_switch_closed,omitempty"`           // switch indicating fixture is raised (closed)
	PositionSwitchOpen      bool    `protobuf:"varint,5,opt,name=position_switch_open,json=positionSwitchOpen,proto3" json:"position_switch_open,omitempty"`                 // switch indicating fixture is lowered (open)
	MicroTemp               float32 `protobuf:"fixed32,6,opt,name=micro_temp,json=microTemp,proto3" json:"micro_temp,omitempty"`                                             // microcontroller internal temperature sensor (DegC)
	VRail_5V                float32 `protobuf:"fixed32,7,opt,name=v_rail_5v,json=vRail5v,proto3" json:"v_rail_5v,omitempty"`                                                 // regulated 5v voltage sense (V)
	VRail_3V3               float32 `protobuf:"fixed32,8,opt,name=v_rail_3v3,json=vRail3v3,proto3" json:"v_rail_3v3,omitempty"`                                              // regulated 3.3v voltage sense (V)
	PowerSupplyFault        bool    `protobuf:"varint,9,opt,name=power_supply_fault,json=powerSupplyFault,proto3" json:"power_supply_fault,omitempty"`                       // 80V to 24V power supply fault
	StibFibEfuseFault       bool    `protobuf:"varint,10,opt,name=stib_fib_efuse_fault,json=stibFibEfuseFault,proto3" json:"stib_fib_efuse_fault,omitempty"`                 // 24V logic power to STIBs/FIB overcurrent
	FanEfuseFault           bool    `protobuf:"varint,11,opt,name=fan_efuse_fault,json=fanEfuseFault,proto3" json:"fan_efuse_fault,omitempty"`                               // overcurrent from 24V fan output
	IFan_24                 float32 `protobuf:"fixed32,12,opt,name=i_fan_24,json=iFan24,proto3" json:"i_fan_24,omitempty"`                                                   // fan current draw (A)
	IStibFib_24             float32 `protobuf:"fixed32,13,opt,name=i_stib_fib_24,json=iStibFib24,proto3" json:"i_stib_fib_24,omitempty"`                                     // 24V logic current draw (A)
	VSolenoid_24            float32 `protobuf:"fixed32,14,opt,name=v_solenoid_24,json=vSolenoid24,proto3" json:"v_solenoid_24,omitempty"`                                    // solenoid drive output voltage sense (V)
	EnumerationUartLoopback bool    `protobuf:"varint,15,opt,name=enumeration_uart_loopback,json=enumerationUartLoopback,proto3" json:"enumeration_uart_loopback,omitempty"` // enumeration RX/TX pins detected as loopback
	EnumerationUartReceived bool    `protobuf:"varint,16,opt,name=enumeration_uart_received,json=enumerationUartReceived,proto3" json:"enumeration_uart_received,omitempty"` // enumeration received via UART
	EnumerationGpioValid    bool    `protobuf:"varint,17,opt,name=enumeration_gpio_valid,json=enumerationGpioValid,proto3" json:"enumeration_gpio_valid,omitempty"`          // enumeration set via GPIO PCBA
}

func (x *FxrSensors) Reset() {
	*x = FxrSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrSensors) ProtoMessage() {}

func (x *FxrSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrSensors.ProtoReflect.Descriptor instead.
func (*FxrSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{1}
}

func (x *FxrSensors) GetVBusHv() float32 {
	if x != nil {
		return x.VBusHv
	}
	return 0
}

func (x *FxrSensors) GetVBus_24() float32 {
	if x != nil {
		return x.VBus_24
	}
	return 0
}

func (x *FxrSensors) GetPositionSwitchClosed() bool {
	if x != nil {
		return x.PositionSwitchClosed
	}
	return false
}

func (x *FxrSensors) GetPositionSwitchOpen() bool {
	if x != nil {
		return x.PositionSwitchOpen
	}
	return false
}

func (x *FxrSensors) GetMicroTemp() float32 {
	if x != nil {
		return x.MicroTemp
	}
	return 0
}

func (x *FxrSensors) GetVRail_5V() float32 {
	if x != nil {
		return x.VRail_5V
	}
	return 0
}

func (x *FxrSensors) GetVRail_3V3() float32 {
	if x != nil {
		return x.VRail_3V3
	}
	return 0
}

func (x *FxrSensors) GetPowerSupplyFault() bool {
	if x != nil {
		return x.PowerSupplyFault
	}
	return false
}

func (x *FxrSensors) GetStibFibEfuseFault() bool {
	if x != nil {
		return x.StibFibEfuseFault
	}
	return false
}

func (x *FxrSensors) GetFanEfuseFault() bool {
	if x != nil {
		return x.FanEfuseFault
	}
	return false
}

func (x *FxrSensors) GetIFan_24() float32 {
	if x != nil {
		return x.IFan_24
	}
	return 0
}

func (x *FxrSensors) GetIStibFib_24() float32 {
	if x != nil {
		return x.IStibFib_24
	}
	return 0
}

func (x *FxrSensors) GetVSolenoid_24() float32 {
	if x != nil {
		return x.VSolenoid_24
	}
	return 0
}

func (x *FxrSensors) GetEnumerationUartLoopback() bool {
	if x != nil {
		return x.EnumerationUartLoopback
	}
	return false
}

func (x *FxrSensors) GetEnumerationUartReceived() bool {
	if x != nil {
		return x.EnumerationUartReceived
	}
	return false
}

func (x *FxrSensors) GetEnumerationGpioValid() bool {
	if x != nil {
		return x.EnumerationGpioValid
	}
	return false
}

type FxrInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackUsageSystem float32 `protobuf:"fixed32,7,opt,name=stack_usage_system,json=stackUsageSystem,proto3" json:"stack_usage_system,omitempty"`
	StackUsage_1Khz  float32 `protobuf:"fixed32,8,opt,name=stack_usage_1khz,json=stackUsage1khz,proto3" json:"stack_usage_1khz,omitempty"`
	StackUsage_10Hz  float32 `protobuf:"fixed32,9,opt,name=stack_usage_10hz,json=stackUsage10hz,proto3" json:"stack_usage_10hz,omitempty"`
	StackUsageUds    float32 `protobuf:"fixed32,10,opt,name=stack_usage_uds,json=stackUsageUds,proto3" json:"stack_usage_uds,omitempty"`
	StackUsageNvram  float32 `protobuf:"fixed32,11,opt,name=stack_usage_nvram,json=stackUsageNvram,proto3" json:"stack_usage_nvram,omitempty"`
}

func (x *FxrInternal) Reset() {
	*x = FxrInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrInternal) ProtoMessage() {}

func (x *FxrInternal) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrInternal.ProtoReflect.Descriptor instead.
func (*FxrInternal) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{2}
}

func (x *FxrInternal) GetStackUsageSystem() float32 {
	if x != nil {
		return x.StackUsageSystem
	}
	return 0
}

func (x *FxrInternal) GetStackUsage_1Khz() float32 {
	if x != nil {
		return x.StackUsage_1Khz
	}
	return 0
}

func (x *FxrInternal) GetStackUsage_10Hz() float32 {
	if x != nil {
		return x.StackUsage_10Hz
	}
	return 0
}

func (x *FxrInternal) GetStackUsageUds() float32 {
	if x != nil {
		return x.StackUsageUds
	}
	return 0
}

func (x *FxrInternal) GetStackUsageNvram() float32 {
	if x != nil {
		return x.StackUsageNvram
	}
	return 0
}

type FxrOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StibEnableLine     bool `protobuf:"varint,1,opt,name=stib_enable_line,json=stibEnableLine,proto3" json:"stib_enable_line,omitempty"`
	FixtureCloseEnable bool `protobuf:"varint,2,opt,name=fixture_close_enable,json=fixtureCloseEnable,proto3" json:"fixture_close_enable,omitempty"`
	StibFibPowerOn     bool `protobuf:"varint,3,opt,name=stib_fib_power_on,json=stibFibPowerOn,proto3" json:"stib_fib_power_on,omitempty"`
	FanPowerOn         bool `protobuf:"varint,4,opt,name=fan_power_on,json=fanPowerOn,proto3" json:"fan_power_on,omitempty"`
}

func (x *FxrOutputs) Reset() {
	*x = FxrOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FxrOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FxrOutputs) ProtoMessage() {}

func (x *FxrOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FxrOutputs.ProtoReflect.Descriptor instead.
func (*FxrOutputs) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{3}
}

func (x *FxrOutputs) GetStibEnableLine() bool {
	if x != nil {
		return x.StibEnableLine
	}
	return false
}

func (x *FxrOutputs) GetFixtureCloseEnable() bool {
	if x != nil {
		return x.FixtureCloseEnable
	}
	return false
}

func (x *FxrOutputs) GetStibFibPowerOn() bool {
	if x != nil {
		return x.StibFibPowerOn
	}
	return false
}

func (x *FxrOutputs) GetFanPowerOn() bool {
	if x != nil {
		return x.FanPowerOn
	}
	return false
}

type Isolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoState          IsoState `protobuf:"varint,1,opt,name=iso_state,json=isoState,proto3,enum=IsoState" json:"iso_state,omitempty"`                 // isolation statemachine
	IsoVchassisSwOff  float32  `protobuf:"fixed32,2,opt,name=iso_vchassis_sw_off,json=isoVchassisSwOff,proto3" json:"iso_vchassis_sw_off,omitempty"`  // chassis voltage when top balancer off
	IsoVchassisSwOn   float32  `protobuf:"fixed32,3,opt,name=iso_vchassis_sw_on,json=isoVchassisSwOn,proto3" json:"iso_vchassis_sw_on,omitempty"`     // chassis voltage when top balancer on
	IsoVbusSwOff      float32  `protobuf:"fixed32,4,opt,name=iso_vbus_sw_off,json=isoVbusSwOff,proto3" json:"iso_vbus_sw_off,omitempty"`              // Bus voltage when top balancer off
	IsoVbusSwOn       float32  `protobuf:"fixed32,5,opt,name=iso_vbus_sw_on,json=isoVbusSwOn,proto3" json:"iso_vbus_sw_on,omitempty"`                 // Bus voltage when top balancer on
	IsoResistanceHigh float32  `protobuf:"fixed32,6,opt,name=iso_resistance_high,json=isoResistanceHigh,proto3" json:"iso_resistance_high,omitempty"` // isolation Resistance between VBus and chassis
	IsoResistanceLow  float32  `protobuf:"fixed32,7,opt,name=iso_resistance_low,json=isoResistanceLow,proto3" json:"iso_resistance_low,omitempty"`    // isolation Resistance between chassis and Vbus return
	IsoError          IsoError `protobuf:"varint,8,opt,name=iso_error,json=isoError,proto3,enum=IsoError" json:"iso_error,omitempty"`                 // Isolation faults
}

func (x *Isolation) Reset() {
	*x = Isolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Isolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Isolation) ProtoMessage() {}

func (x *Isolation) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Isolation.ProtoReflect.Descriptor instead.
func (*Isolation) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{4}
}

func (x *Isolation) GetIsoState() IsoState {
	if x != nil {
		return x.IsoState
	}
	return IsoState_ISO_STATE_UNKNOWN_UNSPECIFIED
}

func (x *Isolation) GetIsoVchassisSwOff() float32 {
	if x != nil {
		return x.IsoVchassisSwOff
	}
	return 0
}

func (x *Isolation) GetIsoVchassisSwOn() float32 {
	if x != nil {
		return x.IsoVchassisSwOn
	}
	return 0
}

func (x *Isolation) GetIsoVbusSwOff() float32 {
	if x != nil {
		return x.IsoVbusSwOff
	}
	return 0
}

func (x *Isolation) GetIsoVbusSwOn() float32 {
	if x != nil {
		return x.IsoVbusSwOn
	}
	return 0
}

func (x *Isolation) GetIsoResistanceHigh() float32 {
	if x != nil {
		return x.IsoResistanceHigh
	}
	return 0
}

func (x *Isolation) GetIsoResistanceLow() float32 {
	if x != nil {
		return x.IsoResistanceLow
	}
	return 0
}

func (x *Isolation) GetIsoError() IsoError {
	if x != nil {
		return x.IsoError
	}
	return IsoError_ISO_ERROR_UNKNOWN_UNSPECIFIED
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixtureClosingTime float32 `protobuf:"fixed32,1,opt,name=fixture_closing_time,json=fixtureClosingTime,proto3" json:"fixture_closing_time,omitempty"`
	FixtureOpeningTime float32 `protobuf:"fixed32,2,opt,name=fixture_opening_time,json=fixtureOpeningTime,proto3" json:"fixture_opening_time,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetFixtureClosingTime() float32 {
	if x != nil {
		return x.FixtureClosingTime
	}
	return 0
}

func (x *Position) GetFixtureOpeningTime() float32 {
	if x != nil {
		return x.FixtureOpeningTime
	}
	return 0
}

type Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastErrorCode int32 `protobuf:"zigzag32,1,opt,name=last_error_code,json=lastErrorCode,proto3" json:"last_error_code,omitempty"` // either 0 for OK or negative number, see lfs_error
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{6}
}

func (x *Filesystem) GetLastErrorCode() int32 {
	if x != nil {
		return x.LastErrorCode
	}
	return 0
}

type Fxr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors       *FxrSensors  `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Internal      *FxrInternal `protobuf:"bytes,2,opt,name=internal,proto3" json:"internal,omitempty"`
	Outputs       *FxrOutputs  `protobuf:"bytes,3,opt,name=outputs,proto3" json:"outputs,omitempty"`
	Genealogy     *Genealogy   `protobuf:"bytes,4,opt,name=genealogy,proto3" json:"genealogy,omitempty"`
	AlertMatrices *AlertMatrix `protobuf:"bytes,5,opt,name=alert_matrices,json=alertMatrices,proto3" json:"alert_matrices,omitempty"`
	Isolation     *Isolation   `protobuf:"bytes,6,opt,name=isolation,proto3" json:"isolation,omitempty"`
	Filesystem    *Filesystem  `protobuf:"bytes,7,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	Position      *Position    `protobuf:"bytes,8,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Fxr) Reset() {
	*x = Fxr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fxr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fxr) ProtoMessage() {}

func (x *Fxr) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fxr.ProtoReflect.Descriptor instead.
func (*Fxr) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{7}
}

func (x *Fxr) GetSensors() *FxrSensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Fxr) GetInternal() *FxrInternal {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *Fxr) GetOutputs() *FxrOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Fxr) GetGenealogy() *Genealogy {
	if x != nil {
		return x.Genealogy
	}
	return nil
}

func (x *Fxr) GetAlertMatrices() *AlertMatrix {
	if x != nil {
		return x.AlertMatrices
	}
	return nil
}

func (x *Fxr) GetIsolation() *Isolation {
	if x != nil {
		return x.Isolation
	}
	return nil
}

func (x *Fxr) GetFilesystem() *Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *Fxr) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type FibSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IBus_24     float32 `protobuf:"fixed32,1,opt,name=i_bus_24,json=iBus24,proto3" json:"i_bus_24,omitempty"`
	VBus_24     float32 `protobuf:"fixed32,2,opt,name=v_bus_24,json=vBus24,proto3" json:"v_bus_24,omitempty"`
	PBus_24     float32 `protobuf:"fixed32,3,opt,name=p_bus_24,json=pBus24,proto3" json:"p_bus_24,omitempty"`
	PcbTemp     float32 `protobuf:"fixed32,4,opt,name=pcb_temp,json=pcbTemp,proto3" json:"pcb_temp,omitempty"`
	VRail_5V    float32 `protobuf:"fixed32,5,opt,name=v_rail_5v,json=vRail5v,proto3" json:"v_rail_5v,omitempty"`
	VRail_3V3   float32 `protobuf:"fixed32,6,opt,name=v_rail_3v3,json=vRail3v3,proto3" json:"v_rail_3v3,omitempty"`
	MicroTemp   float32 `protobuf:"fixed32,7,opt,name=micro_temp,json=microTemp,proto3" json:"micro_temp,omitempty"`
	TrayPresent bool    `protobuf:"varint,8,opt,name=tray_present,json=trayPresent,proto3" json:"tray_present,omitempty"`
}

func (x *FibSensors) Reset() {
	*x = FibSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibSensors) ProtoMessage() {}

func (x *FibSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibSensors.ProtoReflect.Descriptor instead.
func (*FibSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{8}
}

func (x *FibSensors) GetIBus_24() float32 {
	if x != nil {
		return x.IBus_24
	}
	return 0
}

func (x *FibSensors) GetVBus_24() float32 {
	if x != nil {
		return x.VBus_24
	}
	return 0
}

func (x *FibSensors) GetPBus_24() float32 {
	if x != nil {
		return x.PBus_24
	}
	return 0
}

func (x *FibSensors) GetPcbTemp() float32 {
	if x != nil {
		return x.PcbTemp
	}
	return 0
}

func (x *FibSensors) GetVRail_5V() float32 {
	if x != nil {
		return x.VRail_5V
	}
	return 0
}

func (x *FibSensors) GetVRail_3V3() float32 {
	if x != nil {
		return x.VRail_3V3
	}
	return 0
}

func (x *FibSensors) GetMicroTemp() float32 {
	if x != nil {
		return x.MicroTemp
	}
	return 0
}

func (x *FibSensors) GetTrayPresent() bool {
	if x != nil {
		return x.TrayPresent
	}
	return false
}

type FibInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuTimeIsr       float32 `protobuf:"fixed32,1,opt,name=cpu_time_isr,json=cpuTimeIsr,proto3" json:"cpu_time_isr,omitempty"`
	CpuTimeIsrMax    float32 `protobuf:"fixed32,2,opt,name=cpu_time_isr_max,json=cpuTimeIsrMax,proto3" json:"cpu_time_isr_max,omitempty"`
	CpuTime_1Khz     float32 `protobuf:"fixed32,3,opt,name=cpu_time_1khz,json=cpuTime1khz,proto3" json:"cpu_time_1khz,omitempty"`
	CpuTime_1KhzMax  float32 `protobuf:"fixed32,4,opt,name=cpu_time_1khz_max,json=cpuTime1khzMax,proto3" json:"cpu_time_1khz_max,omitempty"`
	CpuTime_10Hz     float32 `protobuf:"fixed32,5,opt,name=cpu_time_10hz,json=cpuTime10hz,proto3" json:"cpu_time_10hz,omitempty"`
	CpuTime_10KhzMax float32 `protobuf:"fixed32,6,opt,name=cpu_time_10khz_max,json=cpuTime10khzMax,proto3" json:"cpu_time_10khz_max,omitempty"`
	StackUsageSystem float32 `protobuf:"fixed32,7,opt,name=stack_usage_system,json=stackUsageSystem,proto3" json:"stack_usage_system,omitempty"` // %
	StackUsage_1Khz  float32 `protobuf:"fixed32,8,opt,name=stack_usage_1khz,json=stackUsage1khz,proto3" json:"stack_usage_1khz,omitempty"`
	StackUsage_10Hz  float32 `protobuf:"fixed32,9,opt,name=stack_usage_10hz,json=stackUsage10hz,proto3" json:"stack_usage_10hz,omitempty"`
	StackUsageUds    float32 `protobuf:"fixed32,10,opt,name=stack_usage_uds,json=stackUsageUds,proto3" json:"stack_usage_uds,omitempty"`
	StackUsageNvram  float32 `protobuf:"fixed32,11,opt,name=stack_usage_nvram,json=stackUsageNvram,proto3" json:"stack_usage_nvram,omitempty"`
}

func (x *FibInternal) Reset() {
	*x = FibInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibInternal) ProtoMessage() {}

func (x *FibInternal) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibInternal.ProtoReflect.Descriptor instead.
func (*FibInternal) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{9}
}

func (x *FibInternal) GetCpuTimeIsr() float32 {
	if x != nil {
		return x.CpuTimeIsr
	}
	return 0
}

func (x *FibInternal) GetCpuTimeIsrMax() float32 {
	if x != nil {
		return x.CpuTimeIsrMax
	}
	return 0
}

func (x *FibInternal) GetCpuTime_1Khz() float32 {
	if x != nil {
		return x.CpuTime_1Khz
	}
	return 0
}

func (x *FibInternal) GetCpuTime_1KhzMax() float32 {
	if x != nil {
		return x.CpuTime_1KhzMax
	}
	return 0
}

func (x *FibInternal) GetCpuTime_10Hz() float32 {
	if x != nil {
		return x.CpuTime_10Hz
	}
	return 0
}

func (x *FibInternal) GetCpuTime_10KhzMax() float32 {
	if x != nil {
		return x.CpuTime_10KhzMax
	}
	return 0
}

func (x *FibInternal) GetStackUsageSystem() float32 {
	if x != nil {
		return x.StackUsageSystem
	}
	return 0
}

func (x *FibInternal) GetStackUsage_1Khz() float32 {
	if x != nil {
		return x.StackUsage_1Khz
	}
	return 0
}

func (x *FibInternal) GetStackUsage_10Hz() float32 {
	if x != nil {
		return x.StackUsage_10Hz
	}
	return 0
}

func (x *FibInternal) GetStackUsageUds() float32 {
	if x != nil {
		return x.StackUsageUds
	}
	return 0
}

func (x *FibInternal) GetStackUsageNvram() float32 {
	if x != nil {
		return x.StackUsageNvram
	}
	return 0
}

type FanMeasurements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed             float32 `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	SpeedRequest      float32 `protobuf:"fixed32,2,opt,name=speed_request,json=speedRequest,proto3" json:"speed_request,omitempty"`
	Duty              float32 `protobuf:"fixed32,3,opt,name=duty,proto3" json:"duty,omitempty"`
	DutyControlActive bool    `protobuf:"varint,4,opt,name=duty_control_active,json=dutyControlActive,proto3" json:"duty_control_active,omitempty"`
}

func (x *FanMeasurements) Reset() {
	*x = FanMeasurements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanMeasurements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanMeasurements) ProtoMessage() {}

func (x *FanMeasurements) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanMeasurements.ProtoReflect.Descriptor instead.
func (*FanMeasurements) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{10}
}

func (x *FanMeasurements) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *FanMeasurements) GetSpeedRequest() float32 {
	if x != nil {
		return x.SpeedRequest
	}
	return 0
}

func (x *FanMeasurements) GetDuty() float32 {
	if x != nil {
		return x.Duty
	}
	return 0
}

func (x *FanMeasurements) GetDutyControlActive() bool {
	if x != nil {
		return x.DutyControlActive
	}
	return false
}

type Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       FanStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=FanStatus" json:"status,omitempty"`
	Measurements *FanMeasurements `protobuf:"bytes,2,opt,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *Fan) Reset() {
	*x = Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fan) ProtoMessage() {}

func (x *Fan) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fan.ProtoReflect.Descriptor instead.
func (*Fan) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{11}
}

func (x *Fan) GetStatus() FanStatus {
	if x != nil {
		return x.Status
	}
	return FanStatus_FAN_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *Fan) GetMeasurements() *FanMeasurements {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type Fib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors       *FibSensors  `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Internal      *FibInternal `protobuf:"bytes,2,opt,name=internal,proto3" json:"internal,omitempty"`
	Genealogy     *Genealogy   `protobuf:"bytes,3,opt,name=genealogy,proto3" json:"genealogy,omitempty"`
	Fans          []*Fan       `protobuf:"bytes,4,rep,name=fans,proto3" json:"fans,omitempty"` // always 9 fans
	AlertMatrices *AlertMatrix `protobuf:"bytes,5,opt,name=alert_matrices,json=alertMatrices,proto3" json:"alert_matrices,omitempty"`
}

func (x *Fib) Reset() {
	*x = Fib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fib) ProtoMessage() {}

func (x *Fib) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fib.ProtoReflect.Descriptor instead.
func (*Fib) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{12}
}

func (x *Fib) GetSensors() *FibSensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Fib) GetInternal() *FibInternal {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *Fib) GetGenealogy() *Genealogy {
	if x != nil {
		return x.Genealogy
	}
	return nil
}

func (x *Fib) GetFans() []*Fan {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *Fib) GetAlertMatrices() *AlertMatrix {
	if x != nil {
		return x.AlertMatrices
	}
	return nil
}

type StibSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusVoltage     float32 `protobuf:"fixed32,1,opt,name=bus_voltage,json=busVoltage,proto3" json:"bus_voltage,omitempty"`
	StringVoltage  float32 `protobuf:"fixed32,2,opt,name=string_voltage,json=stringVoltage,proto3" json:"string_voltage,omitempty"`
	StringCurrent  float32 `protobuf:"fixed32,3,opt,name=string_current,json=stringCurrent,proto3" json:"string_current,omitempty"`
	Phase_1Temp    float32 `protobuf:"fixed32,4,opt,name=phase_1_temp,json=phase1Temp,proto3" json:"phase_1_temp,omitempty"`
	Phase_2Temp    float32 `protobuf:"fixed32,5,opt,name=phase_2_temp,json=phase2Temp,proto3" json:"phase_2_temp,omitempty"`
	ShuntTemp      float32 `protobuf:"fixed32,6,opt,name=shunt_temp,json=shuntTemp,proto3" json:"shunt_temp,omitempty"`
	PcbTemp        float32 `protobuf:"fixed32,7,opt,name=pcb_temp,json=pcbTemp,proto3" json:"pcb_temp,omitempty"`
	Phase_1Current float32 `protobuf:"fixed32,8,opt,name=phase_1_current,json=phase1Current,proto3" json:"phase_1_current,omitempty"`
	Phase_2Current float32 `protobuf:"fixed32,9,opt,name=phase_2_current,json=phase2Current,proto3" json:"phase_2_current,omitempty"`
	ShuntCurrent   float32 `protobuf:"fixed32,10,opt,name=shunt_current,json=shuntCurrent,proto3" json:"shunt_current,omitempty"`
	VBus_24        float32 `protobuf:"fixed32,11,opt,name=v_bus_24,json=vBus24,proto3" json:"v_bus_24,omitempty"`
	CibOnline      bool    `protobuf:"varint,12,opt,name=cib_online,json=cibOnline,proto3" json:"cib_online,omitempty"`
}

func (x *StibSensors) Reset() {
	*x = StibSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibSensors) ProtoMessage() {}

func (x *StibSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibSensors.ProtoReflect.Descriptor instead.
func (*StibSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{13}
}

func (x *StibSensors) GetBusVoltage() float32 {
	if x != nil {
		return x.BusVoltage
	}
	return 0
}

func (x *StibSensors) GetStringVoltage() float32 {
	if x != nil {
		return x.StringVoltage
	}
	return 0
}

func (x *StibSensors) GetStringCurrent() float32 {
	if x != nil {
		return x.StringCurrent
	}
	return 0
}

func (x *StibSensors) GetPhase_1Temp() float32 {
	if x != nil {
		return x.Phase_1Temp
	}
	return 0
}

func (x *StibSensors) GetPhase_2Temp() float32 {
	if x != nil {
		return x.Phase_2Temp
	}
	return 0
}

func (x *StibSensors) GetShuntTemp() float32 {
	if x != nil {
		return x.ShuntTemp
	}
	return 0
}

func (x *StibSensors) GetPcbTemp() float32 {
	if x != nil {
		return x.PcbTemp
	}
	return 0
}

func (x *StibSensors) GetPhase_1Current() float32 {
	if x != nil {
		return x.Phase_1Current
	}
	return 0
}

func (x *StibSensors) GetPhase_2Current() float32 {
	if x != nil {
		return x.Phase_2Current
	}
	return 0
}

func (x *StibSensors) GetShuntCurrent() float32 {
	if x != nil {
		return x.ShuntCurrent
	}
	return 0
}

func (x *StibSensors) GetVBus_24() float32 {
	if x != nil {
		return x.VBus_24
	}
	return 0
}

func (x *StibSensors) GetCibOnline() bool {
	if x != nil {
		return x.CibOnline
	}
	return false
}

type CibSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringCurrent float32 `protobuf:"fixed32,1,opt,name=string_current,json=stringCurrent,proto3" json:"string_current,omitempty"`
	DieTemp       float32 `protobuf:"fixed32,2,opt,name=die_temp,json=dieTemp,proto3" json:"die_temp,omitempty"`
	VRef_2        float32 `protobuf:"fixed32,3,opt,name=v_ref_2,json=vRef2,proto3" json:"v_ref_2,omitempty"` // Vref2 3V internal reference voltage in LION chip
	VRail_5V      float32 `protobuf:"fixed32,4,opt,name=v_rail_5v,json=vRail5v,proto3" json:"v_rail_5v,omitempty"`
}

func (x *CibSensors) Reset() {
	*x = CibSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CibSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CibSensors) ProtoMessage() {}

func (x *CibSensors) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CibSensors.ProtoReflect.Descriptor instead.
func (*CibSensors) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{14}
}

func (x *CibSensors) GetStringCurrent() float32 {
	if x != nil {
		return x.StringCurrent
	}
	return 0
}

func (x *CibSensors) GetDieTemp() float32 {
	if x != nil {
		return x.DieTemp
	}
	return 0
}

func (x *CibSensors) GetVRef_2() float32 {
	if x != nil {
		return x.VRef_2
	}
	return 0
}

func (x *CibSensors) GetVRail_5V() float32 {
	if x != nil {
		return x.VRail_5V
	}
	return 0
}

type StibOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase_1Duty float32 `protobuf:"fixed32,1,opt,name=phase_1_duty,json=phase1Duty,proto3" json:"phase_1_duty,omitempty"`
	Phase_2Duty float32 `protobuf:"fixed32,2,opt,name=phase_2_duty,json=phase2Duty,proto3" json:"phase_2_duty,omitempty"`
}

func (x *StibOutputs) Reset() {
	*x = StibOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibOutputs) ProtoMessage() {}

func (x *StibOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibOutputs.ProtoReflect.Descriptor instead.
func (*StibOutputs) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{15}
}

func (x *StibOutputs) GetPhase_1Duty() float32 {
	if x != nil {
		return x.Phase_1Duty
	}
	return 0
}

func (x *StibOutputs) GetPhase_2Duty() float32 {
	if x != nil {
		return x.Phase_2Duty
	}
	return 0
}

type StibStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifetimeAh float32 `protobuf:"fixed32,1,opt,name=lifetime_ah,json=lifetimeAh,proto3" json:"lifetime_ah,omitempty"`
	LifetimeWh float32 `protobuf:"fixed32,2,opt,name=lifetime_wh,json=lifetimeWh,proto3" json:"lifetime_wh,omitempty"`
}

func (x *StibStatistics) Reset() {
	*x = StibStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibStatistics) ProtoMessage() {}

func (x *StibStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibStatistics.ProtoReflect.Descriptor instead.
func (*StibStatistics) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{16}
}

func (x *StibStatistics) GetLifetimeAh() float32 {
	if x != nil {
		return x.LifetimeAh
	}
	return 0
}

func (x *StibStatistics) GetLifetimeWh() float32 {
	if x != nil {
		return x.LifetimeWh
	}
	return 0
}

type StibInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DcdcState    StibDCDCState `protobuf:"varint,1,opt,name=dcdc_state,json=dcdcState,proto3,enum=StibDCDCState" json:"dcdc_state,omitempty"`
	FormState    StibFormState `protobuf:"varint,2,opt,name=form_state,json=formState,proto3,enum=StibFormState" json:"form_state,omitempty"`
	DcdcStateReq StibDCDCState `protobuf:"varint,3,opt,name=dcdc_state_req,json=dcdcStateReq,proto3,enum=StibDCDCState" json:"dcdc_state_req,omitempty"`
}

func (x *StibInternal) Reset() {
	*x = StibInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StibInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StibInternal) ProtoMessage() {}

func (x *StibInternal) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StibInternal.ProtoReflect.Descriptor instead.
func (*StibInternal) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{17}
}

func (x *StibInternal) GetDcdcState() StibDCDCState {
	if x != nil {
		return x.DcdcState
	}
	return StibDCDCState_STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED
}

func (x *StibInternal) GetFormState() StibFormState {
	if x != nil {
		return x.FormState
	}
	return StibFormState_STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED
}

func (x *StibInternal) GetDcdcStateReq() StibDCDCState {
	if x != nil {
		return x.DcdcStateReq
	}
	return StibDCDCState_STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED
}

type Stib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors       *StibSensors    `protobuf:"bytes,1,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Statistics    *StibStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Genealogy     *Genealogy      `protobuf:"bytes,3,opt,name=genealogy,proto3" json:"genealogy,omitempty"`
	Internal      *StibInternal   `protobuf:"bytes,4,opt,name=internal,proto3" json:"internal,omitempty"`
	AlertMatrices *AlertMatrix    `protobuf:"bytes,5,opt,name=alert_matrices,json=alertMatrices,proto3" json:"alert_matrices,omitempty"`
	CibSensors    *CibSensors     `protobuf:"bytes,6,opt,name=cib_sensors,json=cibSensors,proto3" json:"cib_sensors,omitempty"`
	Outputs       *StibOutputs    `protobuf:"bytes,7,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *Stib) Reset() {
	*x = Stib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stib) ProtoMessage() {}

func (x *Stib) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stib.ProtoReflect.Descriptor instead.
func (*Stib) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{18}
}

func (x *Stib) GetSensors() *StibSensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Stib) GetStatistics() *StibStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Stib) GetGenealogy() *Genealogy {
	if x != nil {
		return x.Genealogy
	}
	return nil
}

func (x *Stib) GetInternal() *StibInternal {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *Stib) GetAlertMatrices() *AlertMatrix {
	if x != nil {
		return x.AlertMatrices
	}
	return nil
}

func (x *Stib) GetCibSensors() *CibSensors {
	if x != nil {
		return x.CibSensors
	}
	return nil
}

func (x *Stib) GetOutputs() *StibOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type CellMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current             float32 `protobuf:"fixed32,1,opt,name=current,proto3" json:"current,omitempty"`
	Voltage             float32 `protobuf:"fixed32,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	ChargeAh            float32 `protobuf:"fixed32,3,opt,name=charge_ah,json=chargeAh,proto3" json:"charge_ah,omitempty"`
	EnergyWh            float32 `protobuf:"fixed32,4,opt,name=energy_wh,json=energyWh,proto3" json:"energy_wh,omitempty"`
	TemperatureEstimate float32 `protobuf:"fixed32,5,opt,name=temperature_estimate,json=temperatureEstimate,proto3" json:"temperature_estimate,omitempty"`
	PogoResistance      float32 `protobuf:"fixed32,6,opt,name=pogo_resistance,json=pogoResistance,proto3" json:"pogo_resistance,omitempty"`
}

func (x *CellMeasurement) Reset() {
	*x = CellMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMeasurement) ProtoMessage() {}

func (x *CellMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMeasurement.ProtoReflect.Descriptor instead.
func (*CellMeasurement) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{19}
}

func (x *CellMeasurement) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *CellMeasurement) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *CellMeasurement) GetChargeAh() float32 {
	if x != nil {
		return x.ChargeAh
	}
	return 0
}

func (x *CellMeasurement) GetEnergyWh() float32 {
	if x != nil {
		return x.EnergyWh
	}
	return 0
}

func (x *CellMeasurement) GetTemperatureEstimate() float32 {
	if x != nil {
		return x.TemperatureEstimate
	}
	return 0
}

func (x *CellMeasurement) GetPogoResistance() float32 {
	if x != nil {
		return x.PogoResistance
	}
	return 0
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellstatus      CellStatus       `protobuf:"varint,1,opt,name=cellstatus,proto3,enum=CellStatus" json:"cellstatus,omitempty"`
	Cellmeasurement *CellMeasurement `protobuf:"bytes,2,opt,name=cellmeasurement,proto3" json:"cellmeasurement,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{20}
}

func (x *Cell) GetCellstatus() CellStatus {
	if x != nil {
		return x.Cellstatus
	}
	return CellStatus_CELL_STATUS_NONE_UNSPECIFIED
}

func (x *Cell) GetCellmeasurement() *CellMeasurement {
	if x != nil {
		return x.Cellmeasurement
	}
	return nil
}

type FixtureOperational struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          FixtureStatus   `protobuf:"varint,1,opt,name=status,proto3,enum=FixtureStatus" json:"status,omitempty"`
	Position        FixturePosition `protobuf:"varint,2,opt,name=position,proto3,enum=FixturePosition" json:"position,omitempty"`
	Cells           []*Cell         `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
	StepExecuting   uint32          `protobuf:"varint,4,opt,name=step_executing,json=stepExecuting,proto3" json:"step_executing,omitempty"` // 1 based current process step index
	EquipmentStatus EquipmentStatus `protobuf:"varint,5,opt,name=equipment_status,json=equipmentStatus,proto3,enum=EquipmentStatus" json:"equipment_status,omitempty"`
	TrayPresent     bool            `protobuf:"varint,6,opt,name=tray_present,json=trayPresent,proto3" json:"tray_present,omitempty"` // tray is present (independent of fixture status)
	FireAlarmStatus FireAlarmStatus `protobuf:"varint,7,opt,name=fire_alarm_status,json=fireAlarmStatus,proto3,enum=FireAlarmStatus" json:"fire_alarm_status,omitempty"`
}

func (x *FixtureOperational) Reset() {
	*x = FixtureOperational{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureOperational) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureOperational) ProtoMessage() {}

func (x *FixtureOperational) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureOperational.ProtoReflect.Descriptor instead.
func (*FixtureOperational) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{21}
}

func (x *FixtureOperational) GetStatus() FixtureStatus {
	if x != nil {
		return x.Status
	}
	return FixtureStatus_FIXTURE_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *FixtureOperational) GetPosition() FixturePosition {
	if x != nil {
		return x.Position
	}
	return FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED
}

func (x *FixtureOperational) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *FixtureOperational) GetStepExecuting() uint32 {
	if x != nil {
		return x.StepExecuting
	}
	return 0
}

func (x *FixtureOperational) GetEquipmentStatus() EquipmentStatus {
	if x != nil {
		return x.EquipmentStatus
	}
	return EquipmentStatus_EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED
}

func (x *FixtureOperational) GetTrayPresent() bool {
	if x != nil {
		return x.TrayPresent
	}
	return false
}

func (x *FixtureOperational) GetFireAlarmStatus() FireAlarmStatus {
	if x != nil {
		return x.FireAlarmStatus
	}
	return FireAlarmStatus_FIRE_ALARM_UNKNOWN_UNSPECIFIED
}

type FixtureDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fxr                        *Fxr    `protobuf:"bytes,1,opt,name=fxr,proto3" json:"fxr,omitempty"`
	Fib                        *Fib    `protobuf:"bytes,2,opt,name=fib,proto3" json:"fib,omitempty"`
	Stibs                      []*Stib `protobuf:"bytes,3,rep,name=stibs,proto3" json:"stibs,omitempty"` // 4 stibs
	IsotpRxCompleteMsgReceived uint32  `protobuf:"varint,5,opt,name=isotp_rx_complete_msg_received,json=isotpRxCompleteMsgReceived,proto3" json:"isotp_rx_complete_msg_received,omitempty"`
}

func (x *FixtureDiagnostic) Reset() {
	*x = FixtureDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureDiagnostic) ProtoMessage() {}

func (x *FixtureDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureDiagnostic.ProtoReflect.Descriptor instead.
func (*FixtureDiagnostic) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{22}
}

func (x *FixtureDiagnostic) GetFxr() *Fxr {
	if x != nil {
		return x.Fxr
	}
	return nil
}

func (x *FixtureDiagnostic) GetFib() *Fib {
	if x != nil {
		return x.Fib
	}
	return nil
}

func (x *FixtureDiagnostic) GetStibs() []*Stib {
	if x != nil {
		return x.Stibs
	}
	return nil
}

func (x *FixtureDiagnostic) GetIsotpRxCompleteMsgReceived() uint32 {
	if x != nil {
		return x.IsotpRxCompleteMsgReceived
	}
	return 0
}

type FixtureToTower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*FixtureToTower_Op
	//	*FixtureToTower_Diag
	//	*FixtureToTower_AlertLog
	Content        isFixtureToTower_Content `protobuf_oneof:"content"`
	Traybarcode    string                   `protobuf:"bytes,3,opt,name=traybarcode,proto3" json:"traybarcode,omitempty"`
	Fixturebarcode string                   `protobuf:"bytes,4,opt,name=fixturebarcode,proto3" json:"fixturebarcode,omitempty"`
	ProcessStep    string                   `protobuf:"bytes,5,opt,name=process_step,json=processStep,proto3" json:"process_step,omitempty"`
	TransactionId  string                   `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *FixtureToTower) Reset() {
	*x = FixtureToTower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtureToTower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtureToTower) ProtoMessage() {}

func (x *FixtureToTower) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtureToTower.ProtoReflect.Descriptor instead.
func (*FixtureToTower) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{23}
}

func (m *FixtureToTower) GetContent() isFixtureToTower_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *FixtureToTower) GetOp() *FixtureOperational {
	if x, ok := x.GetContent().(*FixtureToTower_Op); ok {
		return x.Op
	}
	return nil
}

func (x *FixtureToTower) GetDiag() *FixtureDiagnostic {
	if x, ok := x.GetContent().(*FixtureToTower_Diag); ok {
		return x.Diag
	}
	return nil
}

func (x *FixtureToTower) GetAlertLog() *AlertLog {
	if x, ok := x.GetContent().(*FixtureToTower_AlertLog); ok {
		return x.AlertLog
	}
	return nil
}

func (x *FixtureToTower) GetTraybarcode() string {
	if x != nil {
		return x.Traybarcode
	}
	return ""
}

func (x *FixtureToTower) GetFixturebarcode() string {
	if x != nil {
		return x.Fixturebarcode
	}
	return ""
}

func (x *FixtureToTower) GetProcessStep() string {
	if x != nil {
		return x.ProcessStep
	}
	return ""
}

func (x *FixtureToTower) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type isFixtureToTower_Content interface {
	isFixtureToTower_Content()
}

type FixtureToTower_Op struct {
	Op *FixtureOperational `protobuf:"bytes,1,opt,name=op,proto3,oneof"`
}

type FixtureToTower_Diag struct {
	Diag *FixtureDiagnostic `protobuf:"bytes,2,opt,name=diag,proto3,oneof"`
}

type FixtureToTower_AlertLog struct {
	AlertLog *AlertLog `protobuf:"bytes,7,opt,name=alert_log,json=alertLog,proto3,oneof"`
}

func (*FixtureToTower_Op) isFixtureToTower_Content() {}

func (*FixtureToTower_Diag) isFixtureToTower_Content() {}

func (*FixtureToTower_AlertLog) isFixtureToTower_Content() {}

type RecipeStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode            RecipeStep_FormMode    `protobuf:"varint,1,opt,name=mode,proto3,enum=RecipeStep_FormMode" json:"mode,omitempty"`
	ChargeCurrent   float32                `protobuf:"fixed32,2,opt,name=charge_current,json=chargeCurrent,proto3" json:"charge_current,omitempty"`
	MaxCurrent      float32                `protobuf:"fixed32,3,opt,name=max_current,json=maxCurrent,proto3" json:"max_current,omitempty"`
	CutoffVoltage   float32                `protobuf:"fixed32,4,opt,name=cutoff_voltage,json=cutoffVoltage,proto3" json:"cutoff_voltage,omitempty"`
	CutoffCurrent   float32                `protobuf:"fixed32,5,opt,name=cutoff_current,json=cutoffCurrent,proto3" json:"cutoff_current,omitempty"`
	CutoffDv        float32                `protobuf:"fixed32,6,opt,name=cutoff_dv,json=cutoffDv,proto3" json:"cutoff_dv,omitempty"`
	StepTimeout     float32                `protobuf:"fixed32,7,opt,name=step_timeout,json=stepTimeout,proto3" json:"step_timeout,omitempty"`
	ChargePower     float32                `protobuf:"fixed32,8,opt,name=charge_power,json=chargePower,proto3" json:"charge_power,omitempty"`
	CutoffAh        float32                `protobuf:"fixed32,9,opt,name=cutoff_ah,json=cutoffAh,proto3" json:"cutoff_ah,omitempty"`
	EndingStyle     RecipeStep_EndingStyle `protobuf:"varint,10,opt,name=ending_style,json=endingStyle,proto3,enum=RecipeStep_EndingStyle" json:"ending_style,omitempty"`
	VCellMinQuality float32                `protobuf:"fixed32,11,opt,name=v_cell_min_quality,json=vCellMinQuality,proto3" json:"v_cell_min_quality,omitempty"`
	VCellMaxQuality float32                `protobuf:"fixed32,12,opt,name=v_cell_max_quality,json=vCellMaxQuality,proto3" json:"v_cell_max_quality,omitempty"`
}

func (x *RecipeStep) Reset() {
	*x = RecipeStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStep) ProtoMessage() {}

func (x *RecipeStep) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStep.ProtoReflect.Descriptor instead.
func (*RecipeStep) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{24}
}

func (x *RecipeStep) GetMode() RecipeStep_FormMode {
	if x != nil {
		return x.Mode
	}
	return RecipeStep_FORM_MODE_UNKNOWN_UNSPECIFIED
}

func (x *RecipeStep) GetChargeCurrent() float32 {
	if x != nil {
		return x.ChargeCurrent
	}
	return 0
}

func (x *RecipeStep) GetMaxCurrent() float32 {
	if x != nil {
		return x.MaxCurrent
	}
	return 0
}

func (x *RecipeStep) GetCutoffVoltage() float32 {
	if x != nil {
		return x.CutoffVoltage
	}
	return 0
}

func (x *RecipeStep) GetCutoffCurrent() float32 {
	if x != nil {
		return x.CutoffCurrent
	}
	return 0
}

func (x *RecipeStep) GetCutoffDv() float32 {
	if x != nil {
		return x.CutoffDv
	}
	return 0
}

func (x *RecipeStep) GetStepTimeout() float32 {
	if x != nil {
		return x.StepTimeout
	}
	return 0
}

func (x *RecipeStep) GetChargePower() float32 {
	if x != nil {
		return x.ChargePower
	}
	return 0
}

func (x *RecipeStep) GetCutoffAh() float32 {
	if x != nil {
		return x.CutoffAh
	}
	return 0
}

func (x *RecipeStep) GetEndingStyle() RecipeStep_EndingStyle {
	if x != nil {
		return x.EndingStyle
	}
	return RecipeStep_ENDING_STYLE_UNKNOWN_UNSPECIFIED
}

func (x *RecipeStep) GetVCellMinQuality() float32 {
	if x != nil {
		return x.VCellMinQuality
	}
	return 0
}

func (x *RecipeStep) GetVCellMaxQuality() float32 {
	if x != nil {
		return x.VCellMaxQuality
	}
	return 0
}

type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps       []*RecipeStep `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	CellMasks   []uint32      `protobuf:"varint,2,rep,packed,name=cell_masks,json=cellMasks,proto3" json:"cell_masks,omitempty"`
	Formrequest FormRequest   `protobuf:"varint,3,opt,name=formrequest,proto3,enum=FormRequest" json:"formrequest,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{25}
}

func (x *Recipe) GetSteps() []*RecipeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Recipe) GetCellMasks() []uint32 {
	if x != nil {
		return x.CellMasks
	}
	return nil
}

func (x *Recipe) GetFormrequest() FormRequest {
	if x != nil {
		return x.Formrequest
	}
	return FormRequest_FORM_REQUEST_UNKNOWN_UNSPECIFIED
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traybarcode    string `protobuf:"bytes,1,opt,name=traybarcode,proto3" json:"traybarcode,omitempty"`
	Fixturebarcode string `protobuf:"bytes,2,opt,name=fixturebarcode,proto3" json:"fixturebarcode,omitempty"`
	ProcessStep    string `protobuf:"bytes,3,opt,name=process_step,json=processStep,proto3" json:"process_step,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{26}
}

func (x *SystemInfo) GetTraybarcode() string {
	if x != nil {
		return x.Traybarcode
	}
	return ""
}

func (x *SystemInfo) GetFixturebarcode() string {
	if x != nil {
		return x.Fixturebarcode
	}
	return ""
}

func (x *SystemInfo) GetProcessStep() string {
	if x != nil {
		return x.ProcessStep
	}
	return ""
}

type TowerToFixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipe           *Recipe          `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	Sysinfo          *SystemInfo      `protobuf:"bytes,2,opt,name=sysinfo,proto3" json:"sysinfo,omitempty"`
	TransactionId    string           `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	EquipmentRequest EquipmentRequest `protobuf:"varint,4,opt,name=equipment_request,json=equipmentRequest,proto3,enum=EquipmentRequest" json:"equipment_request,omitempty"`
}

func (x *TowerToFixture) Reset() {
	*x = TowerToFixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tower_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerToFixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerToFixture) ProtoMessage() {}

func (x *TowerToFixture) ProtoReflect() protoreflect.Message {
	mi := &file_tower_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerToFixture.ProtoReflect.Descriptor instead.
func (*TowerToFixture) Descriptor() ([]byte, []int) {
	return file_tower_proto_rawDescGZIP(), []int{27}
}

func (x *TowerToFixture) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *TowerToFixture) GetSysinfo() *SystemInfo {
	if x != nil {
		return x.Sysinfo
	}
	return nil
}

func (x *TowerToFixture) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TowerToFixture) GetEquipmentRequest() EquipmentRequest {
	if x != nil {
		return x.EquipmentRequest
	}
	return EquipmentRequest_EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED
}

var File_tower_proto protoreflect.FileDescriptor

var file_tower_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x09,
	0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x50, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x63, 0x62, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x63, 0x62, 0x61, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x75, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x69, 0x74, 0x68, 0x61, 0x73, 0x68, 0x22, 0x97, 0x05,
	0x0a, 0x0a, 0x46, 0x78, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x08,
	0x76, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x68, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x76, 0x42, 0x75, 0x73, 0x48, 0x76, 0x12, 0x18, 0x0a, 0x08, 0x76, 0x5f, 0x62, 0x75, 0x73, 0x5f,
	0x32, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x42, 0x75, 0x73, 0x32, 0x34,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x76, 0x5f, 0x72, 0x61, 0x69,
	0x6c, 0x5f, 0x35, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x52, 0x61, 0x69,
	0x6c, 0x35, 0x76, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76,
	0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x52, 0x61, 0x69, 0x6c, 0x33, 0x76,
	0x33, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x74, 0x69, 0x62, 0x46, 0x69, 0x62, 0x45, 0x66, 0x75, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x5f, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x45, 0x66,
	0x75, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x69, 0x5f, 0x66, 0x61,
	0x6e, 0x5f, 0x32, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x46, 0x61, 0x6e,
	0x32, 0x34, 0x12, 0x21, 0x0a, 0x0d, 0x69, 0x5f, 0x73, 0x74, 0x69, 0x62, 0x5f, 0x66, 0x69, 0x62,
	0x5f, 0x32, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x53, 0x74, 0x69, 0x62,
	0x46, 0x69, 0x62, 0x32, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x5f, 0x73, 0x6f, 0x6c, 0x65, 0x6e,
	0x6f, 0x69, 0x64, 0x5f, 0x32, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x76, 0x53,
	0x6f, 0x6c, 0x65, 0x6e, 0x6f, 0x69, 0x64, 0x32, 0x34, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x70,
	0x69, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x46, 0x78, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x31, 0x6b, 0x68, 0x7a, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x31,
	0x30, 0x68, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x31, 0x30, 0x68, 0x7a, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x76, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x76, 0x72, 0x61, 0x6d, 0x22, 0xb5, 0x01,
	0x0a, 0x0a, 0x46, 0x78, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x62, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x74, 0x69, 0x62,
	0x5f, 0x66, 0x69, 0x62, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x62, 0x46, 0x69, 0x62, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x61, 0x6e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x09, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x49, 0x73, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x69, 0x73, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69,
	0x73, 0x6f, 0x5f, 0x76, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x77, 0x5f, 0x6f,
	0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x69, 0x73, 0x6f, 0x56, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x53, 0x77, 0x4f, 0x66, 0x66, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73,
	0x6f, 0x5f, 0x76, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x77, 0x5f, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x69, 0x73, 0x6f, 0x56, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x53, 0x77, 0x4f, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x5f, 0x76,
	0x62, 0x75, 0x73, 0x5f, 0x73, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x69, 0x73, 0x6f, 0x56, 0x62, 0x75, 0x73, 0x53, 0x77, 0x4f, 0x66, 0x66, 0x12, 0x23,
	0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x5f, 0x76, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x77, 0x5f, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x73, 0x6f, 0x56, 0x62, 0x75, 0x73, 0x53,
	0x77, 0x4f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x69, 0x73, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f,
	0x77, 0x12, 0x26, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x49, 0x73, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x08, 0x69, 0x73, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6e, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xda, 0x02, 0x0a, 0x03, 0x46, 0x78, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x78, 0x72, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x46, 0x78, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x78, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x09,
	0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x33, 0x0a, 0x0e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52,
	0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x09, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x69,
	0x5f, 0x62, 0x75, 0x73, 0x5f, 0x32, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69,
	0x42, 0x75, 0x73, 0x32, 0x34, 0x12, 0x18, 0x0a, 0x08, 0x76, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x32,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x42, 0x75, 0x73, 0x32, 0x34, 0x12,
	0x18, 0x0a, 0x08, 0x70, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x32, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x70, 0x42, 0x75, 0x73, 0x32, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x63, 0x62,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x63, 0x62,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x09, 0x76, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x35,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x76,
	0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x33, 0x76, 0x33, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x52, 0x61, 0x69, 0x6c, 0x33, 0x76, 0x33, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x22, 0xce, 0x03, 0x0a, 0x0b, 0x46, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x73, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x73, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x73, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x70,
	0x75, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x73, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x6b, 0x68, 0x7a, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x54,
	0x69, 0x6d, 0x65, 0x31, 0x6b, 0x68, 0x7a, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70,
	0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x30, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x31, 0x30, 0x68, 0x7a, 0x12, 0x2b,
	0x0a, 0x12, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x30, 0x6b, 0x68, 0x7a,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x54,
	0x69, 0x6d, 0x65, 0x31, 0x30, 0x6b, 0x68, 0x7a, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6b, 0x68, 0x7a, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x6b, 0x68, 0x7a, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x31, 0x30, 0x68, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x31, 0x30, 0x68, 0x7a, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x76, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x76, 0x72, 0x61,
	0x6d, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x64, 0x75, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x75, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x5f, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x46, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x61, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x03, 0x46, 0x69, 0x62, 0x12, 0x25, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x46, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x04, 0x66, 0x61, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46, 0x61, 0x6e, 0x52, 0x04, 0x66, 0x61,
	0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x69, 0x62,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x31, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x32, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x73, 0x68, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x63, 0x62,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x63, 0x62,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x31, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x68, 0x75,
	0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x08, 0x76, 0x5f, 0x62,
	0x75, 0x73, 0x5f, 0x32, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x42, 0x75,
	0x73, 0x32, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x62, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x69, 0x62, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x69, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x07, 0x76, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x52, 0x65, 0x66, 0x32, 0x12, 0x1a, 0x0a, 0x09, 0x76,
	0x5f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x35, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x76, 0x52, 0x61, 0x69, 0x6c, 0x35, 0x76, 0x22, 0x51, 0x0a, 0x0b, 0x53, 0x74, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x31, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x31, 0x44, 0x75, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x32, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x44, 0x75, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x0e, 0x53, 0x74,
	0x69, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x68, 0x22, 0xa2,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x2d, 0x0a, 0x0a, 0x64, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x44, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x63, 0x64, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x0e, 0x64, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x44, 0x43, 0x44, 0x43,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x63, 0x64, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x22, 0xbf, 0x02, 0x0a, 0x04, 0x53, 0x74, 0x69, 0x62, 0x12, 0x26, 0x0a, 0x07,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x53, 0x74, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f,
	0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x61,
	0x6c, 0x6f, 0x67, 0x79, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x12,
	0x29, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x0e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x0b, 0x63, 0x69, 0x62, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x52, 0x0a, 0x63, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x53, 0x74, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x77, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x67, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x6f, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x03, 0x66, 0x78, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x46, 0x78, 0x72, 0x52, 0x03, 0x66, 0x78,
	0x72, 0x12, 0x16, 0x0a, 0x03, 0x66, 0x69, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04,
	0x2e, 0x46, 0x69, 0x62, 0x52, 0x03, 0x66, 0x69, 0x62, 0x12, 0x1b, 0x0a, 0x05, 0x73, 0x74, 0x69,
	0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x53, 0x74, 0x69, 0x62, 0x52,
	0x05, 0x73, 0x74, 0x69, 0x62, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x73, 0x6f, 0x74, 0x70, 0x5f,
	0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x69, 0x73, 0x6f, 0x74, 0x70, 0x52, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x46,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x79,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x65, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x06, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x5f, 0x64, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x44, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x74,
	0x6f, 0x66, 0x66, 0x5f, 0x61, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x41, 0x68, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x76, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x76, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x12, 0x76, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x76, 0x43, 0x65,
	0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x91, 0x01, 0x0a,
	0x08, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x43, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x56, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x50, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x43, 0x52, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x10, 0x05,
	0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x59, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x48, 0x10, 0x03,
	0x22, 0x7a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x6d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x0a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x79, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x65, 0x70, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x73,
	0x79, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x79, 0x73, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x87, 0x01, 0x0a, 0x08, 0x49, 0x73,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x53, 0x57, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x57, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x10, 0x04, 0x2a, 0xbb, 0x02, 0x0a, 0x08, 0x49, 0x73, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x55, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x54, 0x4f,
	0x5f, 0x47, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52,
	0x41, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x53, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x2a, 0x6e, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xd1, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x69, 0x62, 0x44, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x44, 0x43, 0x44, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x4c,
	0x4f, 0x53, 0x48, 0x10, 0x09, 0x2a, 0xef, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x69, 0x62, 0x46, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x56, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x43, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x56, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x43, 0x52, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45,
	0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x57, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x2a, 0xb7, 0x01, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10,
	0x05, 0x2a, 0xf4, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x58, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x2a, 0xb4, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24,
	0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x2a,
	0xd5, 0x01, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x65, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x65, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x02, 0x2a, 0xd0,
	0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x20, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10,
	0x06, 0x2a, 0xb1, 0x01, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x42, 0x07, 0x5a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tower_proto_rawDescOnce sync.Once
	file_tower_proto_rawDescData = file_tower_proto_rawDesc
)

func file_tower_proto_rawDescGZIP() []byte {
	file_tower_proto_rawDescOnce.Do(func() {
		file_tower_proto_rawDescData = protoimpl.X.CompressGZIP(file_tower_proto_rawDescData)
	})
	return file_tower_proto_rawDescData
}

var file_tower_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_tower_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_tower_proto_goTypes = []interface{}{
	(IsoState)(0),               // 0: IsoState
	(IsoError)(0),               // 1: IsoError
	(FanStatus)(0),              // 2: FanStatus
	(StibDCDCState)(0),          // 3: StibDCDCState
	(StibFormState)(0),          // 4: StibFormState
	(CellStatus)(0),             // 5: CellStatus
	(FixtureStatus)(0),          // 6: FixtureStatus
	(FixturePosition)(0),        // 7: FixturePosition
	(EquipmentStatus)(0),        // 8: EquipmentStatus
	(FireAlarmStatus)(0),        // 9: FireAlarmStatus
	(FormRequest)(0),            // 10: FormRequest
	(EquipmentRequest)(0),       // 11: EquipmentRequest
	(RecipeStep_FormMode)(0),    // 12: RecipeStep.FormMode
	(RecipeStep_EndingStyle)(0), // 13: RecipeStep.EndingStyle
	(*Genealogy)(nil),           // 14: Genealogy
	(*FxrSensors)(nil),          // 15: FxrSensors
	(*FxrInternal)(nil),         // 16: FxrInternal
	(*FxrOutputs)(nil),          // 17: FxrOutputs
	(*Isolation)(nil),           // 18: Isolation
	(*Position)(nil),            // 19: Position
	(*Filesystem)(nil),          // 20: Filesystem
	(*Fxr)(nil),                 // 21: Fxr
	(*FibSensors)(nil),          // 22: FibSensors
	(*FibInternal)(nil),         // 23: FibInternal
	(*FanMeasurements)(nil),     // 24: FanMeasurements
	(*Fan)(nil),                 // 25: Fan
	(*Fib)(nil),                 // 26: Fib
	(*StibSensors)(nil),         // 27: StibSensors
	(*CibSensors)(nil),          // 28: CibSensors
	(*StibOutputs)(nil),         // 29: StibOutputs
	(*StibStatistics)(nil),      // 30: StibStatistics
	(*StibInternal)(nil),        // 31: StibInternal
	(*Stib)(nil),                // 32: Stib
	(*CellMeasurement)(nil),     // 33: CellMeasurement
	(*Cell)(nil),                // 34: Cell
	(*FixtureOperational)(nil),  // 35: FixtureOperational
	(*FixtureDiagnostic)(nil),   // 36: FixtureDiagnostic
	(*FixtureToTower)(nil),      // 37: FixtureToTower
	(*RecipeStep)(nil),          // 38: RecipeStep
	(*Recipe)(nil),              // 39: Recipe
	(*SystemInfo)(nil),          // 40: SystemInfo
	(*TowerToFixture)(nil),      // 41: TowerToFixture
	(*AlertMatrix)(nil),         // 42: AlertMatrix
	(*AlertLog)(nil),            // 43: AlertLog
}
var file_tower_proto_depIdxs = []int32{
	0,  // 0: Isolation.iso_state:type_name -> IsoState
	1,  // 1: Isolation.iso_error:type_name -> IsoError
	15, // 2: Fxr.sensors:type_name -> FxrSensors
	16, // 3: Fxr.internal:type_name -> FxrInternal
	17, // 4: Fxr.outputs:type_name -> FxrOutputs
	14, // 5: Fxr.genealogy:type_name -> Genealogy
	42, // 6: Fxr.alert_matrices:type_name -> AlertMatrix
	18, // 7: Fxr.isolation:type_name -> Isolation
	20, // 8: Fxr.filesystem:type_name -> Filesystem
	19, // 9: Fxr.position:type_name -> Position
	2,  // 10: Fan.status:type_name -> FanStatus
	24, // 11: Fan.measurements:type_name -> FanMeasurements
	22, // 12: Fib.sensors:type_name -> FibSensors
	23, // 13: Fib.internal:type_name -> FibInternal
	14, // 14: Fib.genealogy:type_name -> Genealogy
	25, // 15: Fib.fans:type_name -> Fan
	42, // 16: Fib.alert_matrices:type_name -> AlertMatrix
	3,  // 17: StibInternal.dcdc_state:type_name -> StibDCDCState
	4,  // 18: StibInternal.form_state:type_name -> StibFormState
	3,  // 19: StibInternal.dcdc_state_req:type_name -> StibDCDCState
	27, // 20: Stib.sensors:type_name -> StibSensors
	30, // 21: Stib.statistics:type_name -> StibStatistics
	14, // 22: Stib.genealogy:type_name -> Genealogy
	31, // 23: Stib.internal:type_name -> StibInternal
	42, // 24: Stib.alert_matrices:type_name -> AlertMatrix
	28, // 25: Stib.cib_sensors:type_name -> CibSensors
	29, // 26: Stib.outputs:type_name -> StibOutputs
	5,  // 27: Cell.cellstatus:type_name -> CellStatus
	33, // 28: Cell.cellmeasurement:type_name -> CellMeasurement
	6,  // 29: FixtureOperational.status:type_name -> FixtureStatus
	7,  // 30: FixtureOperational.position:type_name -> FixturePosition
	34, // 31: FixtureOperational.cells:type_name -> Cell
	8,  // 32: FixtureOperational.equipment_status:type_name -> EquipmentStatus
	9,  // 33: FixtureOperational.fire_alarm_status:type_name -> FireAlarmStatus
	21, // 34: FixtureDiagnostic.fxr:type_name -> Fxr
	26, // 35: FixtureDiagnostic.fib:type_name -> Fib
	32, // 36: FixtureDiagnostic.stibs:type_name -> Stib
	35, // 37: FixtureToTower.op:type_name -> FixtureOperational
	36, // 38: FixtureToTower.diag:type_name -> FixtureDiagnostic
	43, // 39: FixtureToTower.alert_log:type_name -> AlertLog
	12, // 40: RecipeStep.mode:type_name -> RecipeStep.FormMode
	13, // 41: RecipeStep.ending_style:type_name -> RecipeStep.EndingStyle
	38, // 42: Recipe.steps:type_name -> RecipeStep
	10, // 43: Recipe.formrequest:type_name -> FormRequest
	39, // 44: TowerToFixture.recipe:type_name -> Recipe
	40, // 45: TowerToFixture.sysinfo:type_name -> SystemInfo
	11, // 46: TowerToFixture.equipment_request:type_name -> EquipmentRequest
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_tower_proto_init() }
func file_tower_proto_init() {
	if File_tower_proto != nil {
		return
	}
	file_alerts_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tower_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Genealogy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FxrOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Isolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fxr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanMeasurements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CibSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StibInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureOperational); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixtureToTower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tower_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerToFixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tower_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*FixtureToTower_Op)(nil),
		(*FixtureToTower_Diag)(nil),
		(*FixtureToTower_AlertLog)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tower_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tower_proto_goTypes,
		DependencyIndexes: file_tower_proto_depIdxs,
		EnumInfos:         file_tower_proto_enumTypes,
		MessageInfos:      file_tower_proto_msgTypes,
	}.Build()
	File_tower_proto = out.File
	file_tower_proto_rawDesc = nil
	file_tower_proto_goTypes = nil
	file_tower_proto_depIdxs = nil
}
