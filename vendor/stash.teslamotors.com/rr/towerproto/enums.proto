syntax            = "proto3";
option go_package = ".;tower";

// FXR

enum FixtureControlSmState {
  FXR_ST_INIT_UNSPECIFIED = 0;
  FXR_ST_WAIT_READY       = 1;
  FXR_ST_WAIT_TRAY        = 2;
  FXR_ST_WAIT_RECIPE      = 3;
  FXR_ST_CLOSE            = 4;
  FXR_ST_TX_STEP          = 5;
  FXR_ST_START_STEP       = 6;
  FXR_ST_EXECUTING        = 7;
  FXR_ST_STEP_COMPLETE    = 8;
  FXR_ST_SEQ_COMPLETE     = 9;
  FXR_ST_SEQ_INTERRUPTED  = 10;
  FXR_ST_FAULTED          = 11;
}

enum FixtureStatus {
  FIXTURE_STATUS_UNKNOWN_UNSPECIFIED = 0;
  FIXTURE_STATUS_INIT                = 1; // Fixture is not ready for a tray yet
  FIXTURE_STATUS_IDLE                = 2; // Fixture is ready for a tray
  FIXTURE_STATUS_READY               = 3; // Fixture has a tray and is ready to receive a recipe
  FIXTURE_STATUS_ACTIVE              = 4; // Fixture is running a formation cycle on the tray
  FIXTURE_STATUS_FAULTED             = 5; // Fixture is faulted
  FIXTURE_STATUS_COMPLETE            = 6; // Fixture is done with the formation cycle, tray is still present
  FIXTURE_STATUS_UPDATING            = 7; // Fixture is updating firmware - not used
}

enum FixturePositionSmState {
  FIXTURE_POSITION_ST_INIT_UNSPECIFIED = 0;
  FIXTURE_POSITION_ST_OPEN             = 1;
  FIXTURE_POSITION_ST_CLOSING          = 2;
  FIXTURE_POSITION_ST_CLOSED           = 3;
  FIXTURE_POSITION_ST_OPENING          = 4;
  FIXTURE_POSITION_ST_FAULTED          = 5;
}

enum FixturePosition {
  FIXTURE_POSITION_UNKNOWN_UNSPECIFIED = 0;
  FIXTURE_POSITION_CLOSED              = 1;
  FIXTURE_POSITION_OPEN                = 2;
  FIXTURE_POSITION_INTERMEDIATE        = 3;
  FIXTURE_POSITION_INVALID             = 4;
}

enum EquipmentRequest {
  EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED = 0;
  EQUIPMENT_REQUEST_SELF_TEST_APPROVED  = 1; // operator has reviewed self test data, put fixture into production
  EQUIPMENT_REQUEST_MAINTENANCE         = 2; // put fixture in maintenance mode
  EQUIPMENT_REQUEST_RECOMMISSIONING     = 3; // reset fixture hardware status to require commissioning
}

enum EquipmentStatus {
  EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED = 0;
  EQUIPMENT_STATUS_NEEDS_COMMISSIONING = 1; // initial value or when commanded to recommission
  EQUIPMENT_STATUS_NEEDS_MAINTENANCE   = 2; // When self test fails or when set by TC
  EQUIPMENT_STATUS_NEEDS_APPROVAL      = 3; // When self test cycle has run , waiting for approval from operator
  EQUIPMENT_STATUS_IN_OPERATION        = 4; // When operator approves self test cycle, ready for production
}

enum FireAlarmStatus {
  FIRE_ALARM_UNKNOWN_UNSPECIFIED = 0; // No heat spots detected by the fixture
  FIRE_ALARM_LEVEL_0             = 1; // Two or more sensors detecting higher temperatures
  FIRE_ALARM_LEVEL_1             = 2; // Two or more sensors detecting very high temperatures
}

enum FormRequest {
  FORM_REQUEST_UNKNOWN_UNSPECIFIED = 0;
  FORM_REQUEST_STOP                = 1;
  FORM_REQUEST_START               = 2;
  FORM_REQUEST_UPDATE_CELLS        = 3;
  FORM_REQUEST_FAULT_RESET         = 4;
  FORM_REQUEST_PAUSE               = 5;
  FORM_REQUEST_RESUME              = 6;
}

enum IsolationTestRequest {
  ISOLATION_TEST_REQUEST_UNKNOWN_UNSPECIFIED = 0;
  ISOLATION_TEST_REQUEST_ENABLE              = 1; // trigger to enable isolation resistance measurement in a fixture
  ISOLATION_TEST_REQUEST_DISABLE             = 2; // disable active isolation resistance measurement in fixture
}

enum IsolationTestStatus {
  ISOLATION_TEST_STATUS_UNKNOWN_UNSPECIFIED = 0;
  ISOLATION_TEST_STATUS_ACTIVE              = 1; // isolation resistance measurement active in  fixture
  ISOLATION_TEST_STATUS_INACTIVE            = 2; // isolation resistance measurement inactive in  fixture
  ISOLATION_TEST_STATUS_FAULTED = 3; // isolation resistance measurement faulted - maintenance to be triggered
}

enum IsoState {
  ISO_STATE_UNKNOWN_UNSPECIFIED = 0;
  ISO_STATE_INIT                = 1;
  ISO_STATE_CLOSE_SW            = 2;
  ISO_STATE_OPEN_SW             = 3;
  ISO_STATE_COMPUTE             = 4;
}

enum IsoError {
  ISO_ERROR_UNKNOWN_UNSPECIFIED            = 0;
  ISO_ERROR_BUS_OUT_OF_SPEC                = 1;
  ISO_ERROR_CHASSIS_TO_BUS_SHORTED         = 2;
  ISO_ERROR_CHASSIS_TO_GND_SHORTED         = 3;
  ISO_ERROR_CHASSIS_NOT_CONNECTED          = 4;
  ISO_ERROR_RESISTANCE_DEGRADATION_WARNING = 5;
  ISO_ERROR_RESISTANCE_TOO_LOW_FAULT       = 6;
  ISO_ERROR_RESISTANCE_NOT_AVAILABLE       = 7;
}

enum EnumerationStatus {
  ENUM_STATUS_UNKNOWN_UNSPECIFIED = 0;
  ENUM_STATUS_OK                  = 1; // ENUM is OK
  ENUM_STATUS_COLLISION           = 2; // TAUX is resolving enum collision
  ENUM_STATUS_FAULT               = 3; // Enum is in faulted state
}

enum TrayOrientation {
  ORIENTATION_UNKNOWN_UNSPECIFIED = 0;
  ORIENTATION_A                   = 1;
  ORIENTATION_B                   = 2;
  ORIENTATION_C                   = 3;
  ORIENTATION_D                   = 4; 
}

// STIB
enum StibDCDCState {
  STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED = 0;
  STIB_DCDC_STATE_WAIT                     = 1;
  STIB_DCDC_STATE_STANDBY                  = 2;
  STIB_DCDC_STATE_OPEN_LOOP                = 3;
  STIB_DCDC_STATE_VOLTAGE_MATCHING         = 4;
  STIB_DCDC_STATE_CLOSED_LOOP              = 5;
  STIB_DCDC_STATE_PRECHARGE                = 6;
  STIB_DCDC_STATE_AUTO_ZERO                = 7;
  STIB_DCDC_STATE_FAULT                    = 8;
  STIB_DCDC_INTERNAL_SLOSH                 = 9;
}

enum StibFormState {
  STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED = 0;
  STIB_FORM_STATE_IDLE                     = 1;
  STIB_FORM_STATE_VMATCH                   = 2;
  STIB_FORM_STATE_CC                       = 3;
  STIB_FORM_STATE_CV                       = 4;
  STIB_FORM_STATE_CP                       = 5;
  STIB_FORM_STATE_DCR_PULSE                = 6;
  STIB_FORM_STATE_FINISHED                 = 7;
  STIB_FORM_STATE_DIRECT_CONTROL           = 8;
  STIB_FORM_STATE_DELAY                    = 9;
  STIB_FORM_STATE_CELL_SW                  = 10;
  STIB_FORM_STATE_FAULT                    = 11;
}

enum CellStatus {
  CELL_STATUS_NONE_UNSPECIFIED           = 0;
  CELL_STATUS_IDLE                       = 1;
  CELL_STATUS_IN_PROCESS                 = 2;
  CELL_STATUS_COMPLETE                   = 3;
  CELL_STATUS_FAILED                     = 4;
  CELL_STATUS_FAILED_SAFETY_LIMIT        = 5;
  CELL_STATUS_FAILED_POGO_PIN_IRRATIONAL = 6;
}

enum CellDetectStatus {
  CELL_DETECT_STATUS_NONE_UNSPECIFIED = 0;
  CELL_DETECT_STATUS_NOT_DETECTED     = 1;
  CELL_DETECT_STATUS_HARDWARE_FAULTED = 2;
  CELL_DETECT_STATUS_DETECTED         = 3;
}

enum CibCalStatus {
  CIB_CAL_STATUS_CALIBRATED                = 0;
  CIB_CAL_STATUS_UNCALIBRATED_SID_MISMATCH = 1;
  CIB_CAL_STATUS_UNCALIBRATED_RANGE_ERROR  = 2;
}

// FIB
enum FanStatus {
  FAN_STATUS_UNKNOWN_UNSPECIFIED = 0;
  FAN_STATUS_ON                  = 1;
  FAN_STATUS_OFF                 = 2;
  FAN_STATUS_FAULTED             = 3;
}

// TAUX
enum TauxStatus {
  TAUX_STATUS_UNKNOWN_UNSPECIFIED = 0;
  TAUX_STATUS_INIT                = 1; // Taux is initializing
  TAUX_STATUS_PRECHARGE           = 2; // Taux is precharging bus to 76V
  TAUX_STATUS_ACTIVE              = 3; // Taux is commanding bus to 85V
  TAUX_STATUS_FAULTED             = 4; // Taux is faulted
}