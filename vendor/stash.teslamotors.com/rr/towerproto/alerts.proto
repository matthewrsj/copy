syntax            = "proto3";
option go_package = ".;tower";

import "enums.proto";

message aXXX_Reserved { float dummy = 1; }

message StibAlert {
  enum AlertId {
    STIB_NONE                                 = 0;
    STIB_a001_SwAppBoot                       = 1;
    STIB_a002_HalError                        = 2;
    STIB_a003_WatchDog                        = 3;
    STIB_a004_CpuOverRun                      = 4;
    STIB_a005_CANBusReset                     = 5;
    STIB_a006_STIBrx_MIA                      = 6;
    STIB_a007_TaskStackOverrun                = 7;
    STIB_a008_unused                          = 8;
    STIB_a009_unused                          = 9;
    STIB_a010_EnumerationWriteFail            = 10;
    STIB_a011_CurrentSensorHwOC               = 11;
    STIB_a012_ComparatorHwOC                  = 12;
    STIB_a013_SwOC                            = 13;
    STIB_a014_BusUV                           = 14;
    STIB_a015_BusOV                           = 15;
    STIB_a016_StringOV                        = 16;
    STIB_a017_StringUV                        = 17;
    STIB_a018_SwitchTempTooHigh               = 18;
    STIB_a019_ShuntTempTooHigh                = 19;
    STIB_a020_VoltageMatchingTimeout          = 20;
    STIB_a021_LossOfCurrentControl            = 21;
    STIB_a022_SensorOffsetTooHigh             = 22;
    STIB_a023_EnableLineLost                  = 23;
    STIB_a024_irefCorrectionIrrational        = 24;
    STIB_a025_unused                          = 25;
    STIB_a026_unused                          = 26;
    STIB_a027_unused                          = 27;
    STIB_a028_AppliedCurrentIsSaturated       = 28;
    STIB_a029_CellSafetyCheckFailed           = 29;
    STIB_a030_CellQualityCheckFailed          = 30;
    STIB_a031_CellOV                          = 31;
    STIB_a032_CellUV                          = 32;
    STIB_a033_CellDvDT                        = 33;
    STIB_a034_PogoVIrrational                 = 34;
    STIB_a035_CibFaulted                      = 35;
    STIB_a036_CellTempTooHigh                 = 36;
    STIB_a037_FormationTimeout                = 37;
    STIB_a038_FormationCheckFailed            = 38;
    STIB_a039_unused                          = 39;
    STIB_a040_unused                          = 40;
    STIB_a041_CIBDataInvalid                  = 41;
    STIB_a042_Reserved                        = 42;
    STIB_a043_CIBNotConnected                 = 43;
    STIB_a044_CIBCellSwitchWriteFail          = 44;
    STIB_a045_CIB_NegVoltageProtection        = 45;
    STIB_a046_CIB_STIB_VStringDiffCheckFail   = 46;
    STIB_a047_ShuntCalibrationFail            = 47;
    STIB_a048_CIBCellSwitchWriteFailPermanent = 48;
    STIB_a049_CellDvDtOutOfBounds             = 49;
    STIB_a050_Cell_Detect_MIA                 = 50;
  }

  message a004_CpuOverRun {
    float ISR_time_max        = 1; // us
    float f_1kHz_time_max     = 2; // us
    float f_10Hz_time_max     = 3; // us
    float f_100Hz_time_max    = 4; // us
    float f_1kHz_pri_time_max = 5; // us
  }

  message a007_TaskStackOverrun {
    bool Task_Proto_Stack_Overrun    = 1;
    bool Task_1kHz_Stack_Overrun     = 2;
    bool Task_10Hz_Stack_Overrun     = 3;
    bool Task_Fs_Stack_Overrun       = 4;
    bool Task_CanTx_Stack_Overrun    = 5;
    bool Task_OsIdle_Stack_Overrun   = 6;
    bool Task_100Hz_Stack_Overrun    = 7;
    bool Task_1kHz_Pri_Stack_Overrun = 8;
  }

  message a010_EnumerationWriteFail {}

  message a011_CurrentSensorHwOC {
    float bus_voltage      = 1; // V
    float string_voltage   = 2; // V
    float iphase_1         = 3; // A
    float iphase_2         = 4; // A
    bool  iphase_1_ovr_pos = 5;
    bool  iphase_1_ovr_neg = 6;
    bool  iphase_2_ovr_pos = 7;
    bool  iphase_2_ovr_neg = 8;
  }

  message a012_ComparatorHwOC {
    float bus_voltage      = 1; // V
    float string_voltage   = 2; // V
    float iphase_1         = 3; // A
    float iphase_2         = 4; // A
    bool  iphase_1_ovr_pos = 5;
    bool  iphase_1_ovr_neg = 6;
    bool  iphase_2_ovr_pos = 7;
    bool  iphase_2_ovr_neg = 8;
  }

  message a013_SwOC {
    float bus_voltage    = 1; // V
    float string_voltage = 2; // V
    float iphase_1       = 3; // A
    float iphase_2       = 4; // A
    float conv_iout      = 5; // A
  }

  message a014_BusUV {
    float bus_voltage    = 1; // V
    float string_voltage = 2; // V
    float iphase_1       = 3; // A
    float iphase_2       = 4; // A
    float conv_iout      = 5; // A
  }

  message a015_BusOV {
    float bus_voltage    = 1; // V
    float string_voltage = 2; // V
    float iphase_1       = 3; // A
    float iphase_2       = 4; // A
    float conv_iout      = 5; // A
  }

  message a016_StringOV {
    float bus_voltage    = 1; // V
    float string_voltage = 2; // V
    float iphase_1       = 3; // A
    float iphase_2       = 4; // A
    float conv_iout      = 5; // A
  }

  message a017_StringUV {
    float bus_voltage    = 1; // V
    float string_voltage = 2; // V
    float iphase_1       = 3; // A
    float iphase_2       = 4; // A
    float conv_iout      = 5; // A
  }

  message a018_SwitchTempTooHigh {
    float tphase_1     = 1; // degC
    float tphase_2     = 2; // degC
    bool  tphase_1_ovr = 3;
    bool  tphase_2_ovr = 4;
  }

  message a020_VoltageMatchingTimeout {
    float  string_voltage = 1; // V
    float  voltage_target = 2; // V
    uint32 cell_state_req = 3;
  }

  message a024_irefCorrectionIrrational {
    float cib_iout  = 1; // A
    float conv_iout = 2; // A
    float iphase_1  = 3; // A
    float iphase_2  = 4; // A
  }

  message a028_AppliedCurrentIsSaturated { bool AppliedCurrentIsSaturated = 1; }

  message a029_CellSafetyCheckFailed {
    uint32 cell_index   = 1;
    float  cell_voltage = 2; // V
    float  cib_iout     = 3; // A
  }

  message a030_CellQualityCheckFailed {
    uint32 cell_index   = 1;
    float  cell_voltage = 2; // V
    float  cib_iout     = 3; // A
  }

  message a031_CellOV {
    uint32 cell_index   = 1;
    float  cell_voltage = 2; // V
  }

  message a032_CellUV {
    uint32 cell_index   = 1;
    float  cell_voltage = 2; // V
  }

  message a034_PogoVIrrational {
    uint32 cell_index   = 1;
    float  cell_voltage = 2; // V
    float  pogo_voltage = 3; // V
    float  cib_iout     = 4; // A
    float  pogo_r       = 5; // Ohm
  }

  message a035_CibFaulted {
    float  string_voltage   = 1;
    float  shunt_current    = 2;
    float  current_phase_1  = 3;
    float  current_phase_2  = 4;
    uint32 cell_switch_mask = 5;
  }

  message a045_CIB_NegVoltageProtection {
    uint32 node_index                       = 1;
    float  node_voltage                     = 2; // V
    float  pogo_voltage                     = 3; // V
    float  current                          = 4; // A
    uint32 switches                         = 5;
    uint32 pogo_resistance_saturation_count = 6;
    uint32 discharge_step                   = 7;
  }

  message a036_CellTempTooHigh {
    uint32 thermistor_index = 1;
    float  thermistor_T     = 2; // degC
  }

  message a037_FormationTimeout {
    StibFormState stib_form_state = 1;
    uint32        step_time_s     = 2; // s
  }

  message a038_FormationCheckFailed {
    enum AlertReason {
      none            = 0;
      no_hw_enable    = 1;
      dcdc_not_ready  = 2;
      vmatch_fail     = 3;
      dcdc_fault      = 4;
      cib_fault       = 5;
      cell_ov         = 6;
      cell_ot         = 7;
      request_invalid = 8;
      quality_lim     = 9;
      safety_lim      = 10;
      step_timeout    = 11;
      state_timeout   = 12;
      command_msg_mia = 13;
    }
    StibFormState stib_form_state = 1;
    AlertReason   alert_reason    = 2;
  }

  message a041_CIBDataInvalid {
    bool  REFONoff                = 1;
    bool  celldata_adc_delayed    = 2;
    bool  aux_adc_delayed         = 3;
    bool  celldata_pec_invalid    = 4;
    bool  aux_data_pec_invalid    = 5;
    bool  command_counter_invalid = 6;
    bool  read_dma_failed         = 7;
    bool  vref2_invalid           = 8;
    float vref2                   = 9; // V
    bool  Iref_invalid            = 10;
    float Iref                    = 11; // V
    bool  tdie_invalid            = 12;
    float tdie                    = 13; // V
    bool  va_invalid              = 14;
    float va                      = 15; // V
    bool  vd_invalid              = 16;
    float vd                      = 17; // V
  }

  message a044_CIBCellSwitchWriteFail {
    uint32 cell_switch_data    = 1;
    uint32 cell_switch_request = 2;
  }

  message a046_CIB_STIB_VStringDiffCheckFail { float cib_stib_vstring_diff = 1; }

  message a047_ShuntCalibrationFail {
    ShuntCalStatus status  = 1;
    float          i_cal_a = 2;
    float          i_cal_b = 3;
    uint32         sid_lsb = 4;
  }

  message a048_CIBCellSwitchWriteFailPermanent {
    uint32 cell_switch_data    = 1;
    uint32 cell_switch_request = 2;
  }

  message a049_CellDvDtOutOfBounds {
    uint32 cell_index   = 1;
    float  cell_voltage = 2;
    float  dvdt_value   = 3;
    float  current      = 4;
    float  cell_ah      = 5;
  }

  message a050_CellDetectMIA { uint32 cell_detect_mia_mask = 1; }

  message AlertData {
    oneof Payload {
      aXXX_Reserved                        a003 = 3;
      a004_CpuOverRun                      a004 = 4;
      aXXX_Reserved                        a005 = 5;
      aXXX_Reserved                        a006 = 6;
      a007_TaskStackOverrun                a007 = 7;
      aXXX_Reserved                        a008 = 8;
      aXXX_Reserved                        a009 = 9;
      a010_EnumerationWriteFail            a010 = 10;
      aXXX_Reserved                        a011 = 11;
      aXXX_Reserved                        a012 = 12;
      aXXX_Reserved                        a013 = 13;
      aXXX_Reserved                        a014 = 14;
      aXXX_Reserved                        a015 = 15;
      aXXX_Reserved                        a016 = 16;
      aXXX_Reserved                        a017 = 17;
      aXXX_Reserved                        a018 = 18;
      aXXX_Reserved                        a019 = 19;
      a020_VoltageMatchingTimeout          a020 = 20;
      aXXX_Reserved                        a021 = 21;
      aXXX_Reserved                        a022 = 22;
      aXXX_Reserved                        a023 = 23;
      a024_irefCorrectionIrrational        a024 = 24;
      aXXX_Reserved                        a025 = 25;
      aXXX_Reserved                        a026 = 26;
      aXXX_Reserved                        a027 = 27;
      a028_AppliedCurrentIsSaturated       a028 = 28;
      a029_CellSafetyCheckFailed           a029 = 29;
      a030_CellQualityCheckFailed          a030 = 30;
      a031_CellOV                          a031 = 31;
      a032_CellUV                          a032 = 32;
      aXXX_Reserved                        a033 = 33;
      a034_PogoVIrrational                 a034 = 34;
      a035_CibFaulted                      a035 = 35;
      a036_CellTempTooHigh                 a036 = 36;
      a037_FormationTimeout                a037 = 37;
      a038_FormationCheckFailed            a038 = 38;
      aXXX_Reserved                        a039 = 39;
      aXXX_Reserved                        a040 = 40;
      a041_CIBDataInvalid                  a041 = 41;
      aXXX_Reserved                        a042 = 42;
      aXXX_Reserved                        a043 = 43;
      a044_CIBCellSwitchWriteFail          a044 = 44;
      a045_CIB_NegVoltageProtection        a045 = 45;
      a046_CIB_STIB_VStringDiffCheckFail   a046 = 46;
      a047_ShuntCalibrationFail            a047 = 47;
      a048_CIBCellSwitchWriteFailPermanent a048 = 48;
      a049_CellDvDtOutOfBounds             a049 = 49;
    }
  }

  AlertId   alert_id   = 1;
  uint32    stib_index = 2;
  AlertData data       = 3;
}

message FibAlert {
  enum AlertId {
    FIB_NONE                  = 0;
    FIB_a001_SwAppBoot        = 1;
    FIB_a002_watchdogExpired  = 2;
    FIB_a003_internalFault    = 3;
    FIB_a004_FanRpmFault      = 4;
    FIB_a005_FanTotalFault    = 5;
    FIB_a006_FanRationalFault = 6;
    FIB_a007_CpuOverRun       = 7;
    FIB_a008_TaskStackOverrun = 8;
    FIB_a009_FIBrxCommandMIA  = 9;
  }

  message a002_watchdogExpired {
    float TaskId = 1; // us
    float AppCRC = 2; // us
  }

  message a003_internalFault {}

  message a004_FanRpmFault {
    uint32 fan_index    = 1;
    uint32 fan_rpm      = 2; // rpm
    uint32 fan_pwm_duty = 3;
    float  fan_current  = 4; // A
  }

  message a005_FanTotalFault {
    uint32 fan_total        = 1;
    float  fan_current      = 2; // A
    uint32 fan_bit_position = 3;
  }

  message a006_FanRationalFault {
    uint32 fan_index        = 1;
    uint32 fan_rpm_measured = 2; // rpm
    uint32 fan_rpm_request  = 3; // rpm
    uint32 fan_pwm_duty     = 4;
  }

  message a007_CpuOverRun {
    float ISR_time_max    = 1; // us
    float f_1kHz_time_max = 2; // us
    float f_10Hz_time_max = 3; // us
  }

  message a008_TaskStackOverrun {
    bool Task_Proto_Stack_Overrun   = 1;
    bool Task_1kHz_Stack_Overrun    = 2;
    bool Task_1Hz_Stack_Overrun     = 3;
    bool Task_10Hz_Stack_Overrun    = 4;
    bool Task_CANtx_Stack_Overrun   = 5;
    bool Task_OSIdle_Stack_Overrun  = 6;
    bool Task_OSTimer_Stack_Overrun = 7;
  }

  message a009_FIBrxCommandMIA {}

  message AlertData {
    oneof Payload {
      a002_watchdogExpired  a002 = 2;
      a003_internalFault    a003 = 3;
      a004_FanRpmFault      a004 = 4;
      a005_FanTotalFault    a005 = 5;
      a006_FanRationalFault a006 = 6;
      a007_CpuOverRun       a007 = 7;
      a008_TaskStackOverrun a008 = 8;
      a009_FIBrxCommandMIA  a009 = 9;
    }
  }

  AlertId   alert_id = 1;
  AlertData data     = 2;
}

message FxrAlert {
  enum AlertId {
    FXR_NONE                               = 0;
    FXR_a001_SwAppBoot                     = 1;
    FXR_a002_watchdogExpired               = 2;
    FXR_a003_internalFault                 = 3;
    FXR_a004_STIB00_MIA                    = 4;
    FXR_a005_STIB01_MIA                    = 5;
    FXR_a006_STIB02_MIA                    = 6;
    FXR_a007_STIB03_MIA                    = 7;
    FXR_a008_FIB_MIA                       = 8;
    FXR_a009_isoDiagCheckFail              = 9;
    FXR_a010_isolationFault                = 10;
    FXR_a011_isolationDegradationFault     = 11;
    FXR_a012_enumerationWriteFail          = 12;
    FXR_a013_appGitHashMismatch            = 13;
    FXR_a014_state_machine_fault           = 14;
    FXR_a015_fixture_position_fault        = 15;
    FXR_a016_stibs_faulted                 = 16;
    FXR_a017_tray_missing                  = 17;
    FXR_a018_fixture_control_sm_timeout    = 18;
    FXR_a019_fixture_pos_sm_faulted        = 19;
    FXR_a020_thermal_event_level_0         = 20;
    FXR_a021_thermal_event_level_1         = 21;
    FXR_a022_git_mismatch_timeout          = 22;
    FXR_a023_HVBus_UV_fault                = 23;
    FXR_a024_HVBus_OV_fault                = 24;
    FXR_a025_EquipmentNeedsMaintenance     = 25;
    FXR_a026_Reserved                      = 26;
    FXR_a027_24VBus_UV_fault               = 27;
    FXR_a028_24VBus_OV_fault               = 28;
    FXR_a029_RecipeMaskMissingCelldetected = 29;
    FXR_a030_fib_faulted                   = 30;
    FXR_a031_FanPwrCheckFail               = 31;
    FXR_a032_StibPwrCheckFail              = 32;
    FXR_a033_FanHwPwrSupplyFail            = 33;
    FXR_a034_temp_sensor_comms_irrational  = 34;
    FXR_a035_enumeration_change            = 35;
    FXR_a036_multiple_pogo_pin_irrational  = 36;
  }

  message a001_SwAppBoot {}

  message a002_watchdogExpired {
    float TaskId = 1; // us
    float AppCRC = 2; // us
  }

  message a003_internalFault {}

  message a004_STIB00_MIA {}

  message a005_STIB01_MIA {}

  message a006_STIB02_MIA {}

  message a007_STIB03_MIA {}

  message a008_FIB_MIA {}

  message a009_isoDiagCheckFail {
    bool chassisToVBusShorted = 1;
    bool chassisToGndShorted  = 2;
    bool chassisNotConnected  = 3;
    bool busOutOfSpec         = 4;
  }

  message a010_isolationFault {
    float isoResistanceHigh = 1;
    float isoResistanceLow  = 2;
  }

  message a011_isolationDegradationFault {
    float isoResistanceHigh = 1;
    float isoResistanceLow  = 2;
  }

  message a012_enumerationWriteFail {}

  message a013_appGitHashMismatch {
    bool fibAppGitHashMismatch    = 1;
    bool stib00AppGitHashMismatch = 2;
    bool stib01AppGitHashMismatch = 3;
    bool stib02AppGitHashMismatch = 4;
    bool stib03AppGitHashMismatch = 5;
  }

  message a014_state_machine_fault {
    FixtureControlSmState fixture_control_state = 1;
    uint32                faulting_alert_id     = 2;
  }

  message a015_fixture_position_fault {
    FixturePosition        fixture_position       = 1;
    FixtureControlSmState  fixture_control_state  = 2;
    FixturePositionSmState fixture_position_state = 3;
  }

  message a016_stibs_faulted {}

  message a017_tray_missing { FixtureControlSmState fixture_control_state = 1; }

  message a018_fixture_control_sm_timeout {
    FixtureControlSmState  fixture_control_state = 1;
    repeated StibFormState stib_form_state       = 2;
    repeated StibDCDCState stib_dcdc_state       = 3;
  }

  message a019_fixture_pos_sm_faulted {
    enum fault_reason {
      not_open_in_open_st     = 0;
      not_closed_in_closed_st = 1;
      timeout_while_opening   = 2;
      timeout_while_closing   = 3;
      position_invalid        = 4;
    }
    FixturePositionSmState fixture_position_state = 1;
    FixturePosition        fixture_position       = 2;
    fault_reason           fixture_fault_reason   = 3;
  }

  message a020_thermal_event_level_0 { float threshold = 1; }

  message a021_thermal_event_level_1 { float threshold = 1; }

  message a022_git_mismatch_timeout {}

  message a023_busHV_uv_fault { float voltage = 1; }

  message a024_busHV_ov_fault { float voltage = 1; }

  message a025_EquipmentNeedsMaintenance {
    int32             prev_status               = 1; // what equipment status transitioning from
    int32             faulting_alert_id         = 2; // alert id causing transition if non-zero
    bool              fixture_status_faulted    = 3; // if fixture status faulted is causing transition
    bool              equipment_maintenance_req = 4; // if needs maintenance was requested via equipment request
    bool              cells_incomplete          = 5; // fail due to cell(s) not complete during commissioning recipe
    MaintenanceReason maintenance_reason        = 6; // reason for needs maintenance status
  }

  message a027_24VBus_UV_fault { float voltage = 1; }

  message a028_24VBus_OV_fault { float voltage = 1; }

  message a029_RecipeMaskMissingCelldetected {
    uint32 NumMissingCellsDetected =
        1; // Number of cells request in recipe but not detected by cib(ranges from 1 to 64)
    repeated uint32 MissingCellPosition = 2; // cell position of missing cell 1(ranges from 0 to 63, 0xFF = NA)
  }

  message a030_fib_faulted {}

  message a031_FanPwrCheckFail { float current = 1; }

  message a032_StibPwrCheckFail { float current = 1; }

  message a033_FanHwPwrSupplyFail { bool fan_power_bad = 1; }

  message a034_temp_sensor_comms_irrational {
    bool stib_mia    = 1;
    bool cib_offline = 2;
  }

  message a035_enumeration_change {
    uint32 address_current = 1;
    uint32 address_new     = 2;
    bool   uart_enum       = 3;
    bool   gpio_enum       = 4;
  }

  message a036_multiple_pogo_pin_irrational {
    uint32 pogo_needs_inspection_mask_upper = 1;
    uint32 pogo_needs_inspection_mask_lower = 2;
  }

  message AlertData {
    oneof Payload {
      a001_SwAppBoot                     a001 = 1;
      a002_watchdogExpired               a002 = 2;
      a003_internalFault                 a003 = 3;
      a004_STIB00_MIA                    a004 = 4;
      a005_STIB01_MIA                    a005 = 5;
      a006_STIB02_MIA                    a006 = 6;
      a007_STIB03_MIA                    a007 = 7;
      a008_FIB_MIA                       a008 = 8;
      a009_isoDiagCheckFail              a009 = 9;
      a010_isolationFault                a010 = 10;
      a011_isolationDegradationFault     a011 = 11;
      a012_enumerationWriteFail          a012 = 12;
      a013_appGitHashMismatch            a013 = 13;
      a014_state_machine_fault           a014 = 14;
      a015_fixture_position_fault        a015 = 15;
      a016_stibs_faulted                 a016 = 16;
      a017_tray_missing                  a017 = 17;
      a018_fixture_control_sm_timeout    a018 = 18;
      a019_fixture_pos_sm_faulted        a019 = 19;
      a020_thermal_event_level_0         a020 = 20;
      a021_thermal_event_level_1         a021 = 21;
      a022_git_mismatch_timeout          a022 = 22;
      a023_busHV_uv_fault                a023 = 23;
      a024_busHV_ov_fault                a024 = 24;
      a025_EquipmentNeedsMaintenance     a025 = 25;
      a027_24VBus_UV_fault               a027 = 27;
      a028_24VBus_OV_fault               a028 = 28;
      a029_RecipeMaskMissingCelldetected a029 = 29;
      a030_fib_faulted                   a030 = 30;
      a031_FanPwrCheckFail               a031 = 31;
      a032_StibPwrCheckFail              a032 = 32;
      a033_FanHwPwrSupplyFail            a033 = 33;
      a034_temp_sensor_comms_irrational  a034 = 34;
      a035_enumeration_change            a035 = 35;
      a036_multiple_pogo_pin_irrational  a036 = 36;
    }
  }

  AlertId   alert_id = 1;
  AlertData data     = 2;
}

message DcacAlertMatrices {
  uint32 matrix0 = 1;
  uint32 matrix1 = 2;
  uint32 matrix2 = 3;
  uint32 matrix3 = 4;
}

message TauxAlert {
  enum AlertId {
    TAUX_NONE                       = 0;
    TAUX_a001_SwAppBoot             = 1;
    TAUX_a002_DcacAlert             = 2;
    TAUX_a003_NoPowerCapacity       = 3;
    TAUX_a004_PowerCapacityDecrease = 4;
    TAUX_a005_PowerOverload         = 5;
  }

  message a001_SwAppBoot {}

  message a002_DcacAlert {
    enum Ecu {
      DCAC_ALERT_ECU_UNKOWN_UNSPECIFIED = 0;
      DCAC_ALERT_ECU_POD                = 1;
      DCAC_ALERT_ECU_PINV               = 2;
    }

    uint32 pt_index      = 1; // powertray has alert
    uint32 dcac_index    = 2; // dcac index in powertray
    uint32 alert_id      = 3; // id of dcac alert
    Ecu    faulted_ecu   = 4;
    string subpackage_sn = 5;
  }

  message a003_NoPowerCapacity {}

  message a004_PowerCapacityDecrease {
    int32 previous_capacity_w = 1;
    int32 power_capacity_w    = 2;
  }

  message a005_PowerOverload {
    int32 previous_in_use_w = 1;
    int32 power_capacity_w  = 2;
  }

  message AlertData {
    oneof Payload {
      a001_SwAppBoot             a001 = 1;
      a002_DcacAlert             a002 = 2;
      a003_NoPowerCapacity       a003 = 3;
      a004_PowerCapacityDecrease a004 = 4;
      a005_PowerOverload         a005 = 5;
    }
  }

  AlertId   alert_id = 1;
  AlertData data     = 2;
}

message AlertLog {
  oneof EcuAlert {
    FxrAlert  fxr_alert  = 1;
    FibAlert  fib_alert  = 2;
    StibAlert stib_alert = 3;
    TauxAlert taux_alert = 4;
  }
}

message AlertMatrix { repeated uint32 alert_matrices = 1; }

message Alerts {
  oneof AlertDetail {
    AlertLog    log    = 1;
    AlertMatrix matrix = 2;
  }
}
