// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.2
// source: enums.proto

package tower

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FixtureControlSmState int32

const (
	FixtureControlSmState_FXR_ST_INIT_UNSPECIFIED FixtureControlSmState = 0
	FixtureControlSmState_FXR_ST_WAIT_READY       FixtureControlSmState = 1
	FixtureControlSmState_FXR_ST_WAIT_TRAY        FixtureControlSmState = 2
	FixtureControlSmState_FXR_ST_WAIT_RECIPE      FixtureControlSmState = 3
	FixtureControlSmState_FXR_ST_CLOSE            FixtureControlSmState = 4
	FixtureControlSmState_FXR_ST_TX_STEP          FixtureControlSmState = 5
	FixtureControlSmState_FXR_ST_START_STEP       FixtureControlSmState = 6
	FixtureControlSmState_FXR_ST_EXECUTING        FixtureControlSmState = 7
	FixtureControlSmState_FXR_ST_STEP_COMPLETE    FixtureControlSmState = 8
	FixtureControlSmState_FXR_ST_SEQ_COMPLETE     FixtureControlSmState = 9
	FixtureControlSmState_FXR_ST_SEQ_INTERRUPTED  FixtureControlSmState = 10
	FixtureControlSmState_FXR_ST_FAULTED          FixtureControlSmState = 11
)

// Enum value maps for FixtureControlSmState.
var (
	FixtureControlSmState_name = map[int32]string{
		0:  "FXR_ST_INIT_UNSPECIFIED",
		1:  "FXR_ST_WAIT_READY",
		2:  "FXR_ST_WAIT_TRAY",
		3:  "FXR_ST_WAIT_RECIPE",
		4:  "FXR_ST_CLOSE",
		5:  "FXR_ST_TX_STEP",
		6:  "FXR_ST_START_STEP",
		7:  "FXR_ST_EXECUTING",
		8:  "FXR_ST_STEP_COMPLETE",
		9:  "FXR_ST_SEQ_COMPLETE",
		10: "FXR_ST_SEQ_INTERRUPTED",
		11: "FXR_ST_FAULTED",
	}
	FixtureControlSmState_value = map[string]int32{
		"FXR_ST_INIT_UNSPECIFIED": 0,
		"FXR_ST_WAIT_READY":       1,
		"FXR_ST_WAIT_TRAY":        2,
		"FXR_ST_WAIT_RECIPE":      3,
		"FXR_ST_CLOSE":            4,
		"FXR_ST_TX_STEP":          5,
		"FXR_ST_START_STEP":       6,
		"FXR_ST_EXECUTING":        7,
		"FXR_ST_STEP_COMPLETE":    8,
		"FXR_ST_SEQ_COMPLETE":     9,
		"FXR_ST_SEQ_INTERRUPTED":  10,
		"FXR_ST_FAULTED":          11,
	}
)

func (x FixtureControlSmState) Enum() *FixtureControlSmState {
	p := new(FixtureControlSmState)
	*p = x
	return p
}

func (x FixtureControlSmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixtureControlSmState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[0].Descriptor()
}

func (FixtureControlSmState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[0]
}

func (x FixtureControlSmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixtureControlSmState.Descriptor instead.
func (FixtureControlSmState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{0}
}

type FixtureStatus int32

const (
	FixtureStatus_FIXTURE_STATUS_UNKNOWN_UNSPECIFIED FixtureStatus = 0
	FixtureStatus_FIXTURE_STATUS_INIT                FixtureStatus = 1 // Fixture is not ready for a tray yet
	FixtureStatus_FIXTURE_STATUS_IDLE                FixtureStatus = 2 // Fixture is ready for a tray
	FixtureStatus_FIXTURE_STATUS_READY               FixtureStatus = 3 // Fixture has a tray and is ready to receive a recipe
	FixtureStatus_FIXTURE_STATUS_ACTIVE              FixtureStatus = 4 // Fixture is running a formation cycle on the tray
	FixtureStatus_FIXTURE_STATUS_FAULTED             FixtureStatus = 5 // Fixture is faulted
	FixtureStatus_FIXTURE_STATUS_COMPLETE            FixtureStatus = 6 // Fixture is done with the formation cycle, tray is still present
	FixtureStatus_FIXTURE_STATUS_UPDATING            FixtureStatus = 7 // Fixture is updating firmware - not used
)

// Enum value maps for FixtureStatus.
var (
	FixtureStatus_name = map[int32]string{
		0: "FIXTURE_STATUS_UNKNOWN_UNSPECIFIED",
		1: "FIXTURE_STATUS_INIT",
		2: "FIXTURE_STATUS_IDLE",
		3: "FIXTURE_STATUS_READY",
		4: "FIXTURE_STATUS_ACTIVE",
		5: "FIXTURE_STATUS_FAULTED",
		6: "FIXTURE_STATUS_COMPLETE",
		7: "FIXTURE_STATUS_UPDATING",
	}
	FixtureStatus_value = map[string]int32{
		"FIXTURE_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"FIXTURE_STATUS_INIT":                1,
		"FIXTURE_STATUS_IDLE":                2,
		"FIXTURE_STATUS_READY":               3,
		"FIXTURE_STATUS_ACTIVE":              4,
		"FIXTURE_STATUS_FAULTED":             5,
		"FIXTURE_STATUS_COMPLETE":            6,
		"FIXTURE_STATUS_UPDATING":            7,
	}
)

func (x FixtureStatus) Enum() *FixtureStatus {
	p := new(FixtureStatus)
	*p = x
	return p
}

func (x FixtureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixtureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[1].Descriptor()
}

func (FixtureStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[1]
}

func (x FixtureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixtureStatus.Descriptor instead.
func (FixtureStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{1}
}

type FixturePositionSmState int32

const (
	FixturePositionSmState_FIXTURE_POSITION_ST_INIT_UNSPECIFIED FixturePositionSmState = 0
	FixturePositionSmState_FIXTURE_POSITION_ST_OPEN             FixturePositionSmState = 1
	FixturePositionSmState_FIXTURE_POSITION_ST_CLOSING          FixturePositionSmState = 2
	FixturePositionSmState_FIXTURE_POSITION_ST_CLOSED           FixturePositionSmState = 3
	FixturePositionSmState_FIXTURE_POSITION_ST_OPENING          FixturePositionSmState = 4
	FixturePositionSmState_FIXTURE_POSITION_ST_FAULTED          FixturePositionSmState = 5
)

// Enum value maps for FixturePositionSmState.
var (
	FixturePositionSmState_name = map[int32]string{
		0: "FIXTURE_POSITION_ST_INIT_UNSPECIFIED",
		1: "FIXTURE_POSITION_ST_OPEN",
		2: "FIXTURE_POSITION_ST_CLOSING",
		3: "FIXTURE_POSITION_ST_CLOSED",
		4: "FIXTURE_POSITION_ST_OPENING",
		5: "FIXTURE_POSITION_ST_FAULTED",
	}
	FixturePositionSmState_value = map[string]int32{
		"FIXTURE_POSITION_ST_INIT_UNSPECIFIED": 0,
		"FIXTURE_POSITION_ST_OPEN":             1,
		"FIXTURE_POSITION_ST_CLOSING":          2,
		"FIXTURE_POSITION_ST_CLOSED":           3,
		"FIXTURE_POSITION_ST_OPENING":          4,
		"FIXTURE_POSITION_ST_FAULTED":          5,
	}
)

func (x FixturePositionSmState) Enum() *FixturePositionSmState {
	p := new(FixturePositionSmState)
	*p = x
	return p
}

func (x FixturePositionSmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixturePositionSmState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[2].Descriptor()
}

func (FixturePositionSmState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[2]
}

func (x FixturePositionSmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixturePositionSmState.Descriptor instead.
func (FixturePositionSmState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{2}
}

type FixturePosition int32

const (
	FixturePosition_FIXTURE_POSITION_UNKNOWN_UNSPECIFIED FixturePosition = 0
	FixturePosition_FIXTURE_POSITION_CLOSED              FixturePosition = 1
	FixturePosition_FIXTURE_POSITION_OPEN                FixturePosition = 2
	FixturePosition_FIXTURE_POSITION_INTERMEDIATE        FixturePosition = 3
	FixturePosition_FIXTURE_POSITION_INVALID             FixturePosition = 4
)

// Enum value maps for FixturePosition.
var (
	FixturePosition_name = map[int32]string{
		0: "FIXTURE_POSITION_UNKNOWN_UNSPECIFIED",
		1: "FIXTURE_POSITION_CLOSED",
		2: "FIXTURE_POSITION_OPEN",
		3: "FIXTURE_POSITION_INTERMEDIATE",
		4: "FIXTURE_POSITION_INVALID",
	}
	FixturePosition_value = map[string]int32{
		"FIXTURE_POSITION_UNKNOWN_UNSPECIFIED": 0,
		"FIXTURE_POSITION_CLOSED":              1,
		"FIXTURE_POSITION_OPEN":                2,
		"FIXTURE_POSITION_INTERMEDIATE":        3,
		"FIXTURE_POSITION_INVALID":             4,
	}
)

func (x FixturePosition) Enum() *FixturePosition {
	p := new(FixturePosition)
	*p = x
	return p
}

func (x FixturePosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixturePosition) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[3].Descriptor()
}

func (FixturePosition) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[3]
}

func (x FixturePosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixturePosition.Descriptor instead.
func (FixturePosition) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{3}
}

type EquipmentRequest int32

const (
	EquipmentRequest_EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED EquipmentRequest = 0
	EquipmentRequest_EQUIPMENT_REQUEST_SELF_TEST_APPROVED  EquipmentRequest = 1 // operator has reviewed self test data, put fixture into production
	EquipmentRequest_EQUIPMENT_REQUEST_MAINTENANCE         EquipmentRequest = 2 // put fixture in maintenance mode
	EquipmentRequest_EQUIPMENT_REQUEST_RECOMMISSIONING     EquipmentRequest = 3 // reset fixture hardware status to require commissioning
	EquipmentRequest_EQUIPMENT_REQUEST_PERFORM_MAINTENANCE EquipmentRequest = 4 // reset fixture hardware status to IN_MAINTENANCE
)

// Enum value maps for EquipmentRequest.
var (
	EquipmentRequest_name = map[int32]string{
		0: "EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED",
		1: "EQUIPMENT_REQUEST_SELF_TEST_APPROVED",
		2: "EQUIPMENT_REQUEST_MAINTENANCE",
		3: "EQUIPMENT_REQUEST_RECOMMISSIONING",
		4: "EQUIPMENT_REQUEST_PERFORM_MAINTENANCE",
	}
	EquipmentRequest_value = map[string]int32{
		"EQUIPMENT_REQUEST_UNKNOWN_UNSPECIFIED": 0,
		"EQUIPMENT_REQUEST_SELF_TEST_APPROVED":  1,
		"EQUIPMENT_REQUEST_MAINTENANCE":         2,
		"EQUIPMENT_REQUEST_RECOMMISSIONING":     3,
		"EQUIPMENT_REQUEST_PERFORM_MAINTENANCE": 4,
	}
)

func (x EquipmentRequest) Enum() *EquipmentRequest {
	p := new(EquipmentRequest)
	*p = x
	return p
}

func (x EquipmentRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[4].Descriptor()
}

func (EquipmentRequest) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[4]
}

func (x EquipmentRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentRequest.Descriptor instead.
func (EquipmentRequest) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{4}
}

type EquipmentStatus int32

const (
	EquipmentStatus_EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED EquipmentStatus = 0
	EquipmentStatus_EQUIPMENT_STATUS_NEEDS_COMMISSIONING EquipmentStatus = 1 // initial value or when commanded to recommission
	EquipmentStatus_EQUIPMENT_STATUS_NEEDS_MAINTENANCE   EquipmentStatus = 2 // When self test fails or when set by TC
	EquipmentStatus_EQUIPMENT_STATUS_NEEDS_APPROVAL      EquipmentStatus = 3 // When self test cycle has run , waiting for approval from operator
	EquipmentStatus_EQUIPMENT_STATUS_IN_OPERATION        EquipmentStatus = 4 // When operator approves self test cycle, ready for production
	EquipmentStatus_EQUIPMENT_STATUS_IN_MAINTENANCE      EquipmentStatus = 5 // Operator is performing maintenance on this fixture
)

// Enum value maps for EquipmentStatus.
var (
	EquipmentStatus_name = map[int32]string{
		0: "EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED",
		1: "EQUIPMENT_STATUS_NEEDS_COMMISSIONING",
		2: "EQUIPMENT_STATUS_NEEDS_MAINTENANCE",
		3: "EQUIPMENT_STATUS_NEEDS_APPROVAL",
		4: "EQUIPMENT_STATUS_IN_OPERATION",
		5: "EQUIPMENT_STATUS_IN_MAINTENANCE",
	}
	EquipmentStatus_value = map[string]int32{
		"EQUIPMENT_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"EQUIPMENT_STATUS_NEEDS_COMMISSIONING": 1,
		"EQUIPMENT_STATUS_NEEDS_MAINTENANCE":   2,
		"EQUIPMENT_STATUS_NEEDS_APPROVAL":      3,
		"EQUIPMENT_STATUS_IN_OPERATION":        4,
		"EQUIPMENT_STATUS_IN_MAINTENANCE":      5,
	}
)

func (x EquipmentStatus) Enum() *EquipmentStatus {
	p := new(EquipmentStatus)
	*p = x
	return p
}

func (x EquipmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[5].Descriptor()
}

func (EquipmentStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[5]
}

func (x EquipmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentStatus.Descriptor instead.
func (EquipmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{5}
}

type FireAlarmStatus int32

const (
	FireAlarmStatus_FIRE_ALARM_UNKNOWN_UNSPECIFIED FireAlarmStatus = 0 // No heat spots detected by the fixture
	FireAlarmStatus_FIRE_ALARM_LEVEL_0             FireAlarmStatus = 1 // Two or more sensors detecting higher temperatures
	FireAlarmStatus_FIRE_ALARM_LEVEL_1             FireAlarmStatus = 2 // Two or more sensors detecting very high temperatures
)

// Enum value maps for FireAlarmStatus.
var (
	FireAlarmStatus_name = map[int32]string{
		0: "FIRE_ALARM_UNKNOWN_UNSPECIFIED",
		1: "FIRE_ALARM_LEVEL_0",
		2: "FIRE_ALARM_LEVEL_1",
	}
	FireAlarmStatus_value = map[string]int32{
		"FIRE_ALARM_UNKNOWN_UNSPECIFIED": 0,
		"FIRE_ALARM_LEVEL_0":             1,
		"FIRE_ALARM_LEVEL_1":             2,
	}
)

func (x FireAlarmStatus) Enum() *FireAlarmStatus {
	p := new(FireAlarmStatus)
	*p = x
	return p
}

func (x FireAlarmStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FireAlarmStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[6].Descriptor()
}

func (FireAlarmStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[6]
}

func (x FireAlarmStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FireAlarmStatus.Descriptor instead.
func (FireAlarmStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{6}
}

type FormRequest int32

const (
	FormRequest_FORM_REQUEST_UNKNOWN_UNSPECIFIED FormRequest = 0
	FormRequest_FORM_REQUEST_STOP                FormRequest = 1
	FormRequest_FORM_REQUEST_START               FormRequest = 2
	FormRequest_FORM_REQUEST_UPDATE_CELLS        FormRequest = 3
	FormRequest_FORM_REQUEST_FAULT_RESET         FormRequest = 4
	FormRequest_FORM_REQUEST_PAUSE               FormRequest = 5
	FormRequest_FORM_REQUEST_RESUME              FormRequest = 6
)

// Enum value maps for FormRequest.
var (
	FormRequest_name = map[int32]string{
		0: "FORM_REQUEST_UNKNOWN_UNSPECIFIED",
		1: "FORM_REQUEST_STOP",
		2: "FORM_REQUEST_START",
		3: "FORM_REQUEST_UPDATE_CELLS",
		4: "FORM_REQUEST_FAULT_RESET",
		5: "FORM_REQUEST_PAUSE",
		6: "FORM_REQUEST_RESUME",
	}
	FormRequest_value = map[string]int32{
		"FORM_REQUEST_UNKNOWN_UNSPECIFIED": 0,
		"FORM_REQUEST_STOP":                1,
		"FORM_REQUEST_START":               2,
		"FORM_REQUEST_UPDATE_CELLS":        3,
		"FORM_REQUEST_FAULT_RESET":         4,
		"FORM_REQUEST_PAUSE":               5,
		"FORM_REQUEST_RESUME":              6,
	}
)

func (x FormRequest) Enum() *FormRequest {
	p := new(FormRequest)
	*p = x
	return p
}

func (x FormRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[7].Descriptor()
}

func (FormRequest) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[7]
}

func (x FormRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormRequest.Descriptor instead.
func (FormRequest) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{7}
}

type IsolationTestRequest int32

const (
	IsolationTestRequest_ISOLATION_TEST_REQUEST_UNKNOWN_UNSPECIFIED IsolationTestRequest = 0
	IsolationTestRequest_ISOLATION_TEST_REQUEST_ENABLE              IsolationTestRequest = 1 // trigger to enable isolation resistance measurement in a fixture
	IsolationTestRequest_ISOLATION_TEST_REQUEST_DISABLE             IsolationTestRequest = 2 // disable active isolation resistance measurement in fixture
)

// Enum value maps for IsolationTestRequest.
var (
	IsolationTestRequest_name = map[int32]string{
		0: "ISOLATION_TEST_REQUEST_UNKNOWN_UNSPECIFIED",
		1: "ISOLATION_TEST_REQUEST_ENABLE",
		2: "ISOLATION_TEST_REQUEST_DISABLE",
	}
	IsolationTestRequest_value = map[string]int32{
		"ISOLATION_TEST_REQUEST_UNKNOWN_UNSPECIFIED": 0,
		"ISOLATION_TEST_REQUEST_ENABLE":              1,
		"ISOLATION_TEST_REQUEST_DISABLE":             2,
	}
)

func (x IsolationTestRequest) Enum() *IsolationTestRequest {
	p := new(IsolationTestRequest)
	*p = x
	return p
}

func (x IsolationTestRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationTestRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[8].Descriptor()
}

func (IsolationTestRequest) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[8]
}

func (x IsolationTestRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsolationTestRequest.Descriptor instead.
func (IsolationTestRequest) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{8}
}

type IsolationTestStatus int32

const (
	IsolationTestStatus_ISOLATION_TEST_STATUS_UNKNOWN_UNSPECIFIED IsolationTestStatus = 0
	IsolationTestStatus_ISOLATION_TEST_STATUS_ACTIVE              IsolationTestStatus = 1 // isolation resistance measurement active in  fixture
	IsolationTestStatus_ISOLATION_TEST_STATUS_INACTIVE            IsolationTestStatus = 2 // isolation resistance measurement inactive in  fixture
	IsolationTestStatus_ISOLATION_TEST_STATUS_FAULTED             IsolationTestStatus = 3 // isolation resistance measurement faulted - maintenance to be triggered
)

// Enum value maps for IsolationTestStatus.
var (
	IsolationTestStatus_name = map[int32]string{
		0: "ISOLATION_TEST_STATUS_UNKNOWN_UNSPECIFIED",
		1: "ISOLATION_TEST_STATUS_ACTIVE",
		2: "ISOLATION_TEST_STATUS_INACTIVE",
		3: "ISOLATION_TEST_STATUS_FAULTED",
	}
	IsolationTestStatus_value = map[string]int32{
		"ISOLATION_TEST_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"ISOLATION_TEST_STATUS_ACTIVE":              1,
		"ISOLATION_TEST_STATUS_INACTIVE":            2,
		"ISOLATION_TEST_STATUS_FAULTED":             3,
	}
)

func (x IsolationTestStatus) Enum() *IsolationTestStatus {
	p := new(IsolationTestStatus)
	*p = x
	return p
}

func (x IsolationTestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationTestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[9].Descriptor()
}

func (IsolationTestStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[9]
}

func (x IsolationTestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsolationTestStatus.Descriptor instead.
func (IsolationTestStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{9}
}

type IsoState int32

const (
	IsoState_ISO_STATE_UNKNOWN_UNSPECIFIED IsoState = 0
	IsoState_ISO_STATE_INIT                IsoState = 1
	IsoState_ISO_STATE_CLOSE_SW            IsoState = 2
	IsoState_ISO_STATE_OPEN_SW             IsoState = 3
	IsoState_ISO_STATE_COMPUTE             IsoState = 4
)

// Enum value maps for IsoState.
var (
	IsoState_name = map[int32]string{
		0: "ISO_STATE_UNKNOWN_UNSPECIFIED",
		1: "ISO_STATE_INIT",
		2: "ISO_STATE_CLOSE_SW",
		3: "ISO_STATE_OPEN_SW",
		4: "ISO_STATE_COMPUTE",
	}
	IsoState_value = map[string]int32{
		"ISO_STATE_UNKNOWN_UNSPECIFIED": 0,
		"ISO_STATE_INIT":                1,
		"ISO_STATE_CLOSE_SW":            2,
		"ISO_STATE_OPEN_SW":             3,
		"ISO_STATE_COMPUTE":             4,
	}
)

func (x IsoState) Enum() *IsoState {
	p := new(IsoState)
	*p = x
	return p
}

func (x IsoState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[10].Descriptor()
}

func (IsoState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[10]
}

func (x IsoState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoState.Descriptor instead.
func (IsoState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{10}
}

type IsoError int32

const (
	IsoError_ISO_ERROR_UNKNOWN_UNSPECIFIED            IsoError = 0
	IsoError_ISO_ERROR_BUS_OUT_OF_SPEC                IsoError = 1
	IsoError_ISO_ERROR_CHASSIS_TO_BUS_SHORTED         IsoError = 2
	IsoError_ISO_ERROR_CHASSIS_TO_GND_SHORTED         IsoError = 3
	IsoError_ISO_ERROR_CHASSIS_NOT_CONNECTED          IsoError = 4
	IsoError_ISO_ERROR_RESISTANCE_DEGRADATION_WARNING IsoError = 5
	IsoError_ISO_ERROR_RESISTANCE_TOO_LOW_FAULT       IsoError = 6
	IsoError_ISO_ERROR_RESISTANCE_NOT_AVAILABLE       IsoError = 7
)

// Enum value maps for IsoError.
var (
	IsoError_name = map[int32]string{
		0: "ISO_ERROR_UNKNOWN_UNSPECIFIED",
		1: "ISO_ERROR_BUS_OUT_OF_SPEC",
		2: "ISO_ERROR_CHASSIS_TO_BUS_SHORTED",
		3: "ISO_ERROR_CHASSIS_TO_GND_SHORTED",
		4: "ISO_ERROR_CHASSIS_NOT_CONNECTED",
		5: "ISO_ERROR_RESISTANCE_DEGRADATION_WARNING",
		6: "ISO_ERROR_RESISTANCE_TOO_LOW_FAULT",
		7: "ISO_ERROR_RESISTANCE_NOT_AVAILABLE",
	}
	IsoError_value = map[string]int32{
		"ISO_ERROR_UNKNOWN_UNSPECIFIED":            0,
		"ISO_ERROR_BUS_OUT_OF_SPEC":                1,
		"ISO_ERROR_CHASSIS_TO_BUS_SHORTED":         2,
		"ISO_ERROR_CHASSIS_TO_GND_SHORTED":         3,
		"ISO_ERROR_CHASSIS_NOT_CONNECTED":          4,
		"ISO_ERROR_RESISTANCE_DEGRADATION_WARNING": 5,
		"ISO_ERROR_RESISTANCE_TOO_LOW_FAULT":       6,
		"ISO_ERROR_RESISTANCE_NOT_AVAILABLE":       7,
	}
)

func (x IsoError) Enum() *IsoError {
	p := new(IsoError)
	*p = x
	return p
}

func (x IsoError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoError) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[11].Descriptor()
}

func (IsoError) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[11]
}

func (x IsoError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoError.Descriptor instead.
func (IsoError) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{11}
}

type EnumerationStatus int32

const (
	EnumerationStatus_ENUM_STATUS_UNKNOWN_UNSPECIFIED EnumerationStatus = 0
	EnumerationStatus_ENUM_STATUS_OK                  EnumerationStatus = 1 // ENUM is OK
	EnumerationStatus_ENUM_STATUS_COLLISION           EnumerationStatus = 2 // TAUX is resolving enum collision
	EnumerationStatus_ENUM_STATUS_FAULT               EnumerationStatus = 3 // Enum is in faulted state
)

// Enum value maps for EnumerationStatus.
var (
	EnumerationStatus_name = map[int32]string{
		0: "ENUM_STATUS_UNKNOWN_UNSPECIFIED",
		1: "ENUM_STATUS_OK",
		2: "ENUM_STATUS_COLLISION",
		3: "ENUM_STATUS_FAULT",
	}
	EnumerationStatus_value = map[string]int32{
		"ENUM_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"ENUM_STATUS_OK":                  1,
		"ENUM_STATUS_COLLISION":           2,
		"ENUM_STATUS_FAULT":               3,
	}
)

func (x EnumerationStatus) Enum() *EnumerationStatus {
	p := new(EnumerationStatus)
	*p = x
	return p
}

func (x EnumerationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumerationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[12].Descriptor()
}

func (EnumerationStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[12]
}

func (x EnumerationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumerationStatus.Descriptor instead.
func (EnumerationStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{12}
}

type TrayOrientation int32

const (
	TrayOrientation_ORIENTATION_UNKNOWN_UNSPECIFIED TrayOrientation = 0
	TrayOrientation_ORIENTATION_A                   TrayOrientation = 1
	TrayOrientation_ORIENTATION_B                   TrayOrientation = 2
	TrayOrientation_ORIENTATION_C                   TrayOrientation = 3
	TrayOrientation_ORIENTATION_D                   TrayOrientation = 4
)

// Enum value maps for TrayOrientation.
var (
	TrayOrientation_name = map[int32]string{
		0: "ORIENTATION_UNKNOWN_UNSPECIFIED",
		1: "ORIENTATION_A",
		2: "ORIENTATION_B",
		3: "ORIENTATION_C",
		4: "ORIENTATION_D",
	}
	TrayOrientation_value = map[string]int32{
		"ORIENTATION_UNKNOWN_UNSPECIFIED": 0,
		"ORIENTATION_A":                   1,
		"ORIENTATION_B":                   2,
		"ORIENTATION_C":                   3,
		"ORIENTATION_D":                   4,
	}
)

func (x TrayOrientation) Enum() *TrayOrientation {
	p := new(TrayOrientation)
	*p = x
	return p
}

func (x TrayOrientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrayOrientation) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[13].Descriptor()
}

func (TrayOrientation) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[13]
}

func (x TrayOrientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrayOrientation.Descriptor instead.
func (TrayOrientation) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{13}
}

// STIB
type StibDCDCState int32

const (
	StibDCDCState_STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED StibDCDCState = 0
	StibDCDCState_STIB_DCDC_STATE_WAIT                     StibDCDCState = 1
	StibDCDCState_STIB_DCDC_STATE_STANDBY                  StibDCDCState = 2
	StibDCDCState_STIB_DCDC_STATE_OPEN_LOOP                StibDCDCState = 3
	StibDCDCState_STIB_DCDC_STATE_VOLTAGE_MATCHING         StibDCDCState = 4
	StibDCDCState_STIB_DCDC_STATE_CLOSED_LOOP              StibDCDCState = 5
	StibDCDCState_STIB_DCDC_STATE_PRECHARGE                StibDCDCState = 6
	StibDCDCState_STIB_DCDC_STATE_AUTO_ZERO                StibDCDCState = 7
	StibDCDCState_STIB_DCDC_STATE_FAULT                    StibDCDCState = 8
	StibDCDCState_STIB_DCDC_INTERNAL_SLOSH                 StibDCDCState = 9
)

// Enum value maps for StibDCDCState.
var (
	StibDCDCState_name = map[int32]string{
		0: "STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED",
		1: "STIB_DCDC_STATE_WAIT",
		2: "STIB_DCDC_STATE_STANDBY",
		3: "STIB_DCDC_STATE_OPEN_LOOP",
		4: "STIB_DCDC_STATE_VOLTAGE_MATCHING",
		5: "STIB_DCDC_STATE_CLOSED_LOOP",
		6: "STIB_DCDC_STATE_PRECHARGE",
		7: "STIB_DCDC_STATE_AUTO_ZERO",
		8: "STIB_DCDC_STATE_FAULT",
		9: "STIB_DCDC_INTERNAL_SLOSH",
	}
	StibDCDCState_value = map[string]int32{
		"STIB_DCDC_STATE_INIT_UNKNOWN_UNSPECIFIED": 0,
		"STIB_DCDC_STATE_WAIT":                     1,
		"STIB_DCDC_STATE_STANDBY":                  2,
		"STIB_DCDC_STATE_OPEN_LOOP":                3,
		"STIB_DCDC_STATE_VOLTAGE_MATCHING":         4,
		"STIB_DCDC_STATE_CLOSED_LOOP":              5,
		"STIB_DCDC_STATE_PRECHARGE":                6,
		"STIB_DCDC_STATE_AUTO_ZERO":                7,
		"STIB_DCDC_STATE_FAULT":                    8,
		"STIB_DCDC_INTERNAL_SLOSH":                 9,
	}
)

func (x StibDCDCState) Enum() *StibDCDCState {
	p := new(StibDCDCState)
	*p = x
	return p
}

func (x StibDCDCState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibDCDCState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[14].Descriptor()
}

func (StibDCDCState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[14]
}

func (x StibDCDCState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibDCDCState.Descriptor instead.
func (StibDCDCState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{14}
}

type StibFormState int32

const (
	StibFormState_STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED StibFormState = 0
	StibFormState_STIB_FORM_STATE_IDLE                     StibFormState = 1
	StibFormState_STIB_FORM_STATE_VMATCH                   StibFormState = 2
	StibFormState_STIB_FORM_STATE_CC                       StibFormState = 3
	StibFormState_STIB_FORM_STATE_CV                       StibFormState = 4
	StibFormState_STIB_FORM_STATE_CP                       StibFormState = 5
	StibFormState_STIB_FORM_STATE_DCR_PULSE                StibFormState = 6
	StibFormState_STIB_FORM_STATE_FINISHED                 StibFormState = 7
	StibFormState_STIB_FORM_STATE_DIRECT_CONTROL           StibFormState = 8
	StibFormState_STIB_FORM_STATE_DELAY                    StibFormState = 9
	StibFormState_STIB_FORM_STATE_CELL_SW                  StibFormState = 10
	StibFormState_STIB_FORM_STATE_FAULT                    StibFormState = 11
	StibFormState_STIB_FORM_STATE_FAULT_COOL               StibFormState = 12
)

// Enum value maps for StibFormState.
var (
	StibFormState_name = map[int32]string{
		0:  "STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED",
		1:  "STIB_FORM_STATE_IDLE",
		2:  "STIB_FORM_STATE_VMATCH",
		3:  "STIB_FORM_STATE_CC",
		4:  "STIB_FORM_STATE_CV",
		5:  "STIB_FORM_STATE_CP",
		6:  "STIB_FORM_STATE_DCR_PULSE",
		7:  "STIB_FORM_STATE_FINISHED",
		8:  "STIB_FORM_STATE_DIRECT_CONTROL",
		9:  "STIB_FORM_STATE_DELAY",
		10: "STIB_FORM_STATE_CELL_SW",
		11: "STIB_FORM_STATE_FAULT",
		12: "STIB_FORM_STATE_FAULT_COOL",
	}
	StibFormState_value = map[string]int32{
		"STIB_FORM_STATE_INIT_UNKNOWN_UNSPECIFIED": 0,
		"STIB_FORM_STATE_IDLE":                     1,
		"STIB_FORM_STATE_VMATCH":                   2,
		"STIB_FORM_STATE_CC":                       3,
		"STIB_FORM_STATE_CV":                       4,
		"STIB_FORM_STATE_CP":                       5,
		"STIB_FORM_STATE_DCR_PULSE":                6,
		"STIB_FORM_STATE_FINISHED":                 7,
		"STIB_FORM_STATE_DIRECT_CONTROL":           8,
		"STIB_FORM_STATE_DELAY":                    9,
		"STIB_FORM_STATE_CELL_SW":                  10,
		"STIB_FORM_STATE_FAULT":                    11,
		"STIB_FORM_STATE_FAULT_COOL":               12,
	}
)

func (x StibFormState) Enum() *StibFormState {
	p := new(StibFormState)
	*p = x
	return p
}

func (x StibFormState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StibFormState) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[15].Descriptor()
}

func (StibFormState) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[15]
}

func (x StibFormState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StibFormState.Descriptor instead.
func (StibFormState) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{15}
}

type CellStatus int32

const (
	CellStatus_CELL_STATUS_NONE_UNSPECIFIED           CellStatus = 0
	CellStatus_CELL_STATUS_IDLE                       CellStatus = 1
	CellStatus_CELL_STATUS_IN_PROCESS                 CellStatus = 2
	CellStatus_CELL_STATUS_COMPLETE                   CellStatus = 3
	CellStatus_CELL_STATUS_FAILED                     CellStatus = 4
	CellStatus_CELL_STATUS_FAILED_SAFETY_LIMIT        CellStatus = 5
	CellStatus_CELL_STATUS_FAILED_POGO_PIN_IRRATIONAL CellStatus = 6
)

// Enum value maps for CellStatus.
var (
	CellStatus_name = map[int32]string{
		0: "CELL_STATUS_NONE_UNSPECIFIED",
		1: "CELL_STATUS_IDLE",
		2: "CELL_STATUS_IN_PROCESS",
		3: "CELL_STATUS_COMPLETE",
		4: "CELL_STATUS_FAILED",
		5: "CELL_STATUS_FAILED_SAFETY_LIMIT",
		6: "CELL_STATUS_FAILED_POGO_PIN_IRRATIONAL",
	}
	CellStatus_value = map[string]int32{
		"CELL_STATUS_NONE_UNSPECIFIED":           0,
		"CELL_STATUS_IDLE":                       1,
		"CELL_STATUS_IN_PROCESS":                 2,
		"CELL_STATUS_COMPLETE":                   3,
		"CELL_STATUS_FAILED":                     4,
		"CELL_STATUS_FAILED_SAFETY_LIMIT":        5,
		"CELL_STATUS_FAILED_POGO_PIN_IRRATIONAL": 6,
	}
)

func (x CellStatus) Enum() *CellStatus {
	p := new(CellStatus)
	*p = x
	return p
}

func (x CellStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[16].Descriptor()
}

func (CellStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[16]
}

func (x CellStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellStatus.Descriptor instead.
func (CellStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{16}
}

type CellDetectStatus int32

const (
	CellDetectStatus_CELL_DETECT_STATUS_NONE_UNSPECIFIED CellDetectStatus = 0
	CellDetectStatus_CELL_DETECT_STATUS_NOT_DETECTED     CellDetectStatus = 1
	CellDetectStatus_CELL_DETECT_STATUS_HARDWARE_FAULTED CellDetectStatus = 2
	CellDetectStatus_CELL_DETECT_STATUS_DETECTED         CellDetectStatus = 3
)

// Enum value maps for CellDetectStatus.
var (
	CellDetectStatus_name = map[int32]string{
		0: "CELL_DETECT_STATUS_NONE_UNSPECIFIED",
		1: "CELL_DETECT_STATUS_NOT_DETECTED",
		2: "CELL_DETECT_STATUS_HARDWARE_FAULTED",
		3: "CELL_DETECT_STATUS_DETECTED",
	}
	CellDetectStatus_value = map[string]int32{
		"CELL_DETECT_STATUS_NONE_UNSPECIFIED": 0,
		"CELL_DETECT_STATUS_NOT_DETECTED":     1,
		"CELL_DETECT_STATUS_HARDWARE_FAULTED": 2,
		"CELL_DETECT_STATUS_DETECTED":         3,
	}
)

func (x CellDetectStatus) Enum() *CellDetectStatus {
	p := new(CellDetectStatus)
	*p = x
	return p
}

func (x CellDetectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellDetectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[17].Descriptor()
}

func (CellDetectStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[17]
}

func (x CellDetectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellDetectStatus.Descriptor instead.
func (CellDetectStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{17}
}

type ShuntCalStatus int32

const (
	ShuntCalStatus_SHUNT_CAL_STATUS_UNKNOWN_UNSPECIFIED       ShuntCalStatus = 0
	ShuntCalStatus_SHUNT_CAL_STATUS_CALIBRATED                ShuntCalStatus = 1
	ShuntCalStatus_SHUNT_CAL_STATUS_UNCALIBRATED_SID_MISMATCH ShuntCalStatus = 2
	ShuntCalStatus_SHUNT_CAL_STATUS_UNCALIBRATED_RANGE_ERROR  ShuntCalStatus = 3
)

// Enum value maps for ShuntCalStatus.
var (
	ShuntCalStatus_name = map[int32]string{
		0: "SHUNT_CAL_STATUS_UNKNOWN_UNSPECIFIED",
		1: "SHUNT_CAL_STATUS_CALIBRATED",
		2: "SHUNT_CAL_STATUS_UNCALIBRATED_SID_MISMATCH",
		3: "SHUNT_CAL_STATUS_UNCALIBRATED_RANGE_ERROR",
	}
	ShuntCalStatus_value = map[string]int32{
		"SHUNT_CAL_STATUS_UNKNOWN_UNSPECIFIED":       0,
		"SHUNT_CAL_STATUS_CALIBRATED":                1,
		"SHUNT_CAL_STATUS_UNCALIBRATED_SID_MISMATCH": 2,
		"SHUNT_CAL_STATUS_UNCALIBRATED_RANGE_ERROR":  3,
	}
)

func (x ShuntCalStatus) Enum() *ShuntCalStatus {
	p := new(ShuntCalStatus)
	*p = x
	return p
}

func (x ShuntCalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShuntCalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[18].Descriptor()
}

func (ShuntCalStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[18]
}

func (x ShuntCalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShuntCalStatus.Descriptor instead.
func (ShuntCalStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{18}
}

// FIB
type FanStatus int32

const (
	FanStatus_FAN_STATUS_UNKNOWN_UNSPECIFIED FanStatus = 0
	FanStatus_FAN_STATUS_ON                  FanStatus = 1
	FanStatus_FAN_STATUS_OFF                 FanStatus = 2
	FanStatus_FAN_STATUS_FAULTED             FanStatus = 3
)

// Enum value maps for FanStatus.
var (
	FanStatus_name = map[int32]string{
		0: "FAN_STATUS_UNKNOWN_UNSPECIFIED",
		1: "FAN_STATUS_ON",
		2: "FAN_STATUS_OFF",
		3: "FAN_STATUS_FAULTED",
	}
	FanStatus_value = map[string]int32{
		"FAN_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"FAN_STATUS_ON":                  1,
		"FAN_STATUS_OFF":                 2,
		"FAN_STATUS_FAULTED":             3,
	}
)

func (x FanStatus) Enum() *FanStatus {
	p := new(FanStatus)
	*p = x
	return p
}

func (x FanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[19].Descriptor()
}

func (FanStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[19]
}

func (x FanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanStatus.Descriptor instead.
func (FanStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{19}
}

// TAUX
type TauxStatus int32

const (
	TauxStatus_TAUX_STATUS_UNKNOWN_UNSPECIFIED TauxStatus = 0
	TauxStatus_TAUX_STATUS_INIT                TauxStatus = 1 // Taux is initializing
	TauxStatus_TAUX_STATUS_PRECHARGE           TauxStatus = 2 // Taux is precharging bus to 76V
	TauxStatus_TAUX_STATUS_ACTIVE              TauxStatus = 3 // Taux is commanding bus to 85V
	TauxStatus_TAUX_STATUS_FAULTED             TauxStatus = 4 // Taux is faulted
)

// Enum value maps for TauxStatus.
var (
	TauxStatus_name = map[int32]string{
		0: "TAUX_STATUS_UNKNOWN_UNSPECIFIED",
		1: "TAUX_STATUS_INIT",
		2: "TAUX_STATUS_PRECHARGE",
		3: "TAUX_STATUS_ACTIVE",
		4: "TAUX_STATUS_FAULTED",
	}
	TauxStatus_value = map[string]int32{
		"TAUX_STATUS_UNKNOWN_UNSPECIFIED": 0,
		"TAUX_STATUS_INIT":                1,
		"TAUX_STATUS_PRECHARGE":           2,
		"TAUX_STATUS_ACTIVE":              3,
		"TAUX_STATUS_FAULTED":             4,
	}
)

func (x TauxStatus) Enum() *TauxStatus {
	p := new(TauxStatus)
	*p = x
	return p
}

func (x TauxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TauxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_enums_proto_enumTypes[20].Descriptor()
}

func (TauxStatus) Type() protoreflect.EnumType {
	return &file_enums_proto_enumTypes[20]
}

func (x TauxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TauxStatus.Descriptor instead.
func (TauxStatus) EnumDescriptor() ([]byte, []int) {
	return file_enums_proto_rawDescGZIP(), []int{20}
}

var File_enums_proto protoreflect.FileDescriptor

var file_enums_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xaf, 0x02,
	0x0a, 0x15, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x58, 0x52, 0x5f, 0x53,
	0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x59, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x58, 0x52,
	0x5f, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x46, 0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x45, 0x50, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x58, 0x52, 0x5f, 0x53, 0x54,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x58, 0x52, 0x5f, 0x53, 0x54,
	0x5f, 0x53, 0x45, 0x51, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x09, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x51, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x58, 0x52, 0x5f, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x2a,
	0xf4, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x58,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x58,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x2a, 0xe3, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x58,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49,
	0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49,
	0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xb4, 0x01, 0x0a,
	0x0f, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49,
	0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x58, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x58, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x04, 0x2a, 0xdc, 0x01, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x04, 0x2a, 0xfa, 0x01, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x45, 0x45, 0x44, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x2a,
	0x65, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x31, 0x10, 0x02, 0x2a, 0xd0, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x06, 0x2a, 0x8d, 0x01, 0x0a, 0x14, 0x49, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0xad, 0x01, 0x0a, 0x13, 0x49, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x87, 0x01, 0x0a, 0x08, 0x49, 0x73,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x53, 0x57, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x57, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x53, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x10, 0x04, 0x2a, 0xbb, 0x02, 0x0a, 0x08, 0x49, 0x73, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x55, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x54, 0x4f,
	0x5f, 0x47, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x52,
	0x41, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x53, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x53, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x2a, 0x7e, 0x0a, 0x11, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x03, 0x2a, 0x82, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x79, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52,
	0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x10, 0x04, 0x2a, 0xd1, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x69, 0x62, 0x44,
	0x43, 0x44, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44,
	0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x4f,
	0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x44, 0x43, 0x44, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x4c, 0x4f, 0x53, 0x48, 0x10, 0x09, 0x2a, 0x8f, 0x03, 0x0a, 0x0d, 0x53,
	0x74, 0x69, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x43, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x56, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x49, 0x42,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x43, 0x52, 0x5f,
	0x50, 0x55, 0x4c, 0x53, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x49, 0x42, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x49,
	0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x57, 0x10,
	0x0a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x49, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x0c, 0x2a, 0xe3, 0x01, 0x0a,
	0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x47,
	0x4f, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x49, 0x52, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x06, 0x2a, 0xaa, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x41, 0x52, 0x44,
	0x57, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0xba, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x53, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x09,
	0x46, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x93, 0x01, 0x0a,
	0x0a, 0x54, 0x61, 0x75, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x41, 0x55, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x55, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x55,
	0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enums_proto_rawDescOnce sync.Once
	file_enums_proto_rawDescData = file_enums_proto_rawDesc
)

func file_enums_proto_rawDescGZIP() []byte {
	file_enums_proto_rawDescOnce.Do(func() {
		file_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_enums_proto_rawDescData)
	})
	return file_enums_proto_rawDescData
}

var file_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_enums_proto_goTypes = []interface{}{
	(FixtureControlSmState)(0),  // 0: FixtureControlSmState
	(FixtureStatus)(0),          // 1: FixtureStatus
	(FixturePositionSmState)(0), // 2: FixturePositionSmState
	(FixturePosition)(0),        // 3: FixturePosition
	(EquipmentRequest)(0),       // 4: EquipmentRequest
	(EquipmentStatus)(0),        // 5: EquipmentStatus
	(FireAlarmStatus)(0),        // 6: FireAlarmStatus
	(FormRequest)(0),            // 7: FormRequest
	(IsolationTestRequest)(0),   // 8: IsolationTestRequest
	(IsolationTestStatus)(0),    // 9: IsolationTestStatus
	(IsoState)(0),               // 10: IsoState
	(IsoError)(0),               // 11: IsoError
	(EnumerationStatus)(0),      // 12: EnumerationStatus
	(TrayOrientation)(0),        // 13: TrayOrientation
	(StibDCDCState)(0),          // 14: StibDCDCState
	(StibFormState)(0),          // 15: StibFormState
	(CellStatus)(0),             // 16: CellStatus
	(CellDetectStatus)(0),       // 17: CellDetectStatus
	(ShuntCalStatus)(0),         // 18: ShuntCalStatus
	(FanStatus)(0),              // 19: FanStatus
	(TauxStatus)(0),             // 20: TauxStatus
}
var file_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enums_proto_init() }
func file_enums_proto_init() {
	if File_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enums_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enums_proto_goTypes,
		DependencyIndexes: file_enums_proto_depIdxs,
		EnumInfos:         file_enums_proto_enumTypes,
	}.Build()
	File_enums_proto = out.File
	file_enums_proto_rawDesc = nil
	file_enums_proto_goTypes = nil
	file_enums_proto_depIdxs = nil
}
